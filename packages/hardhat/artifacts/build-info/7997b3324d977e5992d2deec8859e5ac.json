{"id":"7997b3324d977e5992d2deec8859e5ac","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"},"contracts/features/MecenateFeed.sol":{"content":"/**\r\n * @title MecenateFeed\r\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\r\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\r\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../modules/Events.sol\";\r\nimport \"../modules/Creation.sol\";\r\nimport \"../modules/Acceptance.sol\";\r\nimport \"../modules/Submission.sol\";\r\nimport \"../modules/Finalization.sol\";\r\nimport \"../modules/Renounce.sol\";\r\nimport \"../modules/Message.sol\";\r\n\r\ncontract MecenateFeed is\r\n    Events,\r\n    Message,\r\n    Creation,\r\n    Acceptance,\r\n    Renounce,\r\n    Submission,\r\n    Finalization\r\n{\r\n    constructor(\r\n        bytes32 _owner,\r\n        address _usersModuleContract,\r\n        address _verifierContract,\r\n        address _vaultContract,\r\n        address _factoryContract,\r\n        string memory _version\r\n    )\r\n        Data(\r\n            _usersModuleContract,\r\n            _verifierContract,\r\n            _vaultContract,\r\n            _factoryContract,\r\n            _version\r\n        )\r\n    {\r\n        owner = _owner;\r\n    }\r\n}\r\n"},"contracts/interfaces/IMecenateFeed.sol":{"content":"pragma solidity 0.8.19;\r\n\r\nimport \"../library/Structures.sol\";\r\n\r\ninterface IMecenateFeed {\r\n    function getTotalStaked() external view returns (uint256);\r\n\r\n    function postCount() external view returns (uint256);\r\n\r\n    function acceptPost(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce,\r\n        Structures.Tokens,\r\n        uint256 _amount\r\n    ) external payable;\r\n\r\n    function getSellerStake() external view returns (uint256);\r\n\r\n    function getBuyerStake() external view returns (uint256);\r\n\r\n    function getPaymentRequested() external view returns (uint256);\r\n\r\n    function getStakeRequested() external view returns (uint256);\r\n\r\n    function getStatus() external view returns (Structures.PostStatus status);\r\n\r\n    function getTokenId() external view returns (Structures.Tokens tokenId);\r\n\r\n    function owner() external view returns (bytes32);\r\n}\r\n"},"contracts/interfaces/IMecenateFeedFactory.sol":{"content":"pragma solidity 0.8.19;\r\n\r\ninterface IMecenateFeedFactory {\r\n    function owner() external view returns (address payable);\r\n\r\n    function treasuryContract() external view returns (address payable);\r\n\r\n    function identityContract() external view returns (address);\r\n\r\n    function feeds() external view returns (address[] memory);\r\n\r\n    function contractCounter() external view returns (uint256);\r\n\r\n    function isFeed(address _feed) external view returns (bool);\r\n\r\n    function museToken() external view returns (address);\r\n\r\n    function wethToken() external view returns (address);\r\n\r\n    function daiToken() external view returns (address);\r\n\r\n    function router() external view returns (address);\r\n\r\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\r\n\r\n    function burnEnabled() external view returns (bool);\r\n}\r\n"},"contracts/interfaces/IMecenateTreasury.sol":{"content":"pragma solidity 0.8.19;\r\n\r\ninterface IMecenateTreasury {\r\n    function globalFee() external view returns (uint256);\r\n\r\n    function fixedFee() external view returns (uint256);\r\n}\r\n"},"contracts/interfaces/IMecenateUsers.sol":{"content":"pragma solidity 0.8.19;\r\nimport \"../library/Structures.sol\";\r\n\r\ninterface IMecenateUsers {\r\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\r\n\r\n    function getUserData(\r\n        address user\r\n    ) external view returns (Structures.User memory);\r\n\r\n    function getUserCount() external view returns (uint256);\r\n\r\n    function getUserAt(uint256 index) external view returns (address);\r\n\r\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\r\n}\r\n"},"contracts/interfaces/IMecenateVerifier.sol":{"content":"pragma solidity 0.8.19;\r\n\r\ninterface IMecenateVerifier {\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\r\n}\r\n"},"contracts/interfaces/IMUSE.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// import IERC20 from openzeppelin\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IMUSE is IERC20 {\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external returns (bool);\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external returns (bool);\r\n\r\n    function mint(uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n"},"contracts/library/Structures.sol":{"content":"/**\r\n * @title Structures\r\n * @dev This library defines various data structures used in the Mecenate platform.\r\n */\r\npragma solidity 0.8.19;\r\n\r\nlibrary Structures {\r\n    enum PostStatus {\r\n        Waiting,\r\n        Proposed,\r\n        Accepted,\r\n        Submitted,\r\n        Finalized,\r\n        Punished,\r\n        Revealed,\r\n        Renounced\r\n    }\r\n    enum Tokens {\r\n        NaN,\r\n        MUSE,\r\n        DAI\r\n    }\r\n    enum PostType {\r\n        Text,\r\n        Image,\r\n        Video,\r\n        Audio,\r\n        File\r\n    }\r\n    enum PostDuration {\r\n        OneDay,\r\n        ThreeDays,\r\n        OneWeek,\r\n        TwoWeeks,\r\n        OneMonth\r\n    }\r\n\r\n    struct FeedSettings {\r\n        uint256 punishmentRatio;\r\n        uint256 postCount;\r\n        address usersModuleContract;\r\n        address factoryContract;\r\n        address verifierContract;\r\n        address vaultContract;\r\n        address router;\r\n        bytes encodedSymKey;\r\n        bytes lastMessageForBuyer;\r\n        bytes lastMessageForSeller;\r\n        string version;\r\n    }\r\n\r\n    struct FactorySettings {\r\n        address treasuryContract;\r\n        address usersModuleContract;\r\n        address verifierContract;\r\n        address vaultContract;\r\n        address museToken;\r\n        address daiToken;\r\n        address wethToken;\r\n        address router;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing a post on the Mecenate platform.\r\n     */\r\n    struct Post {\r\n        User creator;\r\n        PostData postdata;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing the data of a post on the Mecenate platform.\r\n     */\r\n    struct PostData {\r\n        PostSettings settings;\r\n        PostEscrow escrow;\r\n        PostEncryptedData data;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\r\n     */\r\n    struct PostEncryptedData {\r\n        bytes encryptedData;\r\n        bytes encryptedKey;\r\n        bytes decryptedData;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing the settings of a post on the Mecenate platform.\r\n     */\r\n    struct PostSettings {\r\n        PostStatus status;\r\n        PostType postType;\r\n        uint256 creationTimeStamp;\r\n        uint256 endTimeStamp;\r\n        uint256 duration;\r\n        Tokens tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\r\n     */\r\n    struct PostSettingPrivate {\r\n        bytes vaultIdSeller;\r\n        uint256 sellerTwitterId;\r\n        uint256 sellerTelegramId;\r\n        bytes vaultIdBuyer;\r\n        uint256 buyerTwitterId;\r\n        uint256 buyerTelegramId;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\r\n     */\r\n    struct PostEscrow {\r\n        uint256 stake;\r\n        uint256 payment;\r\n        uint256 punishment;\r\n        uint256 penalty;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing a user on the Mecenate platform.\r\n     */\r\n    struct User {\r\n        bytes32 vaultId;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing a feed on the Mecenate platform.\r\n     */\r\n    struct Feed {\r\n        address contractAddress;\r\n        bytes32 operator;\r\n        uint256 sellerStake;\r\n        uint256 buyerStake;\r\n        uint256 totalStake;\r\n        uint256 postCount;\r\n        uint256 paymentRequested;\r\n        uint256 stakeRequested;\r\n        PostStatus status;\r\n        Tokens tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing a bay request on the Mecenate platform.\r\n     */\r\n    struct BayRequest {\r\n        bytes32 request;\r\n        uint256 payment;\r\n        uint256 stake;\r\n        address postAddress;\r\n        bool accepted;\r\n        uint256 postCount;\r\n        Tokens tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\r\n     */\r\n    struct BayRequestPrivate {\r\n        bytes vaultIdSeller;\r\n        bytes sellerResponse;\r\n        bytes vaultIdBuyer;\r\n        bytes buyerResponse;\r\n        address buyerTo;\r\n        bytes32 buyerNonce;\r\n    }\r\n}\r\n"},"contracts/modules/Acceptance.sol":{"content":"/**\n * @title Acceptance\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\n */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Events.sol\";\nimport \"./Staking.sol\";\n\nabstract contract Acceptance is Events, Staking {\n    function acceptPost(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce,\n        Structures.Tokens tokenId,\n        uint256 _paymentAmount\n    ) external payable virtual {\n        require(\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\n            \"INVALID_STATUS\"\n        );\n        _checkToken(tokenId);\n\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\n            ? msg.value\n            : _paymentAmount;\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\n\n        // Get encryptedVaultId only once\n        (\n            bytes memory vaultId,\n            uint256 twitterId,\n            uint256 telegramId,\n\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        // Use local variable for repeated calls\n        uint256 sellerStake = Deposit._getDeposit(tokenId, sellerVaultIdHash);\n\n        require(sellerStake >= post.postdata.escrow.stake, \"STAKE_INCORRECT\");\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                encryptedVaultId\n            ),\n            \"USERT_NOT_EXIST\"\n        );\n        require(encryptedVaultId != sellerVaultIdHash, \"YOU_ARE_THE_SELLER\");\n\n        if (post.postdata.escrow.payment > 0) {\n            require(\n                _paymentAmount >= post.postdata.escrow.payment,\n                \"NOT_ENOUGH_PAYMENT\"\n            );\n        } else {\n            require(msg.value > 0, \"ZERO_MSGVALUE\");\n            require(_paymentAmount > 0, \"ZERO_PAYMENT\");\n        }\n\n        uint256 payment = _addStake(\n            tokenId,\n            encryptedVaultId,\n            settings.vaultContract,\n            amountToAdd\n        );\n\n        // Update all at once\n        post.postdata.escrow.payment = payment;\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\n        _changeStatus(Structures.PostStatus.Accepted);\n\n        // Update private settings\n        postSettingPrivate.vaultIdBuyer = vaultId;\n        postSettingPrivate.buyerTwitterId = twitterId;\n        postSettingPrivate.buyerTelegramId = telegramId;\n\n        emit Accepted(post);\n    }\n}\n"},"contracts/modules/BurnDAI.sol":{"content":"pragma solidity 0.8.19;\r\n\r\nimport \"./BurnMUSE.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nabstract contract BurnDAI is BurnMUSE {\r\n    using SafeMath for uint256;\r\n\r\n    function _burnFrom(address from, uint256 value) internal override {\r\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\r\n            .transferFrom(from, address(this), value);\r\n\r\n        _burn(value);\r\n    }\r\n\r\n    function _burnDai(uint256 value) internal {\r\n        // approve uniswap for token transfer\r\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\r\n            .approve(settings.router, value);\r\n\r\n        // swap dai for MUSE\r\n        uint256 tokens_sold = value;\r\n\r\n        uint256 tokens_bought = _swapTokensForToken(\r\n            getTokenAddress(),\r\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\r\n            uint24(\r\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\r\n            ),\r\n            tokens_sold\r\n        );\r\n\r\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\r\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\r\n            BurnMUSE.getTokenAddress(),\r\n            uint24(\r\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\r\n            ),\r\n            tokens_bought\r\n        );\r\n\r\n        // burn MUSE\r\n        BurnMUSE._burn(tokens_sold_to_muse);\r\n    }\r\n\r\n    function getTokenAddress()\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (address token)\r\n    {\r\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\r\n    }\r\n\r\n    function getExchangeAddress()\r\n        internal\r\n        view\r\n        override\r\n        returns (address exchange)\r\n    {\r\n        exchange = settings.router;\r\n    }\r\n\r\n    function _swapTokensForToken(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn\r\n    ) internal returns (uint256 amountOut) {\r\n        // Check and approve allowance\r\n        uint256 allowance = IERC20(tokenIn).allowance(\r\n            address(this),\r\n            settings.router\r\n        );\r\n        if (allowance < amountIn) {\r\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\r\n        }\r\n\r\n        // Prepare parameters\r\n        address recipient = address(this);\r\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\r\n\r\n        // Perform the swap\r\n        // Refer to the Uniswap V3 documentation for details on the params.\r\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\r\n            ISwapRouter.ExactInputSingleParams({\r\n                tokenIn: tokenIn,\r\n                tokenOut: tokenOut,\r\n                fee: fee,\r\n                recipient: recipient,\r\n                deadline: deadline,\r\n                amountIn: amountIn,\r\n                amountOutMinimum: 0, // you may want to set a minimum here\r\n                sqrtPriceLimitX96: 0\r\n            })\r\n        );\r\n\r\n        return amountOut;\r\n    }\r\n}\r\n"},"contracts/modules/BurnMUSE.sol":{"content":"pragma solidity 0.8.19;\r\nimport \"../interfaces/IMUSE.sol\";\r\nimport \"../interfaces/IMecenateFeedFactory.sol\";\r\nimport \"./Events.sol\";\r\n\r\nabstract contract BurnMUSE is Events {\r\n    function _burn(uint256 value) internal virtual {\r\n        require(\r\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\r\n                .burn(value),\r\n            \"muse burn failed\"\r\n        );\r\n    }\r\n\r\n    function _burnFrom(address from, uint256 value) internal virtual {\r\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\r\n            .transferFrom(from, address(this), value);\r\n        _burn(value);\r\n    }\r\n\r\n    function getTokenAddress() internal view virtual returns (address token) {\r\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\r\n    }\r\n\r\n    function getExchangeAddress()\r\n        internal\r\n        view\r\n        virtual\r\n        returns (address exchange)\r\n    {\r\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\r\n    }\r\n}\r\n"},"contracts/modules/Creation.sol":{"content":"/**\n * @title Creation\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Staking.sol\";\n\nabstract contract Creation is Staking {\n    function createPost(\n        bytes memory encryptedHash,\n        Structures.PostType postType,\n        Structures.PostDuration postDuration,\n        uint256 payment,\n        uint256 stakeAmount,\n        Structures.Tokens tokenId,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    )\n        external\n        payable\n        onlyValidTokenID(tokenId)\n        returns (Structures.Post memory)\n    {\n        (\n            bytes memory vaultId,\n            uint256 twitterId,\n            uint256 telegramId,\n\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        // Early exit conditions\n        require(encryptedVaultId == owner, \"NOT_OWNER\");\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                encryptedVaultId\n            ),\n            \"USER_NOT_EXIST\"\n        );\n        require(\n            validStatuses[uint8(post.postdata.settings.status)],\n            \"INVALID_STATUS\"\n        );\n        require(stakeAmount > 0, \"STAKE_AMOUNT_ZERO\");\n\n        uint256 duration = postDurationToDays[uint8(postDuration)];\n        uint256 stake = _addStake(\n            tokenId,\n            encryptedVaultId,\n            settings.vaultContract,\n            stakeAmount\n        );\n\n        // Change status to Proposed\n        _changeStatus(Structures.PostStatus.Proposed);\n\n        // Initialize the new Post struct with named arguments for clarity\n        Structures.Post memory newPost = Structures.Post({\n            creator: Structures.User({vaultId: encryptedVaultId}),\n            postdata: Structures.PostData({\n                settings: Structures.PostSettings({\n                    postType: postType,\n                    status: Structures.PostStatus.Proposed,\n                    creationTimeStamp: block.timestamp,\n                    endTimeStamp: 0,\n                    duration: duration,\n                    tokenId: tokenId\n                }),\n                escrow: Structures.PostEscrow({\n                    stake: stake,\n                    payment: payment,\n                    punishment: 0,\n                    penalty: 0\n                }),\n                data: Structures.PostEncryptedData({\n                    encryptedData: encryptedHash,\n                    encryptedKey: ZEROHASH,\n                    decryptedData: ZEROHASH\n                })\n            })\n        });\n\n        // Update storage and emit event\n        post = newPost;\n        settings.postCount++;\n\n        postSettingPrivate.vaultIdSeller = vaultId;\n        postSettingPrivate.sellerTwitterId = twitterId;\n        postSettingPrivate.sellerTelegramId = telegramId;\n\n        emit Created(newPost);\n\n        return newPost;\n    }\n}\n"},"contracts/modules/Data.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../interfaces/IMecenateFeed.sol\";\r\nimport \"../interfaces/IMecenateUsers.sol\";\r\nimport \"../interfaces/IMecenateTreasury.sol\";\r\nimport \"../interfaces/IMecenateFeedFactory.sol\";\r\nimport \"../interfaces/IMecenateVerifier.sol\";\r\n\r\n// import openzeppelin ECDSA\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\n/**\r\n * @title Data\r\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\r\n */\r\ncontract Data {\r\n    bytes internal constant ZEROHASH = \"0x00\";\r\n\r\n    bytes32 public owner;\r\n\r\n    Structures.Post public post;\r\n    Structures.PostSettingPrivate internal postSettingPrivate;\r\n    Structures.FeedSettings internal settings;\r\n\r\n    mapping(uint8 => uint256) internal postDurationToDays;\r\n    mapping(uint8 => bool) internal validStatuses;\r\n\r\n    function onlyVault() internal view {\r\n        require(msg.sender == settings.vaultContract, \"ONLY_VAULT\");\r\n    }\r\n\r\n    constructor(\r\n        address _usersModuleContract,\r\n        address _verifierContract,\r\n        address _vaultContract,\r\n        address _factoryContract,\r\n        string memory _version\r\n    ) {\r\n        settings.punishmentRatio = 100000000000000000; // Constant value\r\n        settings.postCount = 0; // Initialize postCount to 0\r\n        settings.usersModuleContract = _usersModuleContract;\r\n        settings.verifierContract = _verifierContract;\r\n        settings.vaultContract = _vaultContract;\r\n        settings.factoryContract = msg.sender;\r\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\r\n        settings.encodedSymKey = ZEROHASH;\r\n        settings.lastMessageForBuyer = ZEROHASH;\r\n        settings.lastMessageForSeller = ZEROHASH;\r\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\r\n\r\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\r\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\r\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\r\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\r\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\r\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\r\n\r\n        settings.version = _version;\r\n    }\r\n\r\n    function version() external view returns (string memory) {\r\n        return settings.version;\r\n    }\r\n\r\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\r\n        validStatuses[uint8(post.postdata.settings.status)] = false;\r\n        validStatuses[uint8(_newStatus)] = true;\r\n        post.postdata.settings.status = _newStatus;\r\n    }\r\n\r\n    function _verifyNonce(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\r\n        (\r\n            bytes memory vaultId,\r\n            uint256 twitterId,\r\n            uint256 telegramId,\r\n            bytes memory signedMessage\r\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\r\n                sismoConnectResponse,\r\n                _to,\r\n                _nonce\r\n            );\r\n\r\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\r\n\r\n        require(_nonce == nonce, \"WRONG_NONCE\");\r\n\r\n        return (vaultId, twitterId, telegramId, signedMessage);\r\n    }\r\n\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\r\n        (\r\n            bytes memory vaultId,\r\n            uint256 twitterId,\r\n            uint256 telegramId,\r\n            bytes memory signedMessage\r\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\r\n                sismoConnectResponse,\r\n                _to,\r\n                _nonce\r\n            );\r\n\r\n        return (vaultId, twitterId, telegramId, signedMessage);\r\n    }\r\n\r\n    function getStatus() external view returns (Structures.PostStatus) {\r\n        return post.postdata.settings.status;\r\n    }\r\n\r\n    function getTokenId() external view returns (Structures.Tokens) {\r\n        return post.postdata.settings.tokenId;\r\n    }\r\n\r\n    function getTokenIdAddress() public view returns (address) {\r\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\r\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\r\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\r\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function _checkToken(Structures.Tokens _token) internal view {\r\n        require(_token == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\r\n    }\r\n\r\n    function getPaymentRequested() external view returns (uint256) {\r\n        return post.postdata.escrow.payment;\r\n    }\r\n\r\n    function getStakeRequested() external view returns (uint256) {\r\n        return post.postdata.escrow.stake;\r\n    }\r\n\r\n    function postCount() external view returns (uint256) {\r\n        return settings.postCount;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"},"contracts/modules/Deposit.sol":{"content":"pragma solidity 0.8.19;\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport \"./TokenManager.sol\";\r\n\r\ncontract Deposit {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\r\n\r\n    event DepositIncreased(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amount,\r\n        uint256 newDeposit\r\n    );\r\n    event DepositDecreased(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amount,\r\n        uint256 newDeposit\r\n    );\r\n\r\n    function _increaseDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amountToAdd\r\n    ) internal returns (uint256 newDeposit) {\r\n        // calculate new deposit amount\r\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\r\n\r\n        // set new stake to storage\r\n        _deposit[uint256(tokenID)][user] = newDeposit;\r\n\r\n        // emit event\r\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\r\n\r\n        // return\r\n        return newDeposit;\r\n    }\r\n\r\n    function _decreaseDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amountToRemove\r\n    ) internal returns (uint256 newDeposit) {\r\n        // get current deposit\r\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\r\n\r\n        // check if sufficient deposit\r\n        require(currentDeposit >= amountToRemove, \"INSUFFICIENT_DEPOSIT\");\r\n\r\n        // calculate new deposit amount\r\n        newDeposit = currentDeposit.sub(amountToRemove);\r\n\r\n        // set new stake to storage\r\n        _deposit[uint256(tokenID)][user] = newDeposit;\r\n\r\n        // emit event\r\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\r\n\r\n        // return\r\n        return newDeposit;\r\n    }\r\n\r\n    function _clearDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user\r\n    ) internal returns (uint256 amountRemoved) {\r\n        // get current deposit\r\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\r\n\r\n        // remove deposit\r\n        _decreaseDeposit(tokenID, user, currentDeposit);\r\n\r\n        // return\r\n        return currentDeposit;\r\n    }\r\n\r\n    function _getDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user\r\n    ) internal view returns (uint256 deposit) {\r\n        return _deposit[uint256(tokenID)][user];\r\n    }\r\n}\r\n"},"contracts/modules/Events.sol":{"content":"/**\r\n * @title Events\r\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\r\n */\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Data.sol\";\r\n\r\nabstract contract Events is Data {\r\n    event Created(Structures.Post post);\r\n    event Accepted(Structures.Post post);\r\n    event Valid(Structures.Post post);\r\n    event Invalid(Structures.Post post);\r\n    event Finalized(Structures.Post post);\r\n    event MadePublic(Structures.Post post);\r\n    event Renounced(Structures.Post post);\r\n}\r\n"},"contracts/modules/Finalization.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\nimport \"./Staking.sol\";\r\n\r\nabstract contract Finalization is Staking {\r\n    function finalizePost(\r\n        bool valid,\r\n        uint256 punishment,\r\n        bytes32 encryptedVaultId\r\n    ) external virtual {\r\n        onlyVault();\r\n        require(\r\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\r\n            \"NOT_SUBMITTED\"\r\n        );\r\n        require(\r\n            keccak256(postSettingPrivate.vaultIdBuyer) == encryptedVaultId,\r\n            \"VAULTID_NOT_MATCH\"\r\n        );\r\n\r\n        // Common contract addresses and variables\r\n        address treasuryContract = IMecenateFeedFactory(\r\n            settings.factoryContract\r\n        ).treasuryContract();\r\n        uint256 buyerFee = (post.postdata.escrow.payment *\r\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\r\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\r\n\r\n        // Variables for stake changes\r\n        uint256 buyerStake;\r\n        uint256 sellerStake;\r\n\r\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\r\n            // Code for both the timeout and the valid case\r\n            buyerStake = Deposit._decreaseDeposit(\r\n                post.postdata.settings.tokenId,\r\n                keccak256(postSettingPrivate.vaultIdBuyer),\r\n                post.postdata.escrow.payment\r\n            );\r\n\r\n            sellerStake = Deposit._increaseDeposit(\r\n                post.postdata.settings.tokenId,\r\n                keccak256(postSettingPrivate.vaultIdSeller),\r\n                amountToAdd\r\n            );\r\n\r\n            TokenManager._burn(\r\n                post.postdata.settings.tokenId,\r\n                treasuryContract,\r\n                buyerFee\r\n            );\r\n\r\n            // Update status and stakes\r\n            post.postdata.escrow.stake = sellerStake;\r\n            post.postdata.escrow.payment = buyerStake;\r\n            _changeStatus(\r\n                valid\r\n                    ? Structures.PostStatus.Finalized\r\n                    : Structures.PostStatus.Punished\r\n            );\r\n\r\n            emit Valid(post);\r\n        } else if (!valid) {\r\n            require(\r\n                punishment <= post.postdata.escrow.stake,\r\n                \"PUNISHMENT_TOO_HIGH\"\r\n            );\r\n            require(settings.punishmentRatio < 1e18, \"PUNISHMENT_RATIO_HIGH\");\r\n\r\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\r\n            uint256 totalPunishmentFee = penalty + punishment;\r\n\r\n            TokenManager._burn(\r\n                post.postdata.settings.tokenId,\r\n                treasuryContract,\r\n                totalPunishmentFee\r\n            );\r\n\r\n            post.postdata.escrow.payment = _burnStake(\r\n                post.postdata.settings.tokenId,\r\n                keccak256(postSettingPrivate.vaultIdBuyer),\r\n                penalty\r\n            );\r\n\r\n            post.postdata.escrow.stake = _burnStake(\r\n                post.postdata.settings.tokenId,\r\n                keccak256(postSettingPrivate.vaultIdSeller),\r\n                punishment\r\n            );\r\n\r\n            // Update status and penalties\r\n            post.postdata.settings.status = Structures.PostStatus.Punished;\r\n            post.postdata.escrow.punishment = punishment;\r\n            post.postdata.escrow.penalty = penalty;\r\n\r\n            _changeStatus(Structures.PostStatus.Punished);\r\n\r\n            emit Invalid(post);\r\n        }\r\n    }\r\n}\r\n"},"contracts/modules/Message.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./Events.sol\";\r\n\r\nabstract contract Message is Events {\r\n    function _isSellerOrBuyer(\r\n        bytes32 encryptedVaultId\r\n    ) internal view returns (bool) {\r\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\r\n        bytes32 buyerVaultIdHash = keccak256(postSettingPrivate.vaultIdBuyer);\r\n        return (encryptedVaultId == sellerVaultIdHash ||\r\n            encryptedVaultId == buyerVaultIdHash);\r\n    }\r\n\r\n    function getVaultIdSecret(\r\n        bytes32 encryptedVaultId\r\n    ) external view virtual returns (bytes memory) {\r\n        require(_isSellerOrBuyer(encryptedVaultId), \"NOT_THE_SELLER_OR_BUYER\");\r\n        return postSettingPrivate.vaultIdSeller;\r\n    }\r\n\r\n    function getTelegramIds(\r\n        bytes32 encryptedVaultId\r\n    ) external view returns (uint256, uint256) {\r\n        require(\r\n            postSettingPrivate.buyerTelegramId != 0,\r\n            \"NO_TELEGRAM_ID_FOR_BUYER\"\r\n        );\r\n\r\n        require(\r\n            postSettingPrivate.sellerTelegramId != 0,\r\n            \"NO_TELEGRAM_ID_FOR_SELLER\"\r\n        );\r\n\r\n        require(\r\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\r\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\r\n            \"NOT_THE_SELLER_OR_BUYER\"\r\n        );\r\n\r\n        return (\r\n            uint160(postSettingPrivate.buyerTelegramId),\r\n            uint160(postSettingPrivate.sellerTelegramId)\r\n        );\r\n    }\r\n\r\n    function getHashedVaultId(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual returns (bytes32) {\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\r\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\r\n            \"NOT_SELLER_OR_BUYER\"\r\n        );\r\n\r\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\r\n            return keccak256(postSettingPrivate.vaultIdSeller);\r\n        } else {\r\n            return keccak256(postSettingPrivate.vaultIdBuyer);\r\n        }\r\n    }\r\n\r\n    function write(\r\n        bytes memory encodeMessage,\r\n        bytes32 encryptedVaultId\r\n    ) external virtual {\r\n        onlyVault();\r\n        require(_isSellerOrBuyer(encryptedVaultId), \"NOT_THE_SELLER_OR_BUYER\");\r\n        _writeMessage(encodeMessage, encryptedVaultId);\r\n    }\r\n\r\n    function _writeMessage(\r\n        bytes memory encodeMessage,\r\n        bytes32 encryptedVaultId\r\n    ) internal {\r\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\r\n            settings.lastMessageForBuyer = encodeMessage;\r\n        } else {\r\n            settings.lastMessageForSeller = encodeMessage;\r\n        }\r\n    }\r\n\r\n    function getMessage(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual returns (bytes memory) {\r\n        bytes32 encryptedVaultId = _getEncryptedVaultId(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        require(_isSellerOrBuyer(encryptedVaultId), \"NOT_THE_SELLER_OR_BUYER\");\r\n        return _getMessage(encryptedVaultId);\r\n    }\r\n\r\n    function _getMessage(\r\n        bytes32 encryptedVaultId\r\n    ) internal view returns (bytes memory) {\r\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\r\n            return settings.lastMessageForBuyer;\r\n        } else {\r\n            return settings.lastMessageForSeller;\r\n        }\r\n    }\r\n\r\n    function _getEncryptedVaultId(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) internal virtual returns (bytes32) {\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        return keccak256(vaultId);\r\n    }\r\n}\r\n"},"contracts/modules/Renounce.sol":{"content":"/**\r\n * @title Renounce\r\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\r\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\r\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\r\n * The post struct is reset and the post status is updated to Renounced.\r\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Staking.sol\";\r\n\r\nabstract contract Renounce is Staking {\r\n    function renouncePost(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external {\r\n        onlyVault();\r\n\r\n        // Validate the post status\r\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\r\n        require(validStatuses[uint8(currentStatus)], \"INVALID_STATUS\");\r\n\r\n        // Verify the nonce and get the vault ID\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        // Confirm that the caller is the seller\r\n        bytes32 sellerVaultId = keccak256(postSettingPrivate.vaultIdSeller);\r\n        require(encryptedVaultId == sellerVaultId, \"NOT_SELLER\");\r\n\r\n        // Reset post and post settings\r\n        post = Structures.Post(\r\n            Structures.User({vaultId: bytes32(0)}),\r\n            Structures.PostData({\r\n                settings: Structures.PostSettings({\r\n                    status: Structures.PostStatus.Renounced,\r\n                    postType: Structures.PostType.Text,\r\n                    creationTimeStamp: 0,\r\n                    endTimeStamp: 0,\r\n                    duration: 0,\r\n                    tokenId: Structures.Tokens.NaN\r\n                }),\r\n                escrow: Structures.PostEscrow({\r\n                    stake: 0,\r\n                    payment: 0,\r\n                    punishment: 0,\r\n                    penalty: 0\r\n                }),\r\n                data: Structures.PostEncryptedData({\r\n                    encryptedData: \"\",\r\n                    encryptedKey: \"\",\r\n                    decryptedData: \"\"\r\n                })\r\n            })\r\n        );\r\n\r\n        postSettingPrivate.vaultIdBuyer = ZEROHASH;\r\n        postSettingPrivate.buyerTwitterId = 0;\r\n        postSettingPrivate.buyerTelegramId = 0;\r\n        postSettingPrivate.vaultIdSeller = ZEROHASH;\r\n        postSettingPrivate.sellerTwitterId = 0;\r\n        postSettingPrivate.sellerTelegramId = 0;\r\n\r\n        // Emit event\r\n        emit Renounced(post);\r\n    }\r\n}\r\n"},"contracts/modules/Staking.sol":{"content":"/**\n * @title Staking\n * @dev This contract handles staking functionality for the Mecenate platform.\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\n */\npragma solidity 0.8.19;\n\nimport \"./Deposit.sol\";\nimport \"./Events.sol\";\n\nabstract contract Staking is Events, Deposit, TokenManager {\n    using SafeMath for uint256;\n\n    event StakeBurned(bytes32 staker, uint256 amount);\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\n\n    function _addStake(\n        Structures.Tokens tokenId,\n        bytes32 staker,\n        address funder,\n        uint256 amountToAdd\n    ) internal returns (uint256 newStake) {\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        require(amountToAdd > 0, \"STAKE_REQUIRED\");\n\n        if (tokenId != Structures.Tokens.NaN) {\n            TokenManager._transferFrom(\n                tokenId,\n                funder,\n                address(this),\n                amountToAdd\n            );\n        }\n\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\n\n        emit StakeAdded(staker, amountToAdd, tokenId);\n\n        return newStake;\n    }\n\n    function _takeStake(\n        Structures.Tokens tokenId,\n        bytes32 staker,\n        address _to,\n        uint256 amountToTake\n    ) internal returns (uint256 newStake) {\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        // Verifica che lo status del post sia valido per procedere\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        // Effettua il trasferimento del token o dell'Ether\n        if (tokenId == Structures.Tokens.NaN) {\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\"\");\n            //require(result, \"CALL_FAILED\");\n            payable(_to).transfer(amountToTake);\n        } else {\n            TokenManager._transfer(tokenId, _to, amountToTake);\n        }\n\n        // Aggiorna il deposito e emette un evento\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\n        emit StakeTaken(staker, amountToTake, tokenId);\n\n        return newStake;\n    }\n\n    function _takeFullStake(\n        Structures.Tokens tokenId,\n        address _to,\n        bytes32 staker\n    ) internal returns (uint256 amountTaken) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\n\n        return newStake;\n    }\n\n    function _burnStake(\n        Structures.Tokens tokenId,\n        bytes32 staker,\n        uint256 amountToBurn\n    ) internal returns (uint256 newStake) {\n        uint256 newDeposit = Deposit._decreaseDeposit(\n            tokenId,\n            staker,\n            amountToBurn\n        );\n\n        if (tokenId == Structures.Tokens.NaN) {\n            (bool result, ) = payable(\n                IMecenateFeedFactory(settings.factoryContract)\n                    .treasuryContract()\n            ).call{value: amountToBurn}(\"\");\n            require(result, \"CALL_FAILED\");\n        } else if (tokenId == Structures.Tokens.DAI) {\n            BurnDAI._burnDai(amountToBurn);\n        } else if (tokenId == Structures.Tokens.MUSE) {\n            BurnMUSE._burn(amountToBurn);\n        }\n\n        emit StakeBurned(staker, amountToBurn);\n\n        return newDeposit;\n    }\n\n    function _burnFullStake(\n        Structures.Tokens tokenId,\n        bytes32 staker\n    ) internal returns (uint256 amountBurned) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        _burnStake(tokenId, staker, currentDeposit);\n\n        return currentDeposit;\n    }\n\n    function getStake(\n        Structures.Tokens tokenId,\n        bytes32 staker\n    ) external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(tokenId, staker);\n        // explicit return\n        return amount;\n    }\n\n    function getTotalStaked() external view returns (uint256) {\n        uint256 amountSeller = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdSeller)\n        );\n\n        uint256 amountBuyer = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdBuyer)\n        );\n\n        return (amountSeller + amountBuyer);\n    }\n\n    function addStake(\n        Structures.Tokens tokenId,\n        uint256 amountToAdd,\n        bytes32 encryptedVaultId\n    ) external payable returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        // Check if the encryptedVaultId matches with either the buyer or the seller\n        require(\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\n            \"VAULTID_MISMATCH\"\n        );\n\n        // Determine the amount to add based on the role (buyer or seller)\n        uint256 actualAmountToAdd = (encryptedVaultId ==\n            keccak256(postSettingPrivate.vaultIdSeller))\n            ? msg.value\n            : amountToAdd;\n\n        // Update the stake\n        uint256 newStake = _addStake(\n            tokenId,\n            encryptedVaultId,\n            settings.vaultContract,\n            actualAmountToAdd\n        );\n\n        // Update the corresponding escrow value based on the role\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\n            post.postdata.escrow.payment = newStake;\n        } else {\n            post.postdata.escrow.stake = newStake;\n        }\n\n        return newStake;\n    }\n\n    function takeStake(\n        Structures.Tokens tokenId,\n        uint256 amountToTake,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) external returns (uint256) {\n        onlyVault();\n\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        bytes32 encryptedVaultId = _commonTakeStake(\n            sismoConnectResponse,\n            _to,\n            _nonce\n        );\n\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\n        require(currentDeposit >= amountToTake, \"NOT_ENOUGH_STAKE\");\n\n        uint256 newBalance = _takeStake(\n            tokenId,\n            encryptedVaultId,\n            _to,\n            amountToTake\n        );\n\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\n            post.postdata.escrow.payment = newBalance;\n        } else {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function takeFullStake(\n        Structures.Tokens tokenId,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) external returns (uint256) {\n        onlyVault();\n\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        bytes32 encryptedVaultId = _commonTakeStake(\n            sismoConnectResponse,\n            _to,\n            _nonce\n        );\n\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\n\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\n            post.postdata.escrow.payment = newBalance;\n        } else {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function getSellerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdSeller)\n        );\n        // explicit return\n        return amount;\n    }\n\n    function getBuyerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdBuyer)\n        );\n        // explicit return\n        return amount;\n    }\n\n    function _commonTakeStake(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) internal view returns (bytes32) {\n        (bytes memory vaultId, , , ) = _verifyNonce(\n            sismoConnectResponse,\n            _to,\n            _nonce\n        );\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        require(\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\n            \"UNAUTHORIZED\"\n        );\n\n        return encryptedVaultId;\n    }\n}\n"},"contracts/modules/Submission.sol":{"content":"/**\r\n * @title Submission\r\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./Events.sol\";\r\n\r\nabstract contract Submission is Events {\r\n    function submitHash(\r\n        bytes memory encryptedKey,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual {\r\n        onlyVault();\r\n\r\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\r\n        require(\r\n            validStatuses[uint8(currentStatus)] &&\r\n                (currentStatus == Structures.PostStatus.Accepted ||\r\n                    currentStatus == Structures.PostStatus.Submitted),\r\n            \"WRONG_STATUS\"\r\n        );\r\n\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\r\n                encryptedVaultId\r\n            ),\r\n            \"User does not exist\"\r\n        );\r\n        require(post.creator.vaultId == encryptedVaultId, \"NOT_SELLER\");\r\n\r\n        _changeStatus(Structures.PostStatus.Submitted);\r\n\r\n        settings.encodedSymKey = post.postdata.data.encryptedKey = encryptedKey;\r\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\r\n        post.postdata.settings.endTimeStamp =\r\n            block.timestamp +\r\n            post.postdata.settings.duration;\r\n\r\n        emit Valid(post);\r\n    }\r\n\r\n    function revealData(\r\n        bytes memory decryptedData,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual returns (bytes memory) {\r\n        onlyVault();\r\n\r\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\r\n        require(\r\n            validStatuses[uint8(currentStatus)] &&\r\n                (currentStatus == Structures.PostStatus.Submitted ||\r\n                    currentStatus == Structures.PostStatus.Revealed ||\r\n                    currentStatus == Structures.PostStatus.Finalized),\r\n            \"INVALID_STATUS\"\r\n        );\r\n\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            encryptedVaultId != keccak256(postSettingPrivate.vaultIdSeller),\r\n            \"YOU_ARE_THE_SELLER\"\r\n        );\r\n        require(\r\n            currentStatus == Structures.PostStatus.Finalized,\r\n            \"NOT_FINALIZED\"\r\n        );\r\n\r\n        post.postdata.data.decryptedData = decryptedData;\r\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\r\n\r\n        emit MadePublic(post);\r\n\r\n        return decryptedData;\r\n    }\r\n}\r\n"},"contracts/modules/TokenManager.sol":{"content":"pragma solidity 0.8.19;\n\nimport \"./BurnDAI.sol\";\n\nabstract contract TokenManager is BurnDAI {\n    function _getTokenAddress(\n        Structures.Tokens tokenID\n    ) internal view returns (address) {\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\n        if (tokenID == Structures.Tokens.MUSE)\n            return BurnMUSE.getTokenAddress();\n        return address(0);\n    }\n\n    function _checkAllowance(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal view {\n        address tokenAddress = _getTokenAddress(tokenID);\n        require(\n            IERC20(tokenAddress).allowance(from, to) >= value,\n            \"INSUFFICIENT_ALLOWANCE\"\n        );\n    }\n\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\n        require(\n            tokenID == Structures.Tokens.MUSE ||\n                tokenID == Structures.Tokens.DAI ||\n                tokenID == Structures.Tokens.NaN,\n            \"WRONG_TOKEN\"\n        );\n        _;\n    }\n\n    function isValidTokenID(\n        Structures.Tokens tokenID\n    ) internal pure returns (bool validity) {\n        return\n            tokenID == Structures.Tokens.MUSE ||\n            tokenID == Structures.Tokens.DAI;\n    }\n\n    function _transfer(\n        Structures.Tokens tokenID,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        require(\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _transferFrom(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address tokenAddress = _getTokenAddress(tokenID);\n        _checkAllowance(tokenID, from, to, value);\n        require(\n            IERC20(tokenAddress).transferFrom(from, to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _burn(\n        Structures.Tokens tokenID,\n        address _receiver,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\n            .treasuryContract();\n\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\n            settings.factoryContract\n        );\n\n        if (tokenID == Structures.Tokens.NaN) {\n            (bool result, ) = payable(_receiver).call{value: value}(\"\");\n            require(result, \"Transfer failed.\");\n            return;\n        }\n\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\n            ? BurnDAI.getTokenAddress()\n            : BurnMUSE.getTokenAddress();\n\n        if (factory.burnEnabled() == false) {\n            IERC20(tokenAddress).transfer(treasury, value);\n            return;\n        }\n\n        if (tokenID == Structures.Tokens.DAI) {\n            BurnDAI._burnDai(value);\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            BurnMUSE._burn(value);\n        }\n    }\n\n    function _burnFrom(\n        Structures.Tokens tokenID,\n        address from,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Structures.Tokens.DAI) {\n            BurnDAI._burnFrom(from, value);\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            BurnMUSE._burnFrom(from, value);\n        }\n    }\n\n    function _approve(\n        Structures.Tokens tokenID,\n        address spender,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Structures.Tokens.DAI) {\n            require(\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\n                \"APPROVE_FAILED\"\n            );\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            address MUSE = BurnMUSE.getTokenAddress();\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\n                msg.sender,\n                spender\n            );\n\n            uint256 newAllowance = currentAllowance + value;\n            require(\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\n                \"APPROVE_FAILED\"\n            );\n        }\n    }\n\n    function totalSupply(\n        Structures.Tokens tokenID\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\n    }\n\n    function balanceOf(\n        Structures.Tokens tokenID,\n        address who\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\n    }\n\n    function allowance(\n        Structures.Tokens tokenID,\n        address owner,\n        address spender\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":10000},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMUSE.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMUSE.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateFeed.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateFeed.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateFeedFactory.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateFeedFactory.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateTreasury.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateTreasury.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateUsers.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateUsers.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateVerifier.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateVerifier.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/library/Structures.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/library/Structures.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/BurnDAI.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/BurnDAI.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/BurnMUSE.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/BurnMUSE.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Deposit.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/Deposit.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Events.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/Events.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Staking.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/Staking.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/TokenManager.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/TokenManager.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[77]},"id":78,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"131:70:0","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":77,"linearizedBaseContracts":[77],"name":"IERC20","nameLocation":"212:6:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"225:158:0","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":11,"name":"Transfer","nameLocation":"394:8:0","nodeType":"EventDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:0","nodeType":"VariableDeclaration","scope":11,"src":"403:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:0","nodeType":"VariableDeclaration","scope":11,"src":"425:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:0","nodeType":"VariableDeclaration","scope":11,"src":"445:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:0"},"src":"388:72:0"},{"anonymous":false,"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"466:148:0","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":20,"name":"Approval","nameLocation":"625:8:0","nodeType":"EventDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:0","nodeType":"VariableDeclaration","scope":20,"src":"634:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:0","nodeType":"VariableDeclaration","scope":20,"src":"657:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":18,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:0","nodeType":"VariableDeclaration","scope":20,"src":"682:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:0"},"src":"619:78:0"},{"documentation":{"id":21,"nodeType":"StructuredDocumentation","src":"703:66:0","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":26,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"794:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":26,"src":"820:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:0"},"scope":77,"src":"774:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"835:72:0","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:0","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"account","nameLocation":"939:7:0","nodeType":"VariableDeclaration","scope":34,"src":"931:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"971:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:0"},"scope":77,"src":"912:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"986:202:0","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:0","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"to","nameLocation":"1219:2:0","nodeType":"VariableDeclaration","scope":44,"src":"1211:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":36,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"amount","nameLocation":"1231:6:0","nodeType":"VariableDeclaration","scope":44,"src":"1223:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":38,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44,"src":"1257:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":41,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:0"},"scope":77,"src":"1193:70:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"1269:264:0","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":54,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:0","nodeType":"FunctionDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"owner","nameLocation":"1565:5:0","nodeType":"VariableDeclaration","scope":54,"src":"1557:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"spender","nameLocation":"1580:7:0","nodeType":"VariableDeclaration","scope":54,"src":"1572:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:0"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1612:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:0"},"scope":77,"src":"1538:83:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1627:642:0","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":64,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"spender","nameLocation":"2299:7:0","nodeType":"VariableDeclaration","scope":64,"src":"2291:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"amount","nameLocation":"2316:6:0","nodeType":"VariableDeclaration","scope":64,"src":"2308:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":64,"src":"2342:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":61,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:0"},"scope":77,"src":"2274:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":65,"nodeType":"StructuredDocumentation","src":"2354:287:0","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":76,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"from","nameLocation":"2676:4:0","nodeType":"VariableDeclaration","scope":76,"src":"2668:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":69,"mutability":"mutable","name":"to","nameLocation":"2690:2:0","nodeType":"VariableDeclaration","scope":76,"src":"2682:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"amount","nameLocation":"2702:6:0","nodeType":"VariableDeclaration","scope":76,"src":"2694:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":76,"src":"2728:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":73,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:0"},"scope":77,"src":"2646:88:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":78,"src":"202:2534:0","usedErrors":[]}],"src":"106:2631:0"},"id":0},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1538],"SignedMath":[1955],"Strings":[306]},"id":307,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":79,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":80,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":307,"sourceUnit":1539,"src":"126:25:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":81,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":307,"sourceUnit":1956,"src":"152:31:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"185:34:1","text":" @dev String operations."},"fullyImplemented":true,"id":306,"linearizedBaseContracts":[306],"name":"Strings","nameLocation":"228:7:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":85,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:1","nodeType":"VariableDeclaration","scope":306,"src":"242:54:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":83,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":88,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:1","nodeType":"VariableDeclaration","scope":306,"src":"302:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":86,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":87,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:1","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":135,"nodeType":"Block","src":"518:625:1","statements":[{"id":134,"nodeType":"UncheckedBlock","src":"528:609:1","statements":[{"assignments":[97],"declarations":[{"constant":false,"id":97,"mutability":"mutable","name":"length","nameLocation":"560:6:1","nodeType":"VariableDeclaration","scope":134,"src":"552:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":104,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"580:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":98,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"569:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1538_$","typeString":"type(library Math)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:1","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1375,"src":"569:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:1"},{"assignments":[106],"declarations":[{"constant":false,"id":106,"mutability":"mutable","name":"buffer","nameLocation":"618:6:1","nodeType":"VariableDeclaration","scope":134,"src":"604:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":105,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":111,"initialValue":{"arguments":[{"id":109,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"638:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":107,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:1"},{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"ptr","nameLocation":"667:3:1","nodeType":"VariableDeclaration","scope":134,"src":"659:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":114,"nodeType":"VariableDeclarationStatement","src":"659:11:1"},{"AST":{"nodeType":"YulBlock","src":"740:67:1","statements":[{"nodeType":"YulAssignment","src":"758:35:1","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:1","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:1"},"nodeType":"YulFunctionCall","src":"777:15:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:1"},"nodeType":"YulFunctionCall","src":"765:28:1"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":106,"isOffset":false,"isSlot":false,"src":"769:6:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"785:6:1","valueSize":1},{"declaration":113,"isOffset":false,"isSlot":false,"src":"758:3:1","valueSize":1}],"id":115,"nodeType":"InlineAssembly","src":"731:76:1"},{"body":{"id":130,"nodeType":"Block","src":"833:267:1","statements":[{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:1","subExpression":{"id":117,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"851:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":119,"nodeType":"ExpressionStatement","src":"851:5:1"},{"AST":{"nodeType":"YulBlock","src":"934:84:1","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:1"},"nodeType":"YulFunctionCall","src":"974:14:1"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:1"},"nodeType":"YulFunctionCall","src":"969:30:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:1"},"nodeType":"YulFunctionCall","src":"956:44:1"},"nodeType":"YulExpressionStatement","src":"956:44:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":85,"isOffset":false,"isSlot":false,"src":"990:8:1","valueSize":1},{"declaration":113,"isOffset":false,"isSlot":false,"src":"964:3:1","valueSize":1},{"declaration":91,"isOffset":false,"isSlot":false,"src":"978:5:1","valueSize":1}],"id":120,"nodeType":"InlineAssembly","src":"925:93:1"},{"expression":{"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"1035:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:1","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":124,"nodeType":"ExpressionStatement","src":"1035:11:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"1068:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"1064:21:1","trueBody":{"id":128,"nodeType":"Break","src":"1080:5:1"}}]},"condition":{"hexValue":"74727565","id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":131,"nodeType":"WhileStatement","src":"820:280:1"},{"expression":{"id":132,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1120:6:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":95,"id":133,"nodeType":"Return","src":"1113:13:1"}]}]},"documentation":{"id":89,"nodeType":"StructuredDocumentation","src":"352:90:1","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":136,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:1","nodeType":"FunctionDefinition","parameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"value","nameLocation":"473:5:1","nodeType":"VariableDeclaration","scope":136,"src":"465:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":90,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:1"},"returnParameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":136,"src":"503:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":93,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:1"},"scope":306,"src":"447:696:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":163,"nodeType":"Block","src":"1313:103:1","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":148,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"1354:5:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:1","trueExpression":{"hexValue":"2d","id":151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"1400:5:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":155,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1385:10:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1955_$","typeString":"type(library SignedMath)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:1","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1954,"src":"1385:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":154,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[136,164],"referencedDeclaration":136,"src":"1376:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":146,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":144,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:1","typeDescriptions":{}}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":143,"id":162,"nodeType":"Return","src":"1323:86:1"}]},"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"1149:89:1","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":164,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:1","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"value","nameLocation":"1268:5:1","nodeType":"VariableDeclaration","scope":164,"src":"1261:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":138,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:1"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":164,"src":"1298:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":141,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:1"},"scope":306,"src":"1243:173:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":183,"nodeType":"Block","src":"1595:100:1","statements":[{"id":182,"nodeType":"UncheckedBlock","src":"1605:84:1","statements":[{"expression":{"arguments":[{"id":173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1648:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1667:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":174,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"1655:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1538_$","typeString":"type(library Math)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:1","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1498,"src":"1655:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":172,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[184,260,280],"referencedDeclaration":260,"src":"1636:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":171,"id":181,"nodeType":"Return","src":"1629:49:1"}]}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"1422:94:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":184,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:1","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"value","nameLocation":"1550:5:1","nodeType":"VariableDeclaration","scope":184,"src":"1542:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:1"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":184,"src":"1580:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":169,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:1"},"scope":306,"src":"1521:174:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":259,"nodeType":"Block","src":"1908:347:1","statements":[{"assignments":[195],"declarations":[{"constant":false,"id":195,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:1","nodeType":"VariableDeclaration","scope":259,"src":"1918:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":194,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":204,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":199,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1954:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":196,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:1"},{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":205,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1975:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":207,"indexExpression":{"hexValue":"30","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":210,"nodeType":"ExpressionStatement","src":"1975:15:1"},{"expression":{"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":211,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2000:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":213,"indexExpression":{"hexValue":"31","id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":216,"nodeType":"ExpressionStatement","src":"2000:15:1"},{"body":{"id":245,"nodeType":"Block","src":"2070:83:1","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":231,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2084:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":233,"indexExpression":{"id":232,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2091:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":234,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2096:8:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":238,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2105:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:1","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":240,"nodeType":"ExpressionStatement","src":"2084:33:1"},{"expression":{"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2131:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":244,"nodeType":"ExpressionStatement","src":"2131:11:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":225,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2058:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":246,"initializationExpression":{"assignments":[218],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"i","nameLocation":"2038:1:1","nodeType":"VariableDeclaration","scope":246,"src":"2030:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":224,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":220,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"2046:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:1"},"loopExpression":{"expression":{"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:1","subExpression":{"id":228,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2067:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":230,"nodeType":"ExpressionStatement","src":"2065:3:1"},"nodeType":"ForStatement","src":"2025:128:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2170:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":247,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":253,"nodeType":"ExpressionStatement","src":"2162:55:1"},{"expression":{"arguments":[{"id":256,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2241:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":254,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:1","typeDescriptions":{}}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":193,"id":258,"nodeType":"Return","src":"2227:21:1"}]},"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"1701:112:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":260,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:1","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"value","nameLocation":"1847:5:1","nodeType":"VariableDeclaration","scope":260,"src":"1839:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"length","nameLocation":"1862:6:1","nodeType":"VariableDeclaration","scope":260,"src":"1854:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:1"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":260,"src":"1893:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":191,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:1"},"scope":306,"src":"1818:437:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":279,"nodeType":"Block","src":"2480:76:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":273,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"2525:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":271,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:1","typeDescriptions":{}}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:1","typeDescriptions":{}}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":276,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"2533:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":268,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[184,260,280],"referencedDeclaration":260,"src":"2497:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":267,"id":278,"nodeType":"Return","src":"2490:59:1"}]},"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"2261:141:1","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":280,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:1","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"addr","nameLocation":"2436:4:1","nodeType":"VariableDeclaration","scope":280,"src":"2428:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":262,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:1"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":280,"src":"2465:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":265,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:1"},"scope":306,"src":"2407:149:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":304,"nodeType":"Block","src":"2711:66:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"2744:1:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":291,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:1","typeDescriptions":{}}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":290,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":299,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"2767:1:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":297,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:1","typeDescriptions":{}}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":296,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":289,"id":303,"nodeType":"Return","src":"2721:49:1"}]},"documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"2562:66:1","text":" @dev Returns true if the two strings are equal."},"id":305,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:1","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"mutability":"mutable","name":"a","nameLocation":"2662:1:1","nodeType":"VariableDeclaration","scope":305,"src":"2648:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":282,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"b","nameLocation":"2679:1:1","nodeType":"VariableDeclaration","scope":305,"src":"2665:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":284,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:1"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":305,"src":"2705:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":287,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:1"},"scope":306,"src":"2633:144:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":307,"src":"220:2559:1","usedErrors":[]}],"src":"101:2679:1"},"id":1},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[672],"Math":[1538],"SignedMath":[1955],"Strings":[306]},"id":673,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":308,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":309,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":673,"sourceUnit":307,"src":"137:24:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"163:205:2","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":672,"linearizedBaseContracts":[672],"name":"ECDSA","nameLocation":"377:5:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":316,"members":[{"id":311,"name":"NoError","nameLocation":"417:7:2","nodeType":"EnumValue","src":"417:7:2"},{"id":312,"name":"InvalidSignature","nameLocation":"434:16:2","nodeType":"EnumValue","src":"434:16:2"},{"id":313,"name":"InvalidSignatureLength","nameLocation":"460:22:2","nodeType":"EnumValue","src":"460:22:2"},{"id":314,"name":"InvalidSignatureS","nameLocation":"492:17:2","nodeType":"EnumValue","src":"492:17:2"},{"id":315,"name":"InvalidSignatureV","nameLocation":"519:17:2","nodeType":"EnumValue","src":"519:17:2"}],"name":"RecoverError","nameLocation":"394:12:2","nodeType":"EnumDefinition","src":"389:175:2"},{"body":{"id":359,"nodeType":"Block","src":"624:457:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":322,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"638:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":323,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"647:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:2","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":311,"src":"647:20:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":328,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"734:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":329,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"743:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:2","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":312,"src":"743:29:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":337,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"843:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":338,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"852:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:2","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":313,"src":"852:35:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":346,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"965:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":347,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"974:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:2","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":314,"src":"974:30:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":355,"nodeType":"IfStatement","src":"961:114:2","trueBody":{"id":354,"nodeType":"Block","src":"1006:69:2","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":350,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":353,"nodeType":"ExpressionStatement","src":"1020:44:2"}]}},"id":356,"nodeType":"IfStatement","src":"839:236:2","trueBody":{"id":345,"nodeType":"Block","src":"889:66:2","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":341,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"ExpressionStatement","src":"903:41:2"}]}},"id":357,"nodeType":"IfStatement","src":"730:345:2","trueBody":{"id":336,"nodeType":"Block","src":"774:59:2","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":332,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":335,"nodeType":"ExpressionStatement","src":"788:34:2"}]}},"id":358,"nodeType":"IfStatement","src":"634:441:2","trueBody":{"id":327,"nodeType":"Block","src":"669:55:2","statements":[{"functionReturnParameters":321,"id":326,"nodeType":"Return","src":"683:7:2"}]}}]},"id":360,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:2","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"error","nameLocation":"604:5:2","nodeType":"VariableDeclaration","scope":360,"src":"591:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":318,"nodeType":"UserDefinedTypeName","pathNode":{"id":317,"name":"RecoverError","nameLocations":["591:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"591:12:2"},"referencedDeclaration":316,"src":"591:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:2"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[],"src":"624:0:2"},"scope":672,"src":"570:511:2","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":405,"nodeType":"Block","src":"2249:626:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":373,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"2263:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:2","memberName":"length","nodeType":"MemberAccess","src":"2263:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:2","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":403,"nodeType":"Block","src":"2788:81:2","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:2","typeDescriptions":{}}},"id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":399,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"2822:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:2","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":313,"src":"2822:35:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"id":401,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":372,"id":402,"nodeType":"Return","src":"2802:56:2"}]},"id":404,"nodeType":"IfStatement","src":"2259:610:2","trueBody":{"id":394,"nodeType":"Block","src":"2287:495:2","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"r","nameLocation":"2309:1:2","nodeType":"VariableDeclaration","scope":394,"src":"2301:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":379,"nodeType":"VariableDeclarationStatement","src":"2301:9:2"},{"assignments":[381],"declarations":[{"constant":false,"id":381,"mutability":"mutable","name":"s","nameLocation":"2332:1:2","nodeType":"VariableDeclaration","scope":394,"src":"2324:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":382,"nodeType":"VariableDeclarationStatement","src":"2324:9:2"},{"assignments":[384],"declarations":[{"constant":false,"id":384,"mutability":"mutable","name":"v","nameLocation":"2353:1:2","nodeType":"VariableDeclaration","scope":394,"src":"2347:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":383,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":385,"nodeType":"VariableDeclarationStatement","src":"2347:7:2"},{"AST":{"nodeType":"YulBlock","src":"2555:171:2","statements":[{"nodeType":"YulAssignment","src":"2573:32:2","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:2"},"nodeType":"YulFunctionCall","src":"2584:20:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:2"},"nodeType":"YulFunctionCall","src":"2578:27:2"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:2"}]},{"nodeType":"YulAssignment","src":"2622:32:2","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:2","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:2"},"nodeType":"YulFunctionCall","src":"2633:20:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:2"},"nodeType":"YulFunctionCall","src":"2627:27:2"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:2"}]},{"nodeType":"YulAssignment","src":"2671:41:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:2","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:2","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:2"},"nodeType":"YulFunctionCall","src":"2690:20:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:2"},"nodeType":"YulFunctionCall","src":"2684:27:2"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:2"},"nodeType":"YulFunctionCall","src":"2676:36:2"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"2573:1:2","valueSize":1},{"declaration":381,"isOffset":false,"isSlot":false,"src":"2622:1:2","valueSize":1},{"declaration":365,"isOffset":false,"isSlot":false,"src":"2588:9:2","valueSize":1},{"declaration":365,"isOffset":false,"isSlot":false,"src":"2637:9:2","valueSize":1},{"declaration":365,"isOffset":false,"isSlot":false,"src":"2694:9:2","valueSize":1},{"declaration":384,"isOffset":false,"isSlot":false,"src":"2671:1:2","valueSize":1}],"id":386,"nodeType":"InlineAssembly","src":"2546:180:2"},{"expression":{"arguments":[{"id":388,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"2757:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":389,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"2763:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":390,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2766:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":391,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2769:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":387,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[406,480,574],"referencedDeclaration":574,"src":"2746:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":372,"id":393,"nodeType":"Return","src":"2739:32:2"}]}}]},"documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"1087:1053:2","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":406,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:2","nodeType":"FunctionDefinition","parameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"hash","nameLocation":"2173:4:2","nodeType":"VariableDeclaration","scope":406,"src":"2165:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":365,"mutability":"mutable","name":"signature","nameLocation":"2192:9:2","nodeType":"VariableDeclaration","scope":406,"src":"2179:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":364,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:2"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":406,"src":"2226:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":406,"src":"2235:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":370,"nodeType":"UserDefinedTypeName","pathNode":{"id":369,"name":"RecoverError","nameLocations":["2235:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"2235:12:2"},"referencedDeclaration":316,"src":"2235:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:2"},"scope":672,"src":"2145:730:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":432,"nodeType":"Block","src":"3748:140:2","statements":[{"assignments":[417,420],"declarations":[{"constant":false,"id":417,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:2","nodeType":"VariableDeclaration","scope":432,"src":"3759:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":416,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"error","nameLocation":"3791:5:2","nodeType":"VariableDeclaration","scope":432,"src":"3778:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":419,"nodeType":"UserDefinedTypeName","pathNode":{"id":418,"name":"RecoverError","nameLocations":["3778:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"3778:12:2"},"referencedDeclaration":316,"src":"3778:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":425,"initialValue":{"arguments":[{"id":422,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3811:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":423,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"3817:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":421,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[406,480,574],"referencedDeclaration":406,"src":"3800:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:2"},{"expression":{"arguments":[{"id":427,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"3849:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}],"id":426,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"3837:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$316_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":429,"nodeType":"ExpressionStatement","src":"3837:18:2"},{"expression":{"id":430,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"3872:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":415,"id":431,"nodeType":"Return","src":"3865:16:2"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"2881:775:2","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":433,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:2","nodeType":"FunctionDefinition","parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"hash","nameLocation":"3686:4:2","nodeType":"VariableDeclaration","scope":433,"src":"3678:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"signature","nameLocation":"3705:9:2","nodeType":"VariableDeclaration","scope":433,"src":"3692:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":410,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:2"},"returnParameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":433,"src":"3739:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:2"},"scope":672,"src":"3661:227:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":479,"nodeType":"Block","src":"4245:203:2","statements":[{"assignments":[449],"declarations":[{"constant":false,"id":449,"mutability":"mutable","name":"s","nameLocation":"4263:1:2","nodeType":"VariableDeclaration","scope":479,"src":"4255:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":456,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":450,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"4267:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:2","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:2","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:2"},{"assignments":[458],"declarations":[{"constant":false,"id":458,"mutability":"mutable","name":"v","nameLocation":"4363:1:2","nodeType":"VariableDeclaration","scope":479,"src":"4357:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":457,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":471,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":463,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"4382:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:2","typeDescriptions":{}}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:2","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:2","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":459,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:2","typeDescriptions":{}}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:2"},{"expression":{"arguments":[{"id":473,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"4427:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":474,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4433:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":475,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"4436:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"4439:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":472,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[406,480,574],"referencedDeclaration":574,"src":"4416:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":447,"id":478,"nodeType":"Return","src":"4409:32:2"}]},"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"3894:243:2","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":480,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:2","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"hash","nameLocation":"4170:4:2","nodeType":"VariableDeclaration","scope":480,"src":"4162:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"r","nameLocation":"4184:1:2","nodeType":"VariableDeclaration","scope":480,"src":"4176:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":437,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"vs","nameLocation":"4195:2:2","nodeType":"VariableDeclaration","scope":480,"src":"4187:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:2"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":480,"src":"4222:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":442,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":480,"src":"4231:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":445,"nodeType":"UserDefinedTypeName","pathNode":{"id":444,"name":"RecoverError","nameLocations":["4231:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"4231:12:2"},"referencedDeclaration":316,"src":"4231:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:2"},"scope":672,"src":"4142:306:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":509,"nodeType":"Block","src":"4699:136:2","statements":[{"assignments":[493,496],"declarations":[{"constant":false,"id":493,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:2","nodeType":"VariableDeclaration","scope":509,"src":"4710:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"error","nameLocation":"4742:5:2","nodeType":"VariableDeclaration","scope":509,"src":"4729:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":495,"nodeType":"UserDefinedTypeName","pathNode":{"id":494,"name":"RecoverError","nameLocations":["4729:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"4729:12:2"},"referencedDeclaration":316,"src":"4729:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":502,"initialValue":{"arguments":[{"id":498,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4762:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":499,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4768:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":500,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"4771:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":497,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[406,480,574],"referencedDeclaration":480,"src":"4751:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:2"},{"expression":{"arguments":[{"id":504,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"4796:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}],"id":503,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"4784:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$316_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":506,"nodeType":"ExpressionStatement","src":"4784:18:2"},{"expression":{"id":507,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"4819:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":491,"id":508,"nodeType":"Return","src":"4812:16:2"}]},"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"4454:154:2","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":510,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:2","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"hash","nameLocation":"4638:4:2","nodeType":"VariableDeclaration","scope":510,"src":"4630:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"r","nameLocation":"4652:1:2","nodeType":"VariableDeclaration","scope":510,"src":"4644:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"vs","nameLocation":"4663:2:2","nodeType":"VariableDeclaration","scope":510,"src":"4655:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:2"},"returnParameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":510,"src":"4690:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:2"},"scope":672,"src":"4613:222:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":573,"nodeType":"Block","src":"5120:1345:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":529,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"6016:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:2","typeDescriptions":{}}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:2","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":542,"nodeType":"IfStatement","src":"6004:161:2","trueBody":{"id":541,"nodeType":"Block","src":"6089:76:2","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":533,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:2","typeDescriptions":{}}},"id":536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":537,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"6123:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:2","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":314,"src":"6123:30:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"id":539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":526,"id":540,"nodeType":"Return","src":"6103:51:2"}]}},{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"signer","nameLocation":"6267:6:2","nodeType":"VariableDeclaration","scope":573,"src":"6259:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":551,"initialValue":{"arguments":[{"id":546,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"6286:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":547,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"6292:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":548,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"6295:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":549,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"6298:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":545,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:2","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":552,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"6314:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:2","typeDescriptions":{}}},"id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":567,"nodeType":"IfStatement","src":"6310:101:2","trueBody":{"id":566,"nodeType":"Block","src":"6336:75:2","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":558,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:2","typeDescriptions":{}}},"id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":562,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"6370:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:2","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":312,"src":"6370:29:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"id":564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":526,"id":565,"nodeType":"Return","src":"6350:50:2"}]}},{"expression":{"components":[{"id":568,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"6429:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":569,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"6437:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$316_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:2","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":311,"src":"6437:20:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"id":571,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":526,"id":572,"nodeType":"Return","src":"6421:37:2"}]},"documentation":{"id":511,"nodeType":"StructuredDocumentation","src":"4841:163:2","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":574,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:2","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"hash","nameLocation":"5037:4:2","nodeType":"VariableDeclaration","scope":574,"src":"5029:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"v","nameLocation":"5049:1:2","nodeType":"VariableDeclaration","scope":574,"src":"5043:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":514,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"r","nameLocation":"5060:1:2","nodeType":"VariableDeclaration","scope":574,"src":"5052:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"s","nameLocation":"5071:1:2","nodeType":"VariableDeclaration","scope":574,"src":"5063:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:2"},"returnParameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":574,"src":"5097:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":574,"src":"5106:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":524,"nodeType":"UserDefinedTypeName","pathNode":{"id":523,"name":"RecoverError","nameLocations":["5106:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"5106:12:2"},"referencedDeclaration":316,"src":"5106:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:2"},"scope":672,"src":"5009:1456:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":606,"nodeType":"Block","src":"6692:138:2","statements":[{"assignments":[589,592],"declarations":[{"constant":false,"id":589,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:2","nodeType":"VariableDeclaration","scope":606,"src":"6703:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"error","nameLocation":"6735:5:2","nodeType":"VariableDeclaration","scope":606,"src":"6722:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":591,"nodeType":"UserDefinedTypeName","pathNode":{"id":590,"name":"RecoverError","nameLocations":["6722:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"6722:12:2"},"referencedDeclaration":316,"src":"6722:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":599,"initialValue":{"arguments":[{"id":594,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"6755:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":595,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"6761:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":596,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"6764:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":597,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"6767:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":593,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[406,480,574],"referencedDeclaration":574,"src":"6744:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$316_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:2"},{"expression":{"arguments":[{"id":601,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"6791:5:2","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$316","typeString":"enum ECDSA.RecoverError"}],"id":600,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"6779:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$316_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":603,"nodeType":"ExpressionStatement","src":"6779:18:2"},{"expression":{"id":604,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"6814:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":587,"id":605,"nodeType":"Return","src":"6807:16:2"}]},"documentation":{"id":575,"nodeType":"StructuredDocumentation","src":"6471:122:2","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":607,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:2","nodeType":"FunctionDefinition","parameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"hash","nameLocation":"6623:4:2","nodeType":"VariableDeclaration","scope":607,"src":"6615:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":579,"mutability":"mutable","name":"v","nameLocation":"6635:1:2","nodeType":"VariableDeclaration","scope":607,"src":"6629:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":578,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"r","nameLocation":"6646:1:2","nodeType":"VariableDeclaration","scope":607,"src":"6638:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"s","nameLocation":"6657:1:2","nodeType":"VariableDeclaration","scope":607,"src":"6649:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:2"},"returnParameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":607,"src":"6683:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":585,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:2"},"scope":672,"src":"6598:232:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":616,"nodeType":"Block","src":"7206:310:2","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:2","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:2","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:2"},"nodeType":"YulFunctionCall","src":"7376:48:2"},"nodeType":"YulExpressionStatement","src":"7376:48:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:2","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:2"},"nodeType":"YulFunctionCall","src":"7437:18:2"},"nodeType":"YulExpressionStatement","src":"7437:18:2"},{"nodeType":"YulAssignment","src":"7468:32:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:2","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:2","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:2"},"nodeType":"YulFunctionCall","src":"7479:21:2"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":610,"isOffset":false,"isSlot":false,"src":"7450:4:2","valueSize":1},{"declaration":613,"isOffset":false,"isSlot":false,"src":"7468:7:2","valueSize":1}],"id":615,"nodeType":"InlineAssembly","src":"7353:157:2"}]},"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"6836:279:2","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":617,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:2","nodeType":"FunctionDefinition","parameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"hash","nameLocation":"7160:4:2","nodeType":"VariableDeclaration","scope":617,"src":"7152:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:2"},"returnParameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"message","nameLocation":"7197:7:2","nodeType":"VariableDeclaration","scope":617,"src":"7189:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":612,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:2"},"scope":672,"src":"7120:396:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":638,"nodeType":"Block","src":"7881:116:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":631,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"7976:1:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:2","memberName":"length","nodeType":"MemberAccess","src":"7976:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":629,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"7959:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:2","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"7959:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":634,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"7987:1:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":626,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":625,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":624,"id":637,"nodeType":"Return","src":"7891:99:2"}]},"documentation":{"id":618,"nodeType":"StructuredDocumentation","src":"7522:274:2","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":639,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:2","nodeType":"FunctionDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"s","nameLocation":"7846:1:2","nodeType":"VariableDeclaration","scope":639,"src":"7833:14:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":619,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:2"},"returnParameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":639,"src":"7872:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:2"},"scope":672,"src":"7801:196:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":650,"nodeType":"Block","src":"8443:290:2","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:2","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:2","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:2"},"nodeType":"YulFunctionCall","src":"8530:11:2"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:2","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:2"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:2","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:2"},"nodeType":"YulFunctionCall","src":"8554:23:2"},"nodeType":"YulExpressionStatement","src":"8554:23:2"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:2","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:2"},"nodeType":"YulFunctionCall","src":"8597:14:2"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:2"},"nodeType":"YulFunctionCall","src":"8590:39:2"},"nodeType":"YulExpressionStatement","src":"8590:39:2"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:2","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:2"},"nodeType":"YulFunctionCall","src":"8649:14:2"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:2"},"nodeType":"YulFunctionCall","src":"8642:34:2"},"nodeType":"YulExpressionStatement","src":"8642:34:2"},{"nodeType":"YulAssignment","src":"8689:28:2","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:2","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:2"},"nodeType":"YulFunctionCall","src":"8697:20:2"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":647,"isOffset":false,"isSlot":false,"src":"8689:4:2","valueSize":1},{"declaration":642,"isOffset":false,"isSlot":false,"src":"8613:15:2","valueSize":1},{"declaration":644,"isOffset":false,"isSlot":false,"src":"8665:10:2","valueSize":1}],"id":649,"nodeType":"InlineAssembly","src":"8496:231:2"}]},"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"8003:328:2","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":651,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:2","nodeType":"FunctionDefinition","parameters":{"id":645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:2","nodeType":"VariableDeclaration","scope":651,"src":"8361:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:2","nodeType":"VariableDeclaration","scope":651,"src":"8386:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:2"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"data","nameLocation":"8437:4:2","nodeType":"VariableDeclaration","scope":651,"src":"8429:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:2"},"scope":672,"src":"8336:397:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":670,"nodeType":"Block","src":"9048:80:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":665,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"9104:9:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":666,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"9115:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":662,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":661,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":660,"id":669,"nodeType":"Return","src":"9058:63:2"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"8739:193:2","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":671,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:2","nodeType":"FunctionDefinition","parameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":654,"mutability":"mutable","name":"validator","nameLocation":"8986:9:2","nodeType":"VariableDeclaration","scope":671,"src":"8978:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"data","nameLocation":"9010:4:2","nodeType":"VariableDeclaration","scope":671,"src":"8997:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":655,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:2"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":671,"src":"9039:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:2"},"scope":672,"src":"8937:191:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":673,"src":"369:8761:2","usedErrors":[]}],"src":"112:9019:2"},"id":2},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1538]},"id":1539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":674,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":675,"nodeType":"StructuredDocumentation","src":"128:73:3","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1538,"linearizedBaseContracts":[1538],"name":"Math","nameLocation":"210:4:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":679,"members":[{"id":676,"name":"Down","nameLocation":"245:4:3","nodeType":"EnumValue","src":"245:4:3"},{"id":677,"name":"Up","nameLocation":"287:2:3","nodeType":"EnumValue","src":"287:2:3"},{"id":678,"name":"Zero","nameLocation":"318:4:3","nodeType":"EnumValue","src":"318:4:3"}],"name":"Rounding","nameLocation":"226:8:3","nodeType":"EnumDefinition","src":"221:122:3"},{"body":{"id":696,"nodeType":"Block","src":"480:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":689,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"497:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":690,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"501:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":693,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"509:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:3","trueExpression":{"id":692,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"505:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":688,"id":695,"nodeType":"Return","src":"490:20:3"}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"349:59:3","text":" @dev Returns the largest of two numbers."},"id":697,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:3","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"a","nameLocation":"434:1:3","nodeType":"VariableDeclaration","scope":697,"src":"426:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"b","nameLocation":"445:1:3","nodeType":"VariableDeclaration","scope":697,"src":"437:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:3"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":697,"src":"471:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":686,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:3"},"scope":1538,"src":"413:104:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":714,"nodeType":"Block","src":"655:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":707,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"672:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":708,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"676:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":711,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"684:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:3","trueExpression":{"id":710,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"680:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":706,"id":713,"nodeType":"Return","src":"665:20:3"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"523:60:3","text":" @dev Returns the smallest of two numbers."},"id":715,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:3","nodeType":"FunctionDefinition","parameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"a","nameLocation":"609:1:3","nodeType":"VariableDeclaration","scope":715,"src":"601:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"b","nameLocation":"620:1:3","nodeType":"VariableDeclaration","scope":715,"src":"612:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:3"},"returnParameters":{"id":706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":715,"src":"646:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:3"},"scope":1538,"src":"588:104:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":737,"nodeType":"Block","src":"876:82:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":725,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"931:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":726,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"935:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":729,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"941:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":730,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"945:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":732,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":724,"id":736,"nodeType":"Return","src":"923:28:3"}]},"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"698:102:3","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:3","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"a","nameLocation":"830:1:3","nodeType":"VariableDeclaration","scope":738,"src":"822:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":720,"mutability":"mutable","name":"b","nameLocation":"841:1:3","nodeType":"VariableDeclaration","scope":738,"src":"833:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":719,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:3"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":738,"src":"867:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:3"},"scope":1538,"src":"805:153:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":762,"nodeType":"Block","src":"1228:123:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":748,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1316:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1330:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":755,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":756,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"1339:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:3","trueExpression":{"hexValue":"30","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":747,"id":761,"nodeType":"Return","src":"1309:35:3"}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"964:188:3","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":763,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:3","nodeType":"FunctionDefinition","parameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"a","nameLocation":"1182:1:3","nodeType":"VariableDeclaration","scope":763,"src":"1174:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":740,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"b","nameLocation":"1193:1:3","nodeType":"VariableDeclaration","scope":763,"src":"1185:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:3"},"returnParameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":763,"src":"1219:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:3"},"scope":1538,"src":"1157:194:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":885,"nodeType":"Block","src":"1765:4115:3","statements":[{"id":884,"nodeType":"UncheckedBlock","src":"1775:4099:3","statements":[{"assignments":[776],"declarations":[{"constant":false,"id":776,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:3","nodeType":"VariableDeclaration","scope":884,"src":"2096:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":777,"nodeType":"VariableDeclarationStatement","src":"2096:13:3"},{"assignments":[779],"declarations":[{"constant":false,"id":779,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:3","nodeType":"VariableDeclaration","scope":884,"src":"2168:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":780,"nodeType":"VariableDeclarationStatement","src":"2168:13:3"},{"AST":{"nodeType":"YulBlock","src":"2248:157:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:3"},"nodeType":"YulFunctionCall","src":"2289:6:3"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:3"},"nodeType":"YulFunctionCall","src":"2276:20:3"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:3","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:3"},"nodeType":"YulFunctionCall","src":"2322:9:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:3"}]},{"nodeType":"YulAssignment","src":"2348:43:3","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:3"},"nodeType":"YulFunctionCall","src":"2361:14:3"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:3"},"nodeType":"YulFunctionCall","src":"2377:13:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:3"},"nodeType":"YulFunctionCall","src":"2357:34:3"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":776,"isOffset":false,"isSlot":false,"src":"2313:5:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"2369:5:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"2384:5:3","valueSize":1},{"declaration":779,"isOffset":false,"isSlot":false,"src":"2348:5:3","valueSize":1},{"declaration":766,"isOffset":false,"isSlot":false,"src":"2283:1:3","valueSize":1},{"declaration":766,"isOffset":false,"isSlot":false,"src":"2326:1:3","valueSize":1},{"declaration":768,"isOffset":false,"isSlot":false,"src":"2286:1:3","valueSize":1},{"declaration":768,"isOffset":false,"isSlot":false,"src":"2329:1:3","valueSize":1}],"id":781,"nodeType":"InlineAssembly","src":"2239:166:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":782,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2486:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":790,"nodeType":"IfStatement","src":"2482:368:3","trueBody":{"id":789,"nodeType":"Block","src":"2498:352:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":785,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"2816:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":786,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"2824:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":774,"id":788,"nodeType":"Return","src":"2809:26:3"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":792,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"2960:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":793,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2974:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":791,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":797,"nodeType":"ExpressionStatement","src":"2952:53:3"},{"assignments":[799],"declarations":[{"constant":false,"id":799,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:3","nodeType":"VariableDeclaration","scope":884,"src":"3261:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":800,"nodeType":"VariableDeclarationStatement","src":"3261:17:3"},{"AST":{"nodeType":"YulBlock","src":"3301:291:3","statements":[{"nodeType":"YulAssignment","src":"3370:38:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:3"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:3"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:3"},"nodeType":"YulFunctionCall","src":"3383:25:3"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:3"}]},{"nodeType":"YulAssignment","src":"3490:41:3","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:3"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:3"},"nodeType":"YulFunctionCall","src":"3510:20:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:3"},"nodeType":"YulFunctionCall","src":"3499:32:3"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:3"}]},{"nodeType":"YulAssignment","src":"3548:30:3","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:3"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:3"},"nodeType":"YulFunctionCall","src":"3557:21:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":770,"isOffset":false,"isSlot":false,"src":"3396:11:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"3524:5:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"3548:5:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"3561:5:3","valueSize":1},{"declaration":779,"isOffset":false,"isSlot":false,"src":"3490:5:3","valueSize":1},{"declaration":779,"isOffset":false,"isSlot":false,"src":"3503:5:3","valueSize":1},{"declaration":799,"isOffset":false,"isSlot":false,"src":"3370:9:3","valueSize":1},{"declaration":799,"isOffset":false,"isSlot":false,"src":"3513:9:3","valueSize":1},{"declaration":799,"isOffset":false,"isSlot":false,"src":"3568:9:3","valueSize":1},{"declaration":766,"isOffset":false,"isSlot":false,"src":"3390:1:3","valueSize":1},{"declaration":768,"isOffset":false,"isSlot":false,"src":"3393:1:3","valueSize":1}],"id":801,"nodeType":"InlineAssembly","src":"3292:300:3"},{"assignments":[803],"declarations":[{"constant":false,"id":803,"mutability":"mutable","name":"twos","nameLocation":"3907:4:3","nodeType":"VariableDeclaration","scope":884,"src":"3899:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":811,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":804,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"3914:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:3","subExpression":{"id":805,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"3930:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":809,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:3"},{"AST":{"nodeType":"YulBlock","src":"3969:362:3","statements":[{"nodeType":"YulAssignment","src":"4034:37:3","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:3"},"nodeType":"YulFunctionCall","src":"4049:22:3"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:3"}]},{"nodeType":"YulAssignment","src":"4138:25:3","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:3"},"nodeType":"YulFunctionCall","src":"4147:16:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:3"}]},{"nodeType":"YulAssignment","src":"4278:39:3","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:3","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:3"},"nodeType":"YulFunctionCall","src":"4294:12:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:3"},"nodeType":"YulFunctionCall","src":"4290:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:3"},"nodeType":"YulFunctionCall","src":"4286:31:3"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":770,"isOffset":false,"isSlot":false,"src":"4034:11:3","valueSize":1},{"declaration":770,"isOffset":false,"isSlot":false,"src":"4053:11:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"4138:5:3","valueSize":1},{"declaration":776,"isOffset":false,"isSlot":false,"src":"4151:5:3","valueSize":1},{"declaration":803,"isOffset":false,"isSlot":false,"src":"4066:4:3","valueSize":1},{"declaration":803,"isOffset":false,"isSlot":false,"src":"4158:4:3","valueSize":1},{"declaration":803,"isOffset":false,"isSlot":false,"src":"4278:4:3","valueSize":1},{"declaration":803,"isOffset":false,"isSlot":false,"src":"4301:4:3","valueSize":1},{"declaration":803,"isOffset":false,"isSlot":false,"src":"4308:4:3","valueSize":1}],"id":812,"nodeType":"InlineAssembly","src":"3960:371:3"},{"expression":{"id":817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":813,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"4397:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":814,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"4406:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":815,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"4414:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":818,"nodeType":"ExpressionStatement","src":"4397:21:3"},{"assignments":[820],"declarations":[{"constant":false,"id":820,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:3","nodeType":"VariableDeclaration","scope":884,"src":"4736:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":827,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":822,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"4759:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":824,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:3"},{"expression":{"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":828,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"4992:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":830,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5007:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":831,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5021:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":835,"nodeType":"ExpressionStatement","src":"4992:36:3"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":836,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5061:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":838,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5076:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":839,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5090:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"nodeType":"ExpressionStatement","src":"5061:36:3"},{"expression":{"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":844,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5131:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":846,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5146:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":847,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5160:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":851,"nodeType":"ExpressionStatement","src":"5131:36:3"},{"expression":{"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":852,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5201:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":854,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5216:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":855,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5230:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":859,"nodeType":"ExpressionStatement","src":"5201:36:3"},{"expression":{"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":860,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5271:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":862,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5286:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":863,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5300:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":867,"nodeType":"ExpressionStatement","src":"5271:36:3"},{"expression":{"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":868,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5342:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":870,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5357:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":871,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5371:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":875,"nodeType":"ExpressionStatement","src":"5342:36:3"},{"expression":{"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"5812:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":877,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"5821:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":878,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5829:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":881,"nodeType":"ExpressionStatement","src":"5812:24:3"},{"expression":{"id":882,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"5857:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":774,"id":883,"nodeType":"Return","src":"5850:13:3"}]}]},"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"1357:305:3","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":886,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:3","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"x","nameLocation":"1691:1:3","nodeType":"VariableDeclaration","scope":886,"src":"1683:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"y","nameLocation":"1702:1:3","nodeType":"VariableDeclaration","scope":886,"src":"1694:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:3","nodeType":"VariableDeclaration","scope":886,"src":"1705:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:3"},"returnParameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"result","nameLocation":"1757:6:3","nodeType":"VariableDeclaration","scope":886,"src":"1749:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:3"},"scope":1538,"src":"1667:4213:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":929,"nodeType":"Block","src":"6122:189:3","statements":[{"assignments":[902],"declarations":[{"constant":false,"id":902,"mutability":"mutable","name":"result","nameLocation":"6140:6:3","nodeType":"VariableDeclaration","scope":929,"src":"6132:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":908,"initialValue":{"arguments":[{"id":904,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"6156:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":905,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"6159:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":906,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"6162:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":903,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[886,930],"referencedDeclaration":886,"src":"6149:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":909,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"6188:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":910,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"6200:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$679_$","typeString":"type(enum Math.Rounding)"}},"id":911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":677,"src":"6200:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"src":"6188:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":914,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"6222:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":915,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"6225:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":916,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"6228:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":913,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:3","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":926,"nodeType":"IfStatement","src":"6184:98:3","trueBody":{"id":925,"nodeType":"Block","src":"6246:36:3","statements":[{"expression":{"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":921,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"6260:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":924,"nodeType":"ExpressionStatement","src":"6260:11:3"}]}},{"expression":{"id":927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"6298:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":900,"id":928,"nodeType":"Return","src":"6291:13:3"}]},"documentation":{"id":887,"nodeType":"StructuredDocumentation","src":"5886:121:3","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":930,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:3","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"x","nameLocation":"6036:1:3","nodeType":"VariableDeclaration","scope":930,"src":"6028:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"y","nameLocation":"6047:1:3","nodeType":"VariableDeclaration","scope":930,"src":"6039:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":890,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:3","nodeType":"VariableDeclaration","scope":930,"src":"6050:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":892,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:3","nodeType":"VariableDeclaration","scope":930,"src":"6071:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"typeName":{"id":895,"nodeType":"UserDefinedTypeName","pathNode":{"id":894,"name":"Rounding","nameLocations":["6071:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":679,"src":"6071:8:3"},"referencedDeclaration":679,"src":"6071:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:3"},"returnParameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":930,"src":"6113:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":898,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:3"},"scope":1538,"src":"6012:299:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1041,"nodeType":"Block","src":"6587:1585:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":938,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"6601:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":944,"nodeType":"IfStatement","src":"6597:45:3","trueBody":{"id":943,"nodeType":"Block","src":"6609:33:3","statements":[{"expression":{"hexValue":"30","id":941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":937,"id":942,"nodeType":"Return","src":"6623:8:3"}]}},{"assignments":[946],"declarations":[{"constant":false,"id":946,"mutability":"mutable","name":"result","nameLocation":"7329:6:3","nodeType":"VariableDeclaration","scope":1041,"src":"7321:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":955,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":949,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7349:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":948,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1210,1246],"referencedDeclaration":1210,"src":"7344:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":953,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:3"},{"id":1040,"nodeType":"UncheckedBlock","src":"7758:408:3","statements":[{"expression":{"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":956,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7782:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7792:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":958,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7801:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":959,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7805:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":962,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":966,"nodeType":"ExpressionStatement","src":"7782:35:3"},{"expression":{"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7831:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":968,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7841:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":969,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7850:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":970,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7854:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":977,"nodeType":"ExpressionStatement","src":"7831:35:3"},{"expression":{"id":987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":978,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7880:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":979,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7890:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":980,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7899:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":981,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7903:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":984,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":988,"nodeType":"ExpressionStatement","src":"7880:35:3"},{"expression":{"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":989,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7929:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":990,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7939:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":991,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7948:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":992,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7952:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":995,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":999,"nodeType":"ExpressionStatement","src":"7929:35:3"},{"expression":{"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1000,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7978:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1001,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"7988:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1002,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"7997:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1003,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8001:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1006,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1010,"nodeType":"ExpressionStatement","src":"7978:35:3"},{"expression":{"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8027:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8037:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1013,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"8046:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1014,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8050:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1017,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1021,"nodeType":"ExpressionStatement","src":"8027:35:3"},{"expression":{"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1022,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8076:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1023,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8086:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"8095:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8099:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1028,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1032,"nodeType":"ExpressionStatement","src":"8076:35:3"},{"expression":{"arguments":[{"id":1034,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8136:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1035,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"8144:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1036,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"8148:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1033,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8132:3:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":937,"id":1039,"nodeType":"Return","src":"8125:30:3"}]}]},"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"6317:208:3","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1042,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:3","nodeType":"FunctionDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"a","nameLocation":"6552:1:3","nodeType":"VariableDeclaration","scope":1042,"src":"6544:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:3"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1042,"src":"6578:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:3"},"scope":1538,"src":"6530:1642:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1077,"nodeType":"Block","src":"8348:161:3","statements":[{"id":1076,"nodeType":"UncheckedBlock","src":"8358:145:3","statements":[{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"result","nameLocation":"8390:6:3","nodeType":"VariableDeclaration","scope":1076,"src":"8382:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1058,"initialValue":{"arguments":[{"id":1056,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"8404:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1055,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1042,1078],"referencedDeclaration":1042,"src":"8399:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"8427:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"8437:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1061,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"8449:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$679_$","typeString":"type(enum Math.Rounding)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":677,"src":"8449:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"src":"8437:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"8464:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1065,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"8473:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1067,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"8482:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:3","trueExpression":{"hexValue":"31","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1073,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1052,"id":1075,"nodeType":"Return","src":"8420:72:3"}]}]},"documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"8178:89:3","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1078,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:3","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"a","nameLocation":"8294:1:3","nodeType":"VariableDeclaration","scope":1078,"src":"8286:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:3","nodeType":"VariableDeclaration","scope":1078,"src":"8297:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"typeName":{"id":1047,"nodeType":"UserDefinedTypeName","pathNode":{"id":1046,"name":"Rounding","nameLocations":["8297:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":679,"src":"8297:8:3"},"referencedDeclaration":679,"src":"8297:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:3"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1078,"src":"8339:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:3"},"scope":1538,"src":"8272:237:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1209,"nodeType":"Block","src":"8694:922:3","statements":[{"assignments":[1087],"declarations":[{"constant":false,"id":1087,"mutability":"mutable","name":"result","nameLocation":"8712:6:3","nodeType":"VariableDeclaration","scope":1209,"src":"8704:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1086,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1089,"initialValue":{"hexValue":"30","id":1088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:3"},{"id":1206,"nodeType":"UncheckedBlock","src":"8732:855:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"8760:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1104,"nodeType":"IfStatement","src":"8756:99:3","trueBody":{"id":1103,"nodeType":"Block","src":"8778:77:3","statements":[{"expression":{"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"8796:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1098,"nodeType":"ExpressionStatement","src":"8796:13:3"},{"expression":{"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"8827:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1102,"nodeType":"ExpressionStatement","src":"8827:13:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"8872:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1119,"nodeType":"IfStatement","src":"8868:96:3","trueBody":{"id":1118,"nodeType":"Block","src":"8889:75:3","statements":[{"expression":{"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"8907:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1113,"nodeType":"ExpressionStatement","src":"8907:12:3"},{"expression":{"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"8937:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1117,"nodeType":"ExpressionStatement","src":"8937:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"8981:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1134,"nodeType":"IfStatement","src":"8977:96:3","trueBody":{"id":1133,"nodeType":"Block","src":"8998:75:3","statements":[{"expression":{"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9016:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1128,"nodeType":"ExpressionStatement","src":"9016:12:3"},{"expression":{"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9046:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1132,"nodeType":"ExpressionStatement","src":"9046:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9090:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1149,"nodeType":"IfStatement","src":"9086:96:3","trueBody":{"id":1148,"nodeType":"Block","src":"9107:75:3","statements":[{"expression":{"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9125:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1143,"nodeType":"ExpressionStatement","src":"9125:12:3"},{"expression":{"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9155:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1147,"nodeType":"ExpressionStatement","src":"9155:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9199:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1164,"nodeType":"IfStatement","src":"9195:93:3","trueBody":{"id":1163,"nodeType":"Block","src":"9215:73:3","statements":[{"expression":{"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9233:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1158,"nodeType":"ExpressionStatement","src":"9233:11:3"},{"expression":{"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9262:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1162,"nodeType":"ExpressionStatement","src":"9262:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9305:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1179,"nodeType":"IfStatement","src":"9301:93:3","trueBody":{"id":1178,"nodeType":"Block","src":"9321:73:3","statements":[{"expression":{"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9339:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1173,"nodeType":"ExpressionStatement","src":"9339:11:3"},{"expression":{"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9368:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1177,"nodeType":"ExpressionStatement","src":"9368:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9411:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1194,"nodeType":"IfStatement","src":"9407:93:3","trueBody":{"id":1193,"nodeType":"Block","src":"9427:73:3","statements":[{"expression":{"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9445:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1188,"nodeType":"ExpressionStatement","src":"9445:11:3"},{"expression":{"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9474:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ExpressionStatement","src":"9474:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"9517:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1205,"nodeType":"IfStatement","src":"9513:64:3","trueBody":{"id":1204,"nodeType":"Block","src":"9533:44:3","statements":[{"expression":{"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1200,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9551:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1203,"nodeType":"ExpressionStatement","src":"9551:11:3"}]}}]},{"expression":{"id":1207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"9603:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1085,"id":1208,"nodeType":"Return","src":"9596:13:3"}]},"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"8515:113:3","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1210,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:3","nodeType":"FunctionDefinition","parameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"value","nameLocation":"8655:5:3","nodeType":"VariableDeclaration","scope":1210,"src":"8647:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:3"},"returnParameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"8685:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:3"},"scope":1538,"src":"8633:983:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1245,"nodeType":"Block","src":"9849:165:3","statements":[{"id":1244,"nodeType":"UncheckedBlock","src":"9859:149:3","statements":[{"assignments":[1222],"declarations":[{"constant":false,"id":1222,"mutability":"mutable","name":"result","nameLocation":"9891:6:3","nodeType":"VariableDeclaration","scope":1244,"src":"9883:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1226,"initialValue":{"arguments":[{"id":1224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"9905:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1223,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1210,1246],"referencedDeclaration":1210,"src":"9900:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"9932:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1228,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"9942:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1229,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"9954:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$679_$","typeString":"type(enum Math.Rounding)"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":677,"src":"9954:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"src":"9942:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"9974:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"9983:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:3","trueExpression":{"hexValue":"31","id":1238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1241,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1220,"id":1243,"nodeType":"Return","src":"9925:72:3"}]}]},"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"9622:142:3","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1246,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:3","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"value","nameLocation":"9791:5:3","nodeType":"VariableDeclaration","scope":1246,"src":"9783:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1212,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:3","nodeType":"VariableDeclaration","scope":1246,"src":"9798:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"typeName":{"id":1215,"nodeType":"UserDefinedTypeName","pathNode":{"id":1214,"name":"Rounding","nameLocations":["9798:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":679,"src":"9798:8:3"},"referencedDeclaration":679,"src":"9798:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:3"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1246,"src":"9840:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1218,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:3"},"scope":1538,"src":"9769:245:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"10201:854:3","statements":[{"assignments":[1255],"declarations":[{"constant":false,"id":1255,"mutability":"mutable","name":"result","nameLocation":"10219:6:3","nodeType":"VariableDeclaration","scope":1374,"src":"10211:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1254,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1257,"initialValue":{"hexValue":"30","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:3"},{"id":1371,"nodeType":"UncheckedBlock","src":"10239:787:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10267:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1274,"nodeType":"IfStatement","src":"10263:103:3","trueBody":{"id":1273,"nodeType":"Block","src":"10286:80:3","statements":[{"expression":{"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10304:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1268,"nodeType":"ExpressionStatement","src":"10304:17:3"},{"expression":{"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1269,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10339:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1272,"nodeType":"ExpressionStatement","src":"10339:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10383:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1291,"nodeType":"IfStatement","src":"10379:103:3","trueBody":{"id":1290,"nodeType":"Block","src":"10402:80:3","statements":[{"expression":{"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1280,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10420:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1285,"nodeType":"ExpressionStatement","src":"10420:17:3"},{"expression":{"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10455:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1289,"nodeType":"ExpressionStatement","src":"10455:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10499:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1308,"nodeType":"IfStatement","src":"10495:103:3","trueBody":{"id":1307,"nodeType":"Block","src":"10518:80:3","statements":[{"expression":{"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1297,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10536:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1302,"nodeType":"ExpressionStatement","src":"10536:17:3"},{"expression":{"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1303,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10571:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1306,"nodeType":"ExpressionStatement","src":"10571:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10615:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1325,"nodeType":"IfStatement","src":"10611:100:3","trueBody":{"id":1324,"nodeType":"Block","src":"10633:78:3","statements":[{"expression":{"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10651:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1319,"nodeType":"ExpressionStatement","src":"10651:16:3"},{"expression":{"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1320,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10685:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1323,"nodeType":"ExpressionStatement","src":"10685:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10728:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1342,"nodeType":"IfStatement","src":"10724:100:3","trueBody":{"id":1341,"nodeType":"Block","src":"10746:78:3","statements":[{"expression":{"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10764:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1336,"nodeType":"ExpressionStatement","src":"10764:16:3"},{"expression":{"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10798:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1340,"nodeType":"ExpressionStatement","src":"10798:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10841:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1359,"nodeType":"IfStatement","src":"10837:100:3","trueBody":{"id":1358,"nodeType":"Block","src":"10859:78:3","statements":[{"expression":{"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10877:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1353,"nodeType":"ExpressionStatement","src":"10877:16:3"},{"expression":{"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10911:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1357,"nodeType":"ExpressionStatement","src":"10911:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"10954:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1370,"nodeType":"IfStatement","src":"10950:66:3","trueBody":{"id":1369,"nodeType":"Block","src":"10972:44:3","statements":[{"expression":{"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1365,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10990:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1368,"nodeType":"ExpressionStatement","src":"10990:11:3"}]}}]},{"expression":{"id":1372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"11042:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1253,"id":1373,"nodeType":"Return","src":"11035:13:3"}]},"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"10020:114:3","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:3","nodeType":"FunctionDefinition","parameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"value","nameLocation":"10162:5:3","nodeType":"VariableDeclaration","scope":1375,"src":"10154:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:3"},"returnParameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"10192:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:3"},"scope":1538,"src":"10139:916:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1410,"nodeType":"Block","src":"11290:167:3","statements":[{"id":1409,"nodeType":"UncheckedBlock","src":"11300:151:3","statements":[{"assignments":[1387],"declarations":[{"constant":false,"id":1387,"mutability":"mutable","name":"result","nameLocation":"11332:6:3","nodeType":"VariableDeclaration","scope":1409,"src":"11324:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1391,"initialValue":{"arguments":[{"id":1389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"11347:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1388,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1375,1411],"referencedDeclaration":1375,"src":"11341:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1392,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"11374:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1393,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"11384:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1394,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"11396:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$679_$","typeString":"type(enum Math.Rounding)"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":677,"src":"11396:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"src":"11384:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1398,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"11417:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"11426:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:3","trueExpression":{"hexValue":"31","id":1403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1406,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1385,"id":1408,"nodeType":"Return","src":"11367:73:3"}]}]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"11061:143:3","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1411,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:3","nodeType":"FunctionDefinition","parameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"value","nameLocation":"11232:5:3","nodeType":"VariableDeclaration","scope":1411,"src":"11224:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1377,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:3","nodeType":"VariableDeclaration","scope":1411,"src":"11239:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"typeName":{"id":1380,"nodeType":"UserDefinedTypeName","pathNode":{"id":1379,"name":"Rounding","nameLocations":["11239:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":679,"src":"11239:8:3"},"referencedDeclaration":679,"src":"11239:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:3"},"returnParameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1411,"src":"11281:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:3"},"scope":1538,"src":"11209:248:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1497,"nodeType":"Block","src":"11771:600:3","statements":[{"assignments":[1420],"declarations":[{"constant":false,"id":1420,"mutability":"mutable","name":"result","nameLocation":"11789:6:3","nodeType":"VariableDeclaration","scope":1497,"src":"11781:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1422,"initialValue":{"hexValue":"30","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:3"},{"id":1494,"nodeType":"UncheckedBlock","src":"11809:533:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"11837:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1437,"nodeType":"IfStatement","src":"11833:98:3","trueBody":{"id":1436,"nodeType":"Block","src":"11855:76:3","statements":[{"expression":{"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"11873:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1431,"nodeType":"ExpressionStatement","src":"11873:13:3"},{"expression":{"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1432,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"11904:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1435,"nodeType":"ExpressionStatement","src":"11904:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"11948:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1452,"nodeType":"IfStatement","src":"11944:95:3","trueBody":{"id":1451,"nodeType":"Block","src":"11965:74:3","statements":[{"expression":{"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1443,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"11983:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1446,"nodeType":"ExpressionStatement","src":"11983:12:3"},{"expression":{"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"12013:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1450,"nodeType":"ExpressionStatement","src":"12013:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"12056:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1467,"nodeType":"IfStatement","src":"12052:95:3","trueBody":{"id":1466,"nodeType":"Block","src":"12073:74:3","statements":[{"expression":{"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"12091:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1461,"nodeType":"ExpressionStatement","src":"12091:12:3"},{"expression":{"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1462,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"12121:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1465,"nodeType":"ExpressionStatement","src":"12121:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1468,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"12164:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1482,"nodeType":"IfStatement","src":"12160:95:3","trueBody":{"id":1481,"nodeType":"Block","src":"12181:74:3","statements":[{"expression":{"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"12199:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1476,"nodeType":"ExpressionStatement","src":"12199:12:3"},{"expression":{"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"12229:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1480,"nodeType":"ExpressionStatement","src":"12229:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"12272:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1493,"nodeType":"IfStatement","src":"12268:64:3","trueBody":{"id":1492,"nodeType":"Block","src":"12288:44:3","statements":[{"expression":{"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1488,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"12306:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1491,"nodeType":"ExpressionStatement","src":"12306:11:3"}]}}]},{"expression":{"id":1495,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"12358:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1418,"id":1496,"nodeType":"Return","src":"12351:13:3"}]},"documentation":{"id":1412,"nodeType":"StructuredDocumentation","src":"11463:240:3","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1498,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:3","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"value","nameLocation":"11732:5:3","nodeType":"VariableDeclaration","scope":1498,"src":"11724:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:3"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1498,"src":"11762:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:3"},"scope":1538,"src":"11708:663:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1536,"nodeType":"Block","src":"12608:174:3","statements":[{"id":1535,"nodeType":"UncheckedBlock","src":"12618:158:3","statements":[{"assignments":[1510],"declarations":[{"constant":false,"id":1510,"mutability":"mutable","name":"result","nameLocation":"12650:6:3","nodeType":"VariableDeclaration","scope":1535,"src":"12642:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1509,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1514,"initialValue":{"arguments":[{"id":1512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"12666:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1511,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1498,1537],"referencedDeclaration":1498,"src":"12659:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"12693:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1516,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"12703:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1517,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"12715:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$679_$","typeString":"type(enum Math.Rounding)"}},"id":1518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":677,"src":"12715:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"src":"12703:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"12736:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1524,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"12751:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:3","trueExpression":{"hexValue":"31","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1532,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1508,"id":1534,"nodeType":"Return","src":"12686:79:3"}]}]},"documentation":{"id":1499,"nodeType":"StructuredDocumentation","src":"12377:144:3","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1537,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:3","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"value","nameLocation":"12550:5:3","nodeType":"VariableDeclaration","scope":1537,"src":"12542:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1504,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:3","nodeType":"VariableDeclaration","scope":1537,"src":"12557:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"},"typeName":{"id":1503,"nodeType":"UserDefinedTypeName","pathNode":{"id":1502,"name":"Rounding","nameLocations":["12557:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":679,"src":"12557:8:3"},"referencedDeclaration":679,"src":"12557:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$679","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:3"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1537,"src":"12599:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1506,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:3"},"scope":1538,"src":"12526:256:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1539,"src":"202:12582:3","usedErrors":[]}],"src":"103:12682:3"},"id":3},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[1850]},"id":1851,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1540,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1541,"nodeType":"StructuredDocumentation","src":"285:196:4","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":1850,"linearizedBaseContracts":[1850],"name":"SafeMath","nameLocation":"490:8:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1572,"nodeType":"Block","src":"717:140:4","statements":[{"id":1571,"nodeType":"UncheckedBlock","src":"727:124:4","statements":[{"assignments":[1554],"declarations":[{"constant":false,"id":1554,"mutability":"mutable","name":"c","nameLocation":"759:1:4","nodeType":"VariableDeclaration","scope":1571,"src":"751:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1558,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"763:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1556,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"767:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1559,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"786:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1560,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"790:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1566,"nodeType":"IfStatement","src":"782:28:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1552,"id":1565,"nodeType":"Return","src":"793:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1568,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"838:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1569,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1552,"id":1570,"nodeType":"Return","src":"824:16:4"}]}]},"documentation":{"id":1542,"nodeType":"StructuredDocumentation","src":"505:131:4","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1573,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:4","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1544,"mutability":"mutable","name":"a","nameLocation":"665:1:4","nodeType":"VariableDeclaration","scope":1573,"src":"657:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1543,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1546,"mutability":"mutable","name":"b","nameLocation":"676:1:4","nodeType":"VariableDeclaration","scope":1573,"src":"668:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:4"},"returnParameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1573,"src":"702:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1548,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1573,"src":"708:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1550,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:4"},"scope":1850,"src":"641:216:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1600,"nodeType":"Block","src":"1078:113:4","statements":[{"id":1599,"nodeType":"UncheckedBlock","src":"1088:97:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1585,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"1116:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1586,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"1120:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1592,"nodeType":"IfStatement","src":"1112:28:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1590,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1584,"id":1591,"nodeType":"Return","src":"1123:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"1168:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1595,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"1172:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1584,"id":1598,"nodeType":"Return","src":"1154:20:4"}]}]},"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"863:134:4","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1601,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:4","nodeType":"FunctionDefinition","parameters":{"id":1579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1576,"mutability":"mutable","name":"a","nameLocation":"1026:1:4","nodeType":"VariableDeclaration","scope":1601,"src":"1018:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1578,"mutability":"mutable","name":"b","nameLocation":"1037:1:4","nodeType":"VariableDeclaration","scope":1601,"src":"1029:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1577,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:4"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"1063:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1580,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"1069:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:4"},"scope":1850,"src":"1002:189:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1642,"nodeType":"Block","src":"1415:417:4","statements":[{"id":1641,"nodeType":"UncheckedBlock","src":"1425:401:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1613,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"1683:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1620,"nodeType":"IfStatement","src":"1679:28:4","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1612,"id":1619,"nodeType":"Return","src":"1691:16:4"}},{"assignments":[1622],"declarations":[{"constant":false,"id":1622,"mutability":"mutable","name":"c","nameLocation":"1729:1:4","nodeType":"VariableDeclaration","scope":1641,"src":"1721:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1626,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"1733:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1624,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"1737:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1627,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"1756:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1628,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"1760:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1630,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"1765:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1636,"nodeType":"IfStatement","src":"1752:33:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1634,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1612,"id":1635,"nodeType":"Return","src":"1768:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1638,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"1813:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1639,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1612,"id":1640,"nodeType":"Return","src":"1799:16:4"}]}]},"documentation":{"id":1602,"nodeType":"StructuredDocumentation","src":"1197:137:4","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1643,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:4","nodeType":"FunctionDefinition","parameters":{"id":1607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"a","nameLocation":"1363:1:4","nodeType":"VariableDeclaration","scope":1643,"src":"1355:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1606,"mutability":"mutable","name":"b","nameLocation":"1374:1:4","nodeType":"VariableDeclaration","scope":1643,"src":"1366:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:4"},"returnParameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"1400:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1608,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"1406:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1610,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:4"},"scope":1850,"src":"1339:493:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1670,"nodeType":"Block","src":"2057:114:4","statements":[{"id":1669,"nodeType":"UncheckedBlock","src":"2067:98:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1655,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"2095:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1662,"nodeType":"IfStatement","src":"2091:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1660,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1654,"id":1661,"nodeType":"Return","src":"2103:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1664,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"2148:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1665,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"2152:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1667,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1654,"id":1668,"nodeType":"Return","src":"2134:20:4"}]}]},"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"1838:138:4","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1671,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:4","nodeType":"FunctionDefinition","parameters":{"id":1649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"mutability":"mutable","name":"a","nameLocation":"2005:1:4","nodeType":"VariableDeclaration","scope":1671,"src":"1997:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"b","nameLocation":"2016:1:4","nodeType":"VariableDeclaration","scope":1671,"src":"2008:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1647,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:4"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1671,"src":"2042:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1650,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1671,"src":"2048:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:4"},"scope":1850,"src":"1981:190:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1698,"nodeType":"Block","src":"2406:114:4","statements":[{"id":1697,"nodeType":"UncheckedBlock","src":"2416:98:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1683,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"2444:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1690,"nodeType":"IfStatement","src":"2440:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1688,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1682,"id":1689,"nodeType":"Return","src":"2452:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1692,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"2497:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1693,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"2501:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1695,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1682,"id":1696,"nodeType":"Return","src":"2483:20:4"}]}]},"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"2177:148:4","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1699,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:4","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"mutability":"mutable","name":"a","nameLocation":"2354:1:4","nodeType":"VariableDeclaration","scope":1699,"src":"2346:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1673,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"b","nameLocation":"2365:1:4","nodeType":"VariableDeclaration","scope":1699,"src":"2357:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1675,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:4"},"returnParameters":{"id":1682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1699,"src":"2391:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1678,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1699,"src":"2397:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1680,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:4"},"scope":1850,"src":"2330:190:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1713,"nodeType":"Block","src":"2822:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1709,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"2839:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1710,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"2843:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1708,"id":1712,"nodeType":"Return","src":"2832:12:4"}]},"documentation":{"id":1700,"nodeType":"StructuredDocumentation","src":"2526:224:4","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:4","nodeType":"FunctionDefinition","parameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"mutability":"mutable","name":"a","nameLocation":"2776:1:4","nodeType":"VariableDeclaration","scope":1714,"src":"2768:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1701,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1704,"mutability":"mutable","name":"b","nameLocation":"2787:1:4","nodeType":"VariableDeclaration","scope":1714,"src":"2779:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:4"},"returnParameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"2813:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:4"},"scope":1850,"src":"2755:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1728,"nodeType":"Block","src":"3189:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1724,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"3206:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1725,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"3210:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1723,"id":1727,"nodeType":"Return","src":"3199:12:4"}]},"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"2857:260:4","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1729,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:4","nodeType":"FunctionDefinition","parameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"a","nameLocation":"3143:1:4","nodeType":"VariableDeclaration","scope":1729,"src":"3135:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"b","nameLocation":"3154:1:4","nodeType":"VariableDeclaration","scope":1729,"src":"3146:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:4"},"returnParameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1729,"src":"3180:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:4"},"scope":1850,"src":"3122:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1743,"nodeType":"Block","src":"3532:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1739,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"3549:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1740,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"3553:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1738,"id":1742,"nodeType":"Return","src":"3542:12:4"}]},"documentation":{"id":1730,"nodeType":"StructuredDocumentation","src":"3224:236:4","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":1744,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:4","nodeType":"FunctionDefinition","parameters":{"id":1735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"a","nameLocation":"3486:1:4","nodeType":"VariableDeclaration","scope":1744,"src":"3478:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1734,"mutability":"mutable","name":"b","nameLocation":"3497:1:4","nodeType":"VariableDeclaration","scope":1744,"src":"3489:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1733,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:4"},"returnParameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1744,"src":"3523:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1736,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:4"},"scope":1850,"src":"3465:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1758,"nodeType":"Block","src":"3917:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1754,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"3934:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1755,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"3938:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1753,"id":1757,"nodeType":"Return","src":"3927:12:4"}]},"documentation":{"id":1745,"nodeType":"StructuredDocumentation","src":"3567:278:4","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":1759,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:4","nodeType":"FunctionDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"a","nameLocation":"3871:1:4","nodeType":"VariableDeclaration","scope":1759,"src":"3863:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1749,"mutability":"mutable","name":"b","nameLocation":"3882:1:4","nodeType":"VariableDeclaration","scope":1759,"src":"3874:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:4"},"returnParameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1759,"src":"3908:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:4"},"scope":1850,"src":"3850:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1773,"nodeType":"Block","src":"4466:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1769,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"4483:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1770,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"4487:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1768,"id":1772,"nodeType":"Return","src":"4476:12:4"}]},"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"3952:442:4","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1774,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:4","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"a","nameLocation":"4420:1:4","nodeType":"VariableDeclaration","scope":1774,"src":"4412:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"b","nameLocation":"4431:1:4","nodeType":"VariableDeclaration","scope":1774,"src":"4423:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1763,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:4"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1774,"src":"4457:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:4"},"scope":1850,"src":"4399:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1798,"nodeType":"Block","src":"5054:106:4","statements":[{"id":1797,"nodeType":"UncheckedBlock","src":"5064:90:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1787,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"5096:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1788,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"5101:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5096:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1790,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"5104:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1786,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5088:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5088:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1792,"nodeType":"ExpressionStatement","src":"5088:29:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1793,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"5138:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1794,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"5142:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5138:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1785,"id":1796,"nodeType":"Return","src":"5131:12:4"}]}]},"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"4501:453:4","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1799,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:4","nodeType":"FunctionDefinition","parameters":{"id":1782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"a","nameLocation":"4980:1:4","nodeType":"VariableDeclaration","scope":1799,"src":"4972:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1776,"name":"uint256","nodeType":"ElementaryTypeName","src":"4972:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"b","nameLocation":"4991:1:4","nodeType":"VariableDeclaration","scope":1799,"src":"4983:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"4983:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"errorMessage","nameLocation":"5008:12:4","nodeType":"VariableDeclaration","scope":1799,"src":"4994:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1780,"name":"string","nodeType":"ElementaryTypeName","src":"4994:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:50:4"},"returnParameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1799,"src":"5045:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1783,"name":"uint256","nodeType":"ElementaryTypeName","src":"5045:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5044:9:4"},"scope":1850,"src":"4959:201:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1823,"nodeType":"Block","src":"5739:105:4","statements":[{"id":1822,"nodeType":"UncheckedBlock","src":"5749:89:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1812,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"5781:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5785:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5781:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1815,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"5788:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1811,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5773:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5773:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1817,"nodeType":"ExpressionStatement","src":"5773:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1818,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"5822:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1819,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"5826:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5822:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1810,"id":1821,"nodeType":"Return","src":"5815:12:4"}]}]},"documentation":{"id":1800,"nodeType":"StructuredDocumentation","src":"5166:473:4","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1824,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5653:3:4","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"a","nameLocation":"5665:1:4","nodeType":"VariableDeclaration","scope":1824,"src":"5657:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"5657:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"b","nameLocation":"5676:1:4","nodeType":"VariableDeclaration","scope":1824,"src":"5668:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint256","nodeType":"ElementaryTypeName","src":"5668:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1806,"mutability":"mutable","name":"errorMessage","nameLocation":"5693:12:4","nodeType":"VariableDeclaration","scope":1824,"src":"5679:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1805,"name":"string","nodeType":"ElementaryTypeName","src":"5679:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5656:50:4"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1824,"src":"5730:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"5730:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5729:9:4"},"scope":1850,"src":"5644:200:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1848,"nodeType":"Block","src":"6585:105:4","statements":[{"id":1847,"nodeType":"UncheckedBlock","src":"6595:89:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1837,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"6627:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6627:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1840,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"6634:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1836,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6619:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6619:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1842,"nodeType":"ExpressionStatement","src":"6619:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1843,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6668:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1844,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"6672:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6668:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1835,"id":1846,"nodeType":"Return","src":"6661:12:4"}]}]},"documentation":{"id":1825,"nodeType":"StructuredDocumentation","src":"5850:635:4","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1849,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6499:3:4","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"a","nameLocation":"6511:1:4","nodeType":"VariableDeclaration","scope":1849,"src":"6503:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1826,"name":"uint256","nodeType":"ElementaryTypeName","src":"6503:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1829,"mutability":"mutable","name":"b","nameLocation":"6522:1:4","nodeType":"VariableDeclaration","scope":1849,"src":"6514:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1828,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"errorMessage","nameLocation":"6539:12:4","nodeType":"VariableDeclaration","scope":1849,"src":"6525:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1830,"name":"string","nodeType":"ElementaryTypeName","src":"6525:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6502:50:4"},"returnParameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1849,"src":"6576:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1833,"name":"uint256","nodeType":"ElementaryTypeName","src":"6576:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6575:9:4"},"scope":1850,"src":"6490:200:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1851,"src":"482:6210:4","usedErrors":[]}],"src":"107:6586:4"},"id":4},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1955]},"id":1956,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1852,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1853,"nodeType":"StructuredDocumentation","src":"134:80:5","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1955,"linearizedBaseContracts":[1955],"name":"SignedMath","nameLocation":"223:10:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1870,"nodeType":"Block","src":"375:37:5","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1863,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"392:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1864,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"396:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1867,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"404:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:5","trueExpression":{"id":1866,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"400:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1862,"id":1869,"nodeType":"Return","src":"385:20:5"}]},"documentation":{"id":1854,"nodeType":"StructuredDocumentation","src":"240:66:5","text":" @dev Returns the largest of two signed numbers."},"id":1871,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:5","nodeType":"FunctionDefinition","parameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"a","nameLocation":"331:1:5","nodeType":"VariableDeclaration","scope":1871,"src":"324:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1855,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1858,"mutability":"mutable","name":"b","nameLocation":"341:1:5","nodeType":"VariableDeclaration","scope":1871,"src":"334:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1857,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:5"},"returnParameters":{"id":1862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1871,"src":"367:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1860,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:5"},"scope":1955,"src":"311:101:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1888,"nodeType":"Block","src":"554:37:5","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1881,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"571:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1882,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"575:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1885,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"583:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:5","trueExpression":{"id":1884,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"579:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1880,"id":1887,"nodeType":"Return","src":"564:20:5"}]},"documentation":{"id":1872,"nodeType":"StructuredDocumentation","src":"418:67:5","text":" @dev Returns the smallest of two signed numbers."},"id":1889,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:5","nodeType":"FunctionDefinition","parameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"a","nameLocation":"510:1:5","nodeType":"VariableDeclaration","scope":1889,"src":"503:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1873,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"b","nameLocation":"520:1:5","nodeType":"VariableDeclaration","scope":1889,"src":"513:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1875,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:5"},"returnParameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1889,"src":"546:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1878,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:5"},"scope":1955,"src":"490:101:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1932,"nodeType":"Block","src":"796:162:5","statements":[{"assignments":[1900],"declarations":[{"constant":false,"id":1900,"mutability":"mutable","name":"x","nameLocation":"865:1:5","nodeType":"VariableDeclaration","scope":1932,"src":"858:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1899,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1913,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1901,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"870:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1902,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"874:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1904,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1905,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"881:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1906,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"885:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:5"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1914,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"910:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1919,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"930:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1917,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:5","typeDescriptions":{}}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:5","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1915,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:5","typeDescriptions":{}}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1924,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"944:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1925,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"948:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1927,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1929,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1898,"id":1931,"nodeType":"Return","src":"903:48:5"}]},"documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"597:126:5","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:5","nodeType":"FunctionDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"a","nameLocation":"752:1:5","nodeType":"VariableDeclaration","scope":1933,"src":"745:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1891,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1894,"mutability":"mutable","name":"b","nameLocation":"762:1:5","nodeType":"VariableDeclaration","scope":1933,"src":"755:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1893,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:5"},"returnParameters":{"id":1898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"788:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1896,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:5"},"scope":1955,"src":"728:230:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1953,"nodeType":"Block","src":"1102:158:5","statements":[{"id":1952,"nodeType":"UncheckedBlock","src":"1112:142:5","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1943,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"1227:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:5","subExpression":{"id":1947,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"1241:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:5","trueExpression":{"id":1946,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"1236:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:5","typeDescriptions":{}}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1940,"id":1951,"nodeType":"Return","src":"1212:31:5"}]}]},"documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"964:78:5","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1954,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:5","nodeType":"FunctionDefinition","parameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1936,"mutability":"mutable","name":"n","nameLocation":"1067:1:5","nodeType":"VariableDeclaration","scope":1954,"src":"1060:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1935,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:5"},"returnParameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1954,"src":"1093:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:5"},"scope":1955,"src":"1047:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1956,"src":"215:1047:5","usedErrors":[]}],"src":"109:1154:5"},"id":5},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","exportedSymbols":{"IUniswapV3SwapCallback":[1969]},"id":1970,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1957,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3SwapCallback","contractDependencies":[],"contractKind":"interface","documentation":{"id":1958,"nodeType":"StructuredDocumentation","src":"71:144:6","text":"@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"},"fullyImplemented":false,"id":1969,"linearizedBaseContracts":[1969],"name":"IUniswapV3SwapCallback","nameLocation":"225:22:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"254:898:6","text":"@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"},"functionSelector":"fa461e33","id":1968,"implemented":false,"kind":"function","modifiers":[],"name":"uniswapV3SwapCallback","nameLocation":"1166:21:6","nodeType":"FunctionDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"amount0Delta","nameLocation":"1204:12:6","nodeType":"VariableDeclaration","scope":1968,"src":"1197:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1960,"name":"int256","nodeType":"ElementaryTypeName","src":"1197:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"amount1Delta","nameLocation":"1233:12:6","nodeType":"VariableDeclaration","scope":1968,"src":"1226:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1962,"name":"int256","nodeType":"ElementaryTypeName","src":"1226:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"data","nameLocation":"1270:4:6","nodeType":"VariableDeclaration","scope":1968,"src":"1255:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1964,"name":"bytes","nodeType":"ElementaryTypeName","src":"1255:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1187:93:6"},"returnParameters":{"id":1967,"nodeType":"ParameterList","parameters":[],"src":"1289:0:6"},"scope":1969,"src":"1157:133:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1970,"src":"215:1077:6","usedErrors":[]}],"src":"45:1248:6"},"id":6},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","exportedSymbols":{"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969]},"id":2070,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1971,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:7"},{"id":1972,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:7"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","file":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","id":1973,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2070,"sourceUnit":1970,"src":"91:83:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1975,"name":"IUniswapV3SwapCallback","nameLocations":["305:22:7"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"305:22:7"},"id":1976,"nodeType":"InheritanceSpecifier","src":"305:22:7"}],"canonicalName":"ISwapRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"176:104:7","text":"@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"},"fullyImplemented":false,"id":2069,"linearizedBaseContracts":[2069,1969],"name":"ISwapRouter","nameLocation":"290:11:7","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ISwapRouter.ExactInputSingleParams","id":1993,"members":[{"constant":false,"id":1978,"mutability":"mutable","name":"tokenIn","nameLocation":"382:7:7","nodeType":"VariableDeclaration","scope":1993,"src":"374:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"374:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1980,"mutability":"mutable","name":"tokenOut","nameLocation":"407:8:7","nodeType":"VariableDeclaration","scope":1993,"src":"399:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1982,"mutability":"mutable","name":"fee","nameLocation":"432:3:7","nodeType":"VariableDeclaration","scope":1993,"src":"425:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1981,"name":"uint24","nodeType":"ElementaryTypeName","src":"425:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1984,"mutability":"mutable","name":"recipient","nameLocation":"453:9:7","nodeType":"VariableDeclaration","scope":1993,"src":"445:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1983,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1986,"mutability":"mutable","name":"deadline","nameLocation":"480:8:7","nodeType":"VariableDeclaration","scope":1993,"src":"472:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1985,"name":"uint256","nodeType":"ElementaryTypeName","src":"472:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1988,"mutability":"mutable","name":"amountIn","nameLocation":"506:8:7","nodeType":"VariableDeclaration","scope":1993,"src":"498:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1987,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1990,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"532:16:7","nodeType":"VariableDeclaration","scope":1993,"src":"524:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"524:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1992,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"566:17:7","nodeType":"VariableDeclaration","scope":1993,"src":"558:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1991,"name":"uint160","nodeType":"ElementaryTypeName","src":"558:7:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nameLocation":"341:22:7","nodeType":"StructDefinition","scope":2069,"src":"334:256:7","visibility":"public"},{"documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"596:250:7","text":"@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"414bf389","id":2002,"implemented":false,"kind":"function","modifiers":[],"name":"exactInputSingle","nameLocation":"860:16:7","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"params","nameLocation":"909:6:7","nodeType":"VariableDeclaration","scope":2002,"src":"877:38:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1993_calldata_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":1996,"nodeType":"UserDefinedTypeName","pathNode":{"id":1995,"name":"ExactInputSingleParams","nameLocations":["877:22:7"],"nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"877:22:7"},"referencedDeclaration":1993,"src":"877:22:7","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1993_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"src":"876:40:7"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"amountOut","nameLocation":"951:9:7","nodeType":"VariableDeclaration","scope":2002,"src":"943:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1999,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:19:7"},"scope":2069,"src":"851:111:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactInputParams","id":2013,"members":[{"constant":false,"id":2004,"mutability":"mutable","name":"path","nameLocation":"1008:4:7","nodeType":"VariableDeclaration","scope":2013,"src":"1002:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2003,"name":"bytes","nodeType":"ElementaryTypeName","src":"1002:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"recipient","nameLocation":"1030:9:7","nodeType":"VariableDeclaration","scope":2013,"src":"1022:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"1022:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2008,"mutability":"mutable","name":"deadline","nameLocation":"1057:8:7","nodeType":"VariableDeclaration","scope":2013,"src":"1049:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"amountIn","nameLocation":"1083:8:7","nodeType":"VariableDeclaration","scope":2013,"src":"1075:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2012,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"1109:16:7","nodeType":"VariableDeclaration","scope":2013,"src":"1101:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2011,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactInputParams","nameLocation":"975:16:7","nodeType":"StructDefinition","scope":2069,"src":"968:164:7","visibility":"public"},{"documentation":{"id":2014,"nodeType":"StructuredDocumentation","src":"1138:273:7","text":"@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"c04b8d59","id":2022,"implemented":false,"kind":"function","modifiers":[],"name":"exactInput","nameLocation":"1425:10:7","nodeType":"FunctionDefinition","parameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"params","nameLocation":"1462:6:7","nodeType":"VariableDeclaration","scope":2022,"src":"1436:32:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$2013_calldata_ptr","typeString":"struct ISwapRouter.ExactInputParams"},"typeName":{"id":2016,"nodeType":"UserDefinedTypeName","pathNode":{"id":2015,"name":"ExactInputParams","nameLocations":["1436:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":2013,"src":"1436:16:7"},"referencedDeclaration":2013,"src":"1436:16:7","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$2013_storage_ptr","typeString":"struct ISwapRouter.ExactInputParams"}},"visibility":"internal"}],"src":"1435:34:7"},"returnParameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"amountOut","nameLocation":"1504:9:7","nodeType":"VariableDeclaration","scope":2022,"src":"1496:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:19:7"},"scope":2069,"src":"1416:99:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputSingleParams","id":2039,"members":[{"constant":false,"id":2024,"mutability":"mutable","name":"tokenIn","nameLocation":"1570:7:7","nodeType":"VariableDeclaration","scope":2039,"src":"1562:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2023,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"tokenOut","nameLocation":"1595:8:7","nodeType":"VariableDeclaration","scope":2039,"src":"1587:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"1587:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"fee","nameLocation":"1620:3:7","nodeType":"VariableDeclaration","scope":2039,"src":"1613:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2027,"name":"uint24","nodeType":"ElementaryTypeName","src":"1613:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"recipient","nameLocation":"1641:9:7","nodeType":"VariableDeclaration","scope":2039,"src":"1633:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"deadline","nameLocation":"1668:8:7","nodeType":"VariableDeclaration","scope":2039,"src":"1660:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"1660:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2034,"mutability":"mutable","name":"amountOut","nameLocation":"1694:9:7","nodeType":"VariableDeclaration","scope":2039,"src":"1686:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2036,"mutability":"mutable","name":"amountInMaximum","nameLocation":"1721:15:7","nodeType":"VariableDeclaration","scope":2039,"src":"1713:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2035,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"1754:17:7","nodeType":"VariableDeclaration","scope":2039,"src":"1746:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2037,"name":"uint160","nodeType":"ElementaryTypeName","src":"1746:7:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactOutputSingleParams","nameLocation":"1528:23:7","nodeType":"StructDefinition","scope":2069,"src":"1521:257:7","visibility":"public"},{"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"1784:250:7","text":"@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"db3e2198","id":2048,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutputSingle","nameLocation":"2048:17:7","nodeType":"FunctionDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"params","nameLocation":"2099:6:7","nodeType":"VariableDeclaration","scope":2048,"src":"2066:39:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$2039_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"},"typeName":{"id":2042,"nodeType":"UserDefinedTypeName","pathNode":{"id":2041,"name":"ExactOutputSingleParams","nameLocations":["2066:23:7"],"nodeType":"IdentifierPath","referencedDeclaration":2039,"src":"2066:23:7"},"referencedDeclaration":2039,"src":"2066:23:7","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$2039_storage_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"}},"visibility":"internal"}],"src":"2065:41:7"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"amountIn","nameLocation":"2141:8:7","nodeType":"VariableDeclaration","scope":2048,"src":"2133:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2045,"name":"uint256","nodeType":"ElementaryTypeName","src":"2133:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2132:18:7"},"scope":2069,"src":"2039:112:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputParams","id":2059,"members":[{"constant":false,"id":2050,"mutability":"mutable","name":"path","nameLocation":"2198:4:7","nodeType":"VariableDeclaration","scope":2059,"src":"2192:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2049,"name":"bytes","nodeType":"ElementaryTypeName","src":"2192:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2052,"mutability":"mutable","name":"recipient","nameLocation":"2220:9:7","nodeType":"VariableDeclaration","scope":2059,"src":"2212:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2051,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"deadline","nameLocation":"2247:8:7","nodeType":"VariableDeclaration","scope":2059,"src":"2239:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2053,"name":"uint256","nodeType":"ElementaryTypeName","src":"2239:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"amountOut","nameLocation":"2273:9:7","nodeType":"VariableDeclaration","scope":2059,"src":"2265:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2058,"mutability":"mutable","name":"amountInMaximum","nameLocation":"2300:15:7","nodeType":"VariableDeclaration","scope":2059,"src":"2292:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactOutputParams","nameLocation":"2164:17:7","nodeType":"StructDefinition","scope":2069,"src":"2157:165:7","visibility":"public"},{"documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"2328:284:7","text":"@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"f28c0498","id":2068,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutput","nameLocation":"2626:11:7","nodeType":"FunctionDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"params","nameLocation":"2665:6:7","nodeType":"VariableDeclaration","scope":2068,"src":"2638:33:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$2059_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputParams"},"typeName":{"id":2062,"nodeType":"UserDefinedTypeName","pathNode":{"id":2061,"name":"ExactOutputParams","nameLocations":["2638:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":2059,"src":"2638:17:7"},"referencedDeclaration":2059,"src":"2638:17:7","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$2059_storage_ptr","typeString":"struct ISwapRouter.ExactOutputParams"}},"visibility":"internal"}],"src":"2637:35:7"},"returnParameters":{"id":2067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"mutability":"mutable","name":"amountIn","nameLocation":"2707:8:7","nodeType":"VariableDeclaration","scope":2068,"src":"2699:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2698:18:7"},"scope":2069,"src":"2617:100:7","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2070,"src":"280:2439:7","usedErrors":[]}],"src":"45:2675:7"},"id":7},"contracts/features/MecenateFeed.sol":{"ast":{"absolutePath":"contracts/features/MecenateFeed.sol","exportedSymbols":{"Acceptance":[2754],"BurnDAI":[2982],"BurnMUSE":[3068],"Creation":[3260],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"Finalization":[4275],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"MecenateFeed":[2120],"Message":[4577],"Renounce":[4728],"SafeMath":[1850],"SignedMath":[1955],"Staking":[5485],"Strings":[306],"Structures":[2547],"Submission":[5739],"TokenManager":[6228]},"id":2121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2071,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"549:23:8"},{"absolutePath":"contracts/modules/Events.sol","file":"../modules/Events.sol","id":2072,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":3974,"src":"576:31:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Creation.sol","file":"../modules/Creation.sol","id":2073,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":3261,"src":"609:33:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Acceptance.sol","file":"../modules/Acceptance.sol","id":2074,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":2755,"src":"644:35:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Submission.sol","file":"../modules/Submission.sol","id":2075,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":5740,"src":"681:35:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Finalization.sol","file":"../modules/Finalization.sol","id":2076,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":4276,"src":"718:37:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Renounce.sol","file":"../modules/Renounce.sol","id":2077,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":4729,"src":"757:33:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Message.sol","file":"../modules/Message.sol","id":2078,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2121,"sourceUnit":4578,"src":"792:32:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2079,"name":"Events","nameLocations":["858:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":3973,"src":"858:6:8"},"id":2080,"nodeType":"InheritanceSpecifier","src":"858:6:8"},{"baseName":{"id":2081,"name":"Message","nameLocations":["871:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":4577,"src":"871:7:8"},"id":2082,"nodeType":"InheritanceSpecifier","src":"871:7:8"},{"baseName":{"id":2083,"name":"Creation","nameLocations":["885:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3260,"src":"885:8:8"},"id":2084,"nodeType":"InheritanceSpecifier","src":"885:8:8"},{"baseName":{"id":2085,"name":"Acceptance","nameLocations":["900:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2754,"src":"900:10:8"},"id":2086,"nodeType":"InheritanceSpecifier","src":"900:10:8"},{"baseName":{"id":2087,"name":"Renounce","nameLocations":["917:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":4728,"src":"917:8:8"},"id":2088,"nodeType":"InheritanceSpecifier","src":"917:8:8"},{"baseName":{"id":2089,"name":"Submission","nameLocations":["932:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":5739,"src":"932:10:8"},"id":2090,"nodeType":"InheritanceSpecifier","src":"932:10:8"},{"baseName":{"id":2091,"name":"Finalization","nameLocations":["949:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":4275,"src":"949:12:8"},"id":2092,"nodeType":"InheritanceSpecifier","src":"949:12:8"}],"canonicalName":"MecenateFeed","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2120,"linearizedBaseContracts":[2120,4275,5739,4728,2754,3260,5485,6228,2982,3068,3932,4577,3973,3740],"name":"MecenateFeed","nameLocation":"837:12:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":2118,"nodeType":"Block","src":"1370:33:8","statements":[{"expression":{"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2114,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"1381:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"1389:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1381:14:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2117,"nodeType":"ExpressionStatement","src":"1381:14:8"}]},"id":2119,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2107,"name":"_usersModuleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"1218:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2108,"name":"_verifierContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"1253:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2109,"name":"_vaultContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2100,"src":"1285:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2110,"name":"_factoryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"1314:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2111,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"1345:8:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":2112,"kind":"baseConstructorSpecifier","modifierName":{"id":2106,"name":"Data","nameLocations":["1199:4:8"],"nodeType":"IdentifierPath","referencedDeclaration":3740,"src":"1199:4:8"},"nodeType":"ModifierInvocation","src":"1199:165:8"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"_owner","nameLocation":"1000:6:8","nodeType":"VariableDeclaration","scope":2119,"src":"992:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"992:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"_usersModuleContract","nameLocation":"1025:20:8","nodeType":"VariableDeclaration","scope":2119,"src":"1017:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2095,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2098,"mutability":"mutable","name":"_verifierContract","nameLocation":"1064:17:8","nodeType":"VariableDeclaration","scope":2119,"src":"1056:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2097,"name":"address","nodeType":"ElementaryTypeName","src":"1056:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2100,"mutability":"mutable","name":"_vaultContract","nameLocation":"1100:14:8","nodeType":"VariableDeclaration","scope":2119,"src":"1092:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2099,"name":"address","nodeType":"ElementaryTypeName","src":"1092:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"_factoryContract","nameLocation":"1133:16:8","nodeType":"VariableDeclaration","scope":2119,"src":"1125:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2104,"mutability":"mutable","name":"_version","nameLocation":"1174:8:8","nodeType":"VariableDeclaration","scope":2119,"src":"1160:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2103,"name":"string","nodeType":"ElementaryTypeName","src":"1160:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"981:208:8"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[],"src":"1370:0:8"},"scope":2120,"src":"970:433:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":2121,"src":"828:578:8","usedErrors":[]}],"src":"549:859:8"},"id":8},"contracts/interfaces/IMUSE.sol":{"ast":{"absolutePath":"contracts/interfaces/IMUSE.sol","exportedSymbols":{"IERC20":[77],"IMUSE":[2158]},"id":2159,"nodeType":"SourceUnit","nodes":[{"id":2122,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2159,"sourceUnit":78,"src":"63:56:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2124,"name":"IERC20","nameLocations":["142:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":77,"src":"142:6:9"},"id":2125,"nodeType":"InheritanceSpecifier","src":"142:6:9"}],"canonicalName":"IMUSE","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2158,"linearizedBaseContracts":[2158,77],"name":"IMUSE","nameLocation":"133:5:9","nodeType":"ContractDefinition","nodes":[{"functionSelector":"39509351","id":2134,"implemented":false,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"165:17:9","nodeType":"FunctionDefinition","parameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"mutability":"mutable","name":"spender","nameLocation":"201:7:9","nodeType":"VariableDeclaration","scope":2134,"src":"193:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2126,"name":"address","nodeType":"ElementaryTypeName","src":"193:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2129,"mutability":"mutable","name":"addedValue","nameLocation":"227:10:9","nodeType":"VariableDeclaration","scope":2134,"src":"219:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2128,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"182:62:9"},"returnParameters":{"id":2133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2134,"src":"263:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2131,"name":"bool","nodeType":"ElementaryTypeName","src":"263:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"262:6:9"},"scope":2158,"src":"156:113:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a457c2d7","id":2143,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"286:17:9","nodeType":"FunctionDefinition","parameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"spender","nameLocation":"322:7:9","nodeType":"VariableDeclaration","scope":2143,"src":"314:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2135,"name":"address","nodeType":"ElementaryTypeName","src":"314:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"subtractedValue","nameLocation":"348:15:9","nodeType":"VariableDeclaration","scope":2143,"src":"340:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"303:67:9"},"returnParameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2143,"src":"389:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2140,"name":"bool","nodeType":"ElementaryTypeName","src":"389:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"388:6:9"},"scope":2158,"src":"277:118:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a0712d68","id":2150,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"412:4:9","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2145,"mutability":"mutable","name":"amount","nameLocation":"425:6:9","nodeType":"VariableDeclaration","scope":2150,"src":"417:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"417:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"416:16:9"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"451:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2147,"name":"bool","nodeType":"ElementaryTypeName","src":"451:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"450:6:9"},"scope":2158,"src":"403:54:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"42966c68","id":2157,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"474:4:9","nodeType":"FunctionDefinition","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"mutability":"mutable","name":"amount","nameLocation":"487:6:9","nodeType":"VariableDeclaration","scope":2157,"src":"479:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2151,"name":"uint256","nodeType":"ElementaryTypeName","src":"479:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"478:16:9"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2157,"src":"513:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2154,"name":"bool","nodeType":"ElementaryTypeName","src":"513:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"512:6:9"},"scope":2158,"src":"465:54:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2159,"src":"123:399:9","usedErrors":[]}],"src":"0:524:9"},"id":9},"contracts/interfaces/IMecenateFeed.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateFeed.sol","exportedSymbols":{"IMecenateFeed":[2223],"Structures":[2547]},"id":2224,"nodeType":"SourceUnit","nodes":[{"id":2160,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:10"},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":2161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2224,"sourceUnit":2548,"src":"27:35:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateFeed","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2223,"linearizedBaseContracts":[2223],"name":"IMecenateFeed","nameLocation":"76:13:10","nodeType":"ContractDefinition","nodes":[{"functionSelector":"0917e776","id":2166,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalStaked","nameLocation":"106:14:10","nodeType":"FunctionDefinition","parameters":{"id":2162,"nodeType":"ParameterList","parameters":[],"src":"120:2:10"},"returnParameters":{"id":2165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2166,"src":"146:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2163,"name":"uint256","nodeType":"ElementaryTypeName","src":"146:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"145:9:10"},"scope":2223,"src":"97:58:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"17906c2e","id":2171,"implemented":false,"kind":"function","modifiers":[],"name":"postCount","nameLocation":"172:9:10","nodeType":"FunctionDefinition","parameters":{"id":2167,"nodeType":"ParameterList","parameters":[],"src":"181:2:10"},"returnParameters":{"id":2170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2171,"src":"207:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"207:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"206:9:10"},"scope":2223,"src":"163:53:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"200f852c","id":2185,"implemented":false,"kind":"function","modifiers":[],"name":"acceptPost","nameLocation":"233:10:10","nodeType":"FunctionDefinition","parameters":{"id":2183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"267:20:10","nodeType":"VariableDeclaration","scope":2185,"src":"254:33:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2172,"name":"bytes","nodeType":"ElementaryTypeName","src":"254:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2175,"mutability":"mutable","name":"_to","nameLocation":"306:3:10","nodeType":"VariableDeclaration","scope":2185,"src":"298:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2174,"name":"address","nodeType":"ElementaryTypeName","src":"298:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2177,"mutability":"mutable","name":"_nonce","nameLocation":"328:6:10","nodeType":"VariableDeclaration","scope":2185,"src":"320:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2176,"name":"bytes32","nodeType":"ElementaryTypeName","src":"320:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2185,"src":"345:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":2179,"nodeType":"UserDefinedTypeName","pathNode":{"id":2178,"name":"Structures.Tokens","nameLocations":["345:10:10","356:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"345:17:10"},"referencedDeclaration":2377,"src":"345:17:10","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":2182,"mutability":"mutable","name":"_amount","nameLocation":"381:7:10","nodeType":"VariableDeclaration","scope":2185,"src":"373:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2181,"name":"uint256","nodeType":"ElementaryTypeName","src":"373:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"243:152:10"},"returnParameters":{"id":2184,"nodeType":"ParameterList","parameters":[],"src":"412:0:10"},"scope":2223,"src":"224:189:10","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"5c63ed69","id":2190,"implemented":false,"kind":"function","modifiers":[],"name":"getSellerStake","nameLocation":"430:14:10","nodeType":"FunctionDefinition","parameters":{"id":2186,"nodeType":"ParameterList","parameters":[],"src":"444:2:10"},"returnParameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2190,"src":"470:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"470:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"469:9:10"},"scope":2223,"src":"421:58:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4c38d877","id":2195,"implemented":false,"kind":"function","modifiers":[],"name":"getBuyerStake","nameLocation":"496:13:10","nodeType":"FunctionDefinition","parameters":{"id":2191,"nodeType":"ParameterList","parameters":[],"src":"509:2:10"},"returnParameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"535:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"535:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"534:9:10"},"scope":2223,"src":"487:57:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d24e0c87","id":2200,"implemented":false,"kind":"function","modifiers":[],"name":"getPaymentRequested","nameLocation":"561:19:10","nodeType":"FunctionDefinition","parameters":{"id":2196,"nodeType":"ParameterList","parameters":[],"src":"580:2:10"},"returnParameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2200,"src":"606:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"605:9:10"},"scope":2223,"src":"552:63:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"faeb5e17","id":2205,"implemented":false,"kind":"function","modifiers":[],"name":"getStakeRequested","nameLocation":"632:17:10","nodeType":"FunctionDefinition","parameters":{"id":2201,"nodeType":"ParameterList","parameters":[],"src":"649:2:10"},"returnParameters":{"id":2204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2203,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2205,"src":"675:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2202,"name":"uint256","nodeType":"ElementaryTypeName","src":"675:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"674:9:10"},"scope":2223,"src":"623:61:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4e69d560","id":2211,"implemented":false,"kind":"function","modifiers":[],"name":"getStatus","nameLocation":"701:9:10","nodeType":"FunctionDefinition","parameters":{"id":2206,"nodeType":"ParameterList","parameters":[],"src":"710:2:10"},"returnParameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"status","nameLocation":"758:6:10","nodeType":"VariableDeclaration","scope":2211,"src":"736:28:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":2208,"nodeType":"UserDefinedTypeName","pathNode":{"id":2207,"name":"Structures.PostStatus","nameLocations":["736:10:10","747:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"736:21:10"},"referencedDeclaration":2373,"src":"736:21:10","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"735:30:10"},"scope":2223,"src":"692:74:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"010a38f5","id":2217,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"783:10:10","nodeType":"FunctionDefinition","parameters":{"id":2212,"nodeType":"ParameterList","parameters":[],"src":"793:2:10"},"returnParameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"tokenId","nameLocation":"837:7:10","nodeType":"VariableDeclaration","scope":2217,"src":"819:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":2214,"nodeType":"UserDefinedTypeName","pathNode":{"id":2213,"name":"Structures.Tokens","nameLocations":["819:10:10","830:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"819:17:10"},"referencedDeclaration":2377,"src":"819:17:10","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"818:27:10"},"scope":2223,"src":"774:72:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8da5cb5b","id":2222,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"863:5:10","nodeType":"FunctionDefinition","parameters":{"id":2218,"nodeType":"ParameterList","parameters":[],"src":"868:2:10"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2222,"src":"894:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"894:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"893:9:10"},"scope":2223,"src":"854:49:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2224,"src":"66:840:10","usedErrors":[]}],"src":"0:908:10"},"id":10},"contracts/interfaces/IMecenateFeedFactory.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","exportedSymbols":{"IMecenateFeedFactory":[2291]},"id":2292,"nodeType":"SourceUnit","nodes":[{"id":2225,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateFeedFactory","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2291,"linearizedBaseContracts":[2291],"name":"IMecenateFeedFactory","nameLocation":"37:20:11","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":2230,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"74:5:11","nodeType":"FunctionDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[],"src":"79:2:11"},"returnParameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2230,"src":"105:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"105:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"104:17:11"},"scope":2291,"src":"65:57:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18da0011","id":2235,"implemented":false,"kind":"function","modifiers":[],"name":"treasuryContract","nameLocation":"139:16:11","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[],"src":"155:2:11"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2235,"src":"181:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2232,"name":"address","nodeType":"ElementaryTypeName","src":"181:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"180:17:11"},"scope":2291,"src":"130:68:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"67031bae","id":2240,"implemented":false,"kind":"function","modifiers":[],"name":"identityContract","nameLocation":"215:16:11","nodeType":"FunctionDefinition","parameters":{"id":2236,"nodeType":"ParameterList","parameters":[],"src":"231:2:11"},"returnParameters":{"id":2239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2240,"src":"257:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"256:9:11"},"scope":2291,"src":"206:60:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d63605b8","id":2246,"implemented":false,"kind":"function","modifiers":[],"name":"feeds","nameLocation":"283:5:11","nodeType":"FunctionDefinition","parameters":{"id":2241,"nodeType":"ParameterList","parameters":[],"src":"288:2:11"},"returnParameters":{"id":2245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2246,"src":"314:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2242,"name":"address","nodeType":"ElementaryTypeName","src":"314:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2243,"nodeType":"ArrayTypeName","src":"314:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"313:18:11"},"scope":2291,"src":"274:58:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"067bd3b4","id":2251,"implemented":false,"kind":"function","modifiers":[],"name":"contractCounter","nameLocation":"349:15:11","nodeType":"FunctionDefinition","parameters":{"id":2247,"nodeType":"ParameterList","parameters":[],"src":"364:2:11"},"returnParameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"390:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint256","nodeType":"ElementaryTypeName","src":"390:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"389:9:11"},"scope":2291,"src":"340:59:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e58fdd04","id":2258,"implemented":false,"kind":"function","modifiers":[],"name":"isFeed","nameLocation":"416:6:11","nodeType":"FunctionDefinition","parameters":{"id":2254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"mutability":"mutable","name":"_feed","nameLocation":"431:5:11","nodeType":"VariableDeclaration","scope":2258,"src":"423:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2252,"name":"address","nodeType":"ElementaryTypeName","src":"423:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"422:15:11"},"returnParameters":{"id":2257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2258,"src":"461:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2255,"name":"bool","nodeType":"ElementaryTypeName","src":"461:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"460:6:11"},"scope":2291,"src":"407:60:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f77800e5","id":2263,"implemented":false,"kind":"function","modifiers":[],"name":"museToken","nameLocation":"484:9:11","nodeType":"FunctionDefinition","parameters":{"id":2259,"nodeType":"ParameterList","parameters":[],"src":"493:2:11"},"returnParameters":{"id":2262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2263,"src":"519:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2260,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:9:11"},"scope":2291,"src":"475:53:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4b57b0be","id":2268,"implemented":false,"kind":"function","modifiers":[],"name":"wethToken","nameLocation":"545:9:11","nodeType":"FunctionDefinition","parameters":{"id":2264,"nodeType":"ParameterList","parameters":[],"src":"554:2:11"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2268,"src":"580:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2265,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"579:9:11"},"scope":2291,"src":"536:53:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"be22f546","id":2273,"implemented":false,"kind":"function","modifiers":[],"name":"daiToken","nameLocation":"606:8:11","nodeType":"FunctionDefinition","parameters":{"id":2269,"nodeType":"ParameterList","parameters":[],"src":"614:2:11"},"returnParameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2273,"src":"640:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2270,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:9:11"},"scope":2291,"src":"597:52:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f887ea40","id":2278,"implemented":false,"kind":"function","modifiers":[],"name":"router","nameLocation":"666:6:11","nodeType":"FunctionDefinition","parameters":{"id":2274,"nodeType":"ParameterList","parameters":[],"src":"672:2:11"},"returnParameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2278,"src":"698:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"698:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"697:9:11"},"scope":2291,"src":"657:50:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d223a564","id":2285,"implemented":false,"kind":"function","modifiers":[],"name":"getRouterFee","nameLocation":"724:12:11","nodeType":"FunctionDefinition","parameters":{"id":2281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"tokenId","nameLocation":"743:7:11","nodeType":"VariableDeclaration","scope":2285,"src":"737:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2279,"name":"uint8","nodeType":"ElementaryTypeName","src":"737:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"736:15:11"},"returnParameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2285,"src":"775:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"775:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"774:9:11"},"scope":2291,"src":"715:69:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5dc96d16","id":2290,"implemented":false,"kind":"function","modifiers":[],"name":"burnEnabled","nameLocation":"801:11:11","nodeType":"FunctionDefinition","parameters":{"id":2286,"nodeType":"ParameterList","parameters":[],"src":"812:2:11"},"returnParameters":{"id":2289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2290,"src":"838:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2287,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:11"},"scope":2291,"src":"792:52:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2292,"src":"27:820:11","usedErrors":[]}],"src":"0:849:11"},"id":11},"contracts/interfaces/IMecenateTreasury.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","exportedSymbols":{"IMecenateTreasury":[2304]},"id":2305,"nodeType":"SourceUnit","nodes":[{"id":2293,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateTreasury","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2304,"linearizedBaseContracts":[2304],"name":"IMecenateTreasury","nameLocation":"37:17:12","nodeType":"ContractDefinition","nodes":[{"functionSelector":"808fc206","id":2298,"implemented":false,"kind":"function","modifiers":[],"name":"globalFee","nameLocation":"71:9:12","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[],"src":"80:2:12"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2298,"src":"106:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"106:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"105:9:12"},"scope":2304,"src":"62:53:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"91792d5b","id":2303,"implemented":false,"kind":"function","modifiers":[],"name":"fixedFee","nameLocation":"132:8:12","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[],"src":"140:2:12"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2303,"src":"166:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2300,"name":"uint256","nodeType":"ElementaryTypeName","src":"166:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"165:9:12"},"scope":2304,"src":"123:52:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2305,"src":"27:151:12","usedErrors":[]}],"src":"0:180:12"},"id":12},"contracts/interfaces/IMecenateUsers.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","exportedSymbols":{"IMecenateUsers":[2342],"Structures":[2547]},"id":2343,"nodeType":"SourceUnit","nodes":[{"id":2306,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:13"},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":2307,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2343,"sourceUnit":2548,"src":"25:35:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateUsers","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2342,"linearizedBaseContracts":[2342],"name":"IMecenateUsers","nameLocation":"74:14:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"38aad32c","id":2314,"implemented":false,"kind":"function","modifiers":[],"name":"checkifUserExist","nameLocation":"105:16:13","nodeType":"FunctionDefinition","parameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"vaultId","nameLocation":"130:7:13","nodeType":"VariableDeclaration","scope":2314,"src":"122:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"122:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"121:17:13"},"returnParameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2314,"src":"162:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2311,"name":"bool","nodeType":"ElementaryTypeName","src":"162:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"161:6:13"},"scope":2342,"src":"96:72:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ffc9896b","id":2322,"implemented":false,"kind":"function","modifiers":[],"name":"getUserData","nameLocation":"185:11:13","nodeType":"FunctionDefinition","parameters":{"id":2317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2316,"mutability":"mutable","name":"user","nameLocation":"215:4:13","nodeType":"VariableDeclaration","scope":2322,"src":"207:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2315,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"196:30:13"},"returnParameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2322,"src":"250:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":2319,"nodeType":"UserDefinedTypeName","pathNode":{"id":2318,"name":"Structures.User","nameLocations":["250:10:13","261:4:13"],"nodeType":"IdentifierPath","referencedDeclaration":2494,"src":"250:15:13"},"referencedDeclaration":2494,"src":"250:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"249:24:13"},"scope":2342,"src":"176:98:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b5cb15f7","id":2327,"implemented":false,"kind":"function","modifiers":[],"name":"getUserCount","nameLocation":"291:12:13","nodeType":"FunctionDefinition","parameters":{"id":2323,"nodeType":"ParameterList","parameters":[],"src":"303:2:13"},"returnParameters":{"id":2326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2327,"src":"329:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2324,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:9:13"},"scope":2342,"src":"282:56:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c6e064ad","id":2334,"implemented":false,"kind":"function","modifiers":[],"name":"getUserAt","nameLocation":"355:9:13","nodeType":"FunctionDefinition","parameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"index","nameLocation":"373:5:13","nodeType":"VariableDeclaration","scope":2334,"src":"365:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"364:15:13"},"returnParameters":{"id":2333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2334,"src":"403:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2331,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"402:9:13"},"scope":2342,"src":"346:66:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5b5cf50a","id":2341,"implemented":false,"kind":"function","modifiers":[],"name":"getUserVaultIdAt","nameLocation":"429:16:13","nodeType":"FunctionDefinition","parameters":{"id":2337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"index","nameLocation":"454:5:13","nodeType":"VariableDeclaration","scope":2341,"src":"446:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2335,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"445:15:13"},"returnParameters":{"id":2340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2341,"src":"484:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"484:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"483:9:13"},"scope":2342,"src":"420:73:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2343,"src":"64:432:13","usedErrors":[]}],"src":"0:498:13"},"id":13},"contracts/interfaces/IMecenateVerifier.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateVerifier.sol","exportedSymbols":{"IMecenateVerifier":[2362]},"id":2363,"nodeType":"SourceUnit","nodes":[{"id":2344,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateVerifier","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2362,"linearizedBaseContracts":[2362],"name":"IMecenateVerifier","nameLocation":"37:17:14","nodeType":"ContractDefinition","nodes":[{"functionSelector":"7276069d","id":2361,"implemented":false,"kind":"function","modifiers":[],"name":"sismoVerify","nameLocation":"71:11:14","nodeType":"FunctionDefinition","parameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2346,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"106:20:14","nodeType":"VariableDeclaration","scope":2361,"src":"93:33:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2345,"name":"bytes","nodeType":"ElementaryTypeName","src":"93:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2348,"mutability":"mutable","name":"_to","nameLocation":"145:3:14","nodeType":"VariableDeclaration","scope":2361,"src":"137:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2347,"name":"address","nodeType":"ElementaryTypeName","src":"137:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2350,"mutability":"mutable","name":"_nonce","nameLocation":"167:6:14","nodeType":"VariableDeclaration","scope":2361,"src":"159:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"159:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"82:98:14"},"returnParameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2361,"src":"204:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2352,"name":"bytes","nodeType":"ElementaryTypeName","src":"204:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2361,"src":"218:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2354,"name":"uint256","nodeType":"ElementaryTypeName","src":"218:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2361,"src":"227:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"227:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2361,"src":"236:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2358,"name":"bytes","nodeType":"ElementaryTypeName","src":"236:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"203:46:14"},"scope":2362,"src":"62:188:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2363,"src":"27:226:14","usedErrors":[]}],"src":"0:255:14"},"id":14},"contracts/library/Structures.sol":{"ast":{"absolutePath":"contracts/library/Structures.sol","exportedSymbols":{"Structures":[2547]},"id":2548,"nodeType":"SourceUnit","nodes":[{"id":2364,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"117:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"Structures","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2547,"linearizedBaseContracts":[2547],"name":"Structures","nameLocation":"152:10:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Structures.PostStatus","id":2373,"members":[{"id":2365,"name":"Waiting","nameLocation":"197:7:15","nodeType":"EnumValue","src":"197:7:15"},{"id":2366,"name":"Proposed","nameLocation":"215:8:15","nodeType":"EnumValue","src":"215:8:15"},{"id":2367,"name":"Accepted","nameLocation":"234:8:15","nodeType":"EnumValue","src":"234:8:15"},{"id":2368,"name":"Submitted","nameLocation":"253:9:15","nodeType":"EnumValue","src":"253:9:15"},{"id":2369,"name":"Finalized","nameLocation":"273:9:15","nodeType":"EnumValue","src":"273:9:15"},{"id":2370,"name":"Punished","nameLocation":"293:8:15","nodeType":"EnumValue","src":"293:8:15"},{"id":2371,"name":"Revealed","nameLocation":"312:8:15","nodeType":"EnumValue","src":"312:8:15"},{"id":2372,"name":"Renounced","nameLocation":"331:9:15","nodeType":"EnumValue","src":"331:9:15"}],"name":"PostStatus","nameLocation":"175:10:15","nodeType":"EnumDefinition","src":"170:177:15"},{"canonicalName":"Structures.Tokens","id":2377,"members":[{"id":2374,"name":"NaN","nameLocation":"376:3:15","nodeType":"EnumValue","src":"376:3:15"},{"id":2375,"name":"MUSE","nameLocation":"390:4:15","nodeType":"EnumValue","src":"390:4:15"},{"id":2376,"name":"DAI","nameLocation":"405:3:15","nodeType":"EnumValue","src":"405:3:15"}],"name":"Tokens","nameLocation":"358:6:15","nodeType":"EnumDefinition","src":"353:62:15"},{"canonicalName":"Structures.PostType","id":2383,"members":[{"id":2378,"name":"Text","nameLocation":"446:4:15","nodeType":"EnumValue","src":"446:4:15"},{"id":2379,"name":"Image","nameLocation":"461:5:15","nodeType":"EnumValue","src":"461:5:15"},{"id":2380,"name":"Video","nameLocation":"477:5:15","nodeType":"EnumValue","src":"477:5:15"},{"id":2381,"name":"Audio","nameLocation":"493:5:15","nodeType":"EnumValue","src":"493:5:15"},{"id":2382,"name":"File","nameLocation":"509:4:15","nodeType":"EnumValue","src":"509:4:15"}],"name":"PostType","nameLocation":"426:8:15","nodeType":"EnumDefinition","src":"421:99:15"},{"canonicalName":"Structures.PostDuration","id":2389,"members":[{"id":2384,"name":"OneDay","nameLocation":"555:6:15","nodeType":"EnumValue","src":"555:6:15"},{"id":2385,"name":"ThreeDays","nameLocation":"572:9:15","nodeType":"EnumValue","src":"572:9:15"},{"id":2386,"name":"OneWeek","nameLocation":"592:7:15","nodeType":"EnumValue","src":"592:7:15"},{"id":2387,"name":"TwoWeeks","nameLocation":"610:8:15","nodeType":"EnumValue","src":"610:8:15"},{"id":2388,"name":"OneMonth","nameLocation":"629:8:15","nodeType":"EnumValue","src":"629:8:15"}],"name":"PostDuration","nameLocation":"531:12:15","nodeType":"EnumDefinition","src":"526:118:15"},{"canonicalName":"Structures.FeedSettings","id":2412,"members":[{"constant":false,"id":2391,"mutability":"mutable","name":"punishmentRatio","nameLocation":"691:15:15","nodeType":"VariableDeclaration","scope":2412,"src":"683:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2390,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"postCount","nameLocation":"725:9:15","nodeType":"VariableDeclaration","scope":2412,"src":"717:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"717:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"usersModuleContract","nameLocation":"753:19:15","nodeType":"VariableDeclaration","scope":2412,"src":"745:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"745:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2397,"mutability":"mutable","name":"factoryContract","nameLocation":"791:15:15","nodeType":"VariableDeclaration","scope":2412,"src":"783:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2396,"name":"address","nodeType":"ElementaryTypeName","src":"783:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2399,"mutability":"mutable","name":"verifierContract","nameLocation":"825:16:15","nodeType":"VariableDeclaration","scope":2412,"src":"817:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2398,"name":"address","nodeType":"ElementaryTypeName","src":"817:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"vaultContract","nameLocation":"860:13:15","nodeType":"VariableDeclaration","scope":2412,"src":"852:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2400,"name":"address","nodeType":"ElementaryTypeName","src":"852:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2403,"mutability":"mutable","name":"router","nameLocation":"892:6:15","nodeType":"VariableDeclaration","scope":2412,"src":"884:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2402,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2405,"mutability":"mutable","name":"encodedSymKey","nameLocation":"915:13:15","nodeType":"VariableDeclaration","scope":2412,"src":"909:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2404,"name":"bytes","nodeType":"ElementaryTypeName","src":"909:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"lastMessageForBuyer","nameLocation":"945:19:15","nodeType":"VariableDeclaration","scope":2412,"src":"939:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2406,"name":"bytes","nodeType":"ElementaryTypeName","src":"939:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2409,"mutability":"mutable","name":"lastMessageForSeller","nameLocation":"981:20:15","nodeType":"VariableDeclaration","scope":2412,"src":"975:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2408,"name":"bytes","nodeType":"ElementaryTypeName","src":"975:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2411,"mutability":"mutable","name":"version","nameLocation":"1019:7:15","nodeType":"VariableDeclaration","scope":2412,"src":"1012:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2410,"name":"string","nodeType":"ElementaryTypeName","src":"1012:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"FeedSettings","nameLocation":"659:12:15","nodeType":"StructDefinition","scope":2547,"src":"652:382:15","visibility":"public"},{"canonicalName":"Structures.FactorySettings","id":2429,"members":[{"constant":false,"id":2414,"mutability":"mutable","name":"treasuryContract","nameLocation":"1084:16:15","nodeType":"VariableDeclaration","scope":2429,"src":"1076:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2413,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2416,"mutability":"mutable","name":"usersModuleContract","nameLocation":"1119:19:15","nodeType":"VariableDeclaration","scope":2429,"src":"1111:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2415,"name":"address","nodeType":"ElementaryTypeName","src":"1111:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2418,"mutability":"mutable","name":"verifierContract","nameLocation":"1157:16:15","nodeType":"VariableDeclaration","scope":2429,"src":"1149:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2417,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2420,"mutability":"mutable","name":"vaultContract","nameLocation":"1192:13:15","nodeType":"VariableDeclaration","scope":2429,"src":"1184:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2419,"name":"address","nodeType":"ElementaryTypeName","src":"1184:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2422,"mutability":"mutable","name":"museToken","nameLocation":"1224:9:15","nodeType":"VariableDeclaration","scope":2429,"src":"1216:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2421,"name":"address","nodeType":"ElementaryTypeName","src":"1216:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2424,"mutability":"mutable","name":"daiToken","nameLocation":"1252:8:15","nodeType":"VariableDeclaration","scope":2429,"src":"1244:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2423,"name":"address","nodeType":"ElementaryTypeName","src":"1244:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2426,"mutability":"mutable","name":"wethToken","nameLocation":"1279:9:15","nodeType":"VariableDeclaration","scope":2429,"src":"1271:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2425,"name":"address","nodeType":"ElementaryTypeName","src":"1271:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2428,"mutability":"mutable","name":"router","nameLocation":"1307:6:15","nodeType":"VariableDeclaration","scope":2429,"src":"1299:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2427,"name":"address","nodeType":"ElementaryTypeName","src":"1299:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"FactorySettings","nameLocation":"1049:15:15","nodeType":"StructDefinition","scope":2547,"src":"1042:279:15","visibility":"public"},{"canonicalName":"Structures.Post","id":2436,"members":[{"constant":false,"id":2432,"mutability":"mutable","name":"creator","nameLocation":"1441:7:15","nodeType":"VariableDeclaration","scope":2436,"src":"1436:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_storage_ptr","typeString":"struct Structures.User"},"typeName":{"id":2431,"nodeType":"UserDefinedTypeName","pathNode":{"id":2430,"name":"User","nameLocations":["1436:4:15"],"nodeType":"IdentifierPath","referencedDeclaration":2494,"src":"1436:4:15"},"referencedDeclaration":2494,"src":"1436:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"},{"constant":false,"id":2435,"mutability":"mutable","name":"postdata","nameLocation":"1468:8:15","nodeType":"VariableDeclaration","scope":2436,"src":"1459:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage_ptr","typeString":"struct Structures.PostData"},"typeName":{"id":2434,"nodeType":"UserDefinedTypeName","pathNode":{"id":2433,"name":"PostData","nameLocations":["1459:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2446,"src":"1459:8:15"},"referencedDeclaration":2446,"src":"1459:8:15","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage_ptr","typeString":"struct Structures.PostData"}},"visibility":"internal"}],"name":"Post","nameLocation":"1420:4:15","nodeType":"StructDefinition","scope":2547,"src":"1413:71:15","visibility":"public"},{"canonicalName":"Structures.PostData","id":2446,"members":[{"constant":false,"id":2439,"mutability":"mutable","name":"settings","nameLocation":"1628:8:15","nodeType":"VariableDeclaration","scope":2446,"src":"1615:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage_ptr","typeString":"struct Structures.PostSettings"},"typeName":{"id":2438,"nodeType":"UserDefinedTypeName","pathNode":{"id":2437,"name":"PostSettings","nameLocations":["1615:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2469,"src":"1615:12:15"},"referencedDeclaration":2469,"src":"1615:12:15","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage_ptr","typeString":"struct Structures.PostSettings"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"escrow","nameLocation":"1658:6:15","nodeType":"VariableDeclaration","scope":2446,"src":"1647:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage_ptr","typeString":"struct Structures.PostEscrow"},"typeName":{"id":2441,"nodeType":"UserDefinedTypeName","pathNode":{"id":2440,"name":"PostEscrow","nameLocations":["1647:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2491,"src":"1647:10:15"},"referencedDeclaration":2491,"src":"1647:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage_ptr","typeString":"struct Structures.PostEscrow"}},"visibility":"internal"},{"constant":false,"id":2445,"mutability":"mutable","name":"data","nameLocation":"1693:4:15","nodeType":"VariableDeclaration","scope":2446,"src":"1675:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_storage_ptr","typeString":"struct Structures.PostEncryptedData"},"typeName":{"id":2444,"nodeType":"UserDefinedTypeName","pathNode":{"id":2443,"name":"PostEncryptedData","nameLocations":["1675:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2453,"src":"1675:17:15"},"referencedDeclaration":2453,"src":"1675:17:15","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_storage_ptr","typeString":"struct Structures.PostEncryptedData"}},"visibility":"internal"}],"name":"PostData","nameLocation":"1595:8:15","nodeType":"StructDefinition","scope":2547,"src":"1588:117:15","visibility":"public"},{"canonicalName":"Structures.PostEncryptedData","id":2453,"members":[{"constant":false,"id":2448,"mutability":"mutable","name":"encryptedData","nameLocation":"1861:13:15","nodeType":"VariableDeclaration","scope":2453,"src":"1855:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2447,"name":"bytes","nodeType":"ElementaryTypeName","src":"1855:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"encryptedKey","nameLocation":"1891:12:15","nodeType":"VariableDeclaration","scope":2453,"src":"1885:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2449,"name":"bytes","nodeType":"ElementaryTypeName","src":"1885:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2452,"mutability":"mutable","name":"decryptedData","nameLocation":"1920:13:15","nodeType":"VariableDeclaration","scope":2453,"src":"1914:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2451,"name":"bytes","nodeType":"ElementaryTypeName","src":"1914:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PostEncryptedData","nameLocation":"1826:17:15","nodeType":"StructDefinition","scope":2547,"src":"1819:122:15","visibility":"public"},{"canonicalName":"Structures.PostSettings","id":2469,"members":[{"constant":false,"id":2456,"mutability":"mutable","name":"status","nameLocation":"2091:6:15","nodeType":"VariableDeclaration","scope":2469,"src":"2080:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":2455,"nodeType":"UserDefinedTypeName","pathNode":{"id":2454,"name":"PostStatus","nameLocations":["2080:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"2080:10:15"},"referencedDeclaration":2373,"src":"2080:10:15","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"postType","nameLocation":"2117:8:15","nodeType":"VariableDeclaration","scope":2469,"src":"2108:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"},"typeName":{"id":2458,"nodeType":"UserDefinedTypeName","pathNode":{"id":2457,"name":"PostType","nameLocations":["2108:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2383,"src":"2108:8:15"},"referencedDeclaration":2383,"src":"2108:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"creationTimeStamp","nameLocation":"2144:17:15","nodeType":"VariableDeclaration","scope":2469,"src":"2136:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"2136:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"endTimeStamp","nameLocation":"2180:12:15","nodeType":"VariableDeclaration","scope":2469,"src":"2172:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"2172:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"duration","nameLocation":"2211:8:15","nodeType":"VariableDeclaration","scope":2469,"src":"2203:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2464,"name":"uint256","nodeType":"ElementaryTypeName","src":"2203:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"tokenId","nameLocation":"2237:7:15","nodeType":"VariableDeclaration","scope":2469,"src":"2230:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":2467,"nodeType":"UserDefinedTypeName","pathNode":{"id":2466,"name":"Tokens","nameLocations":["2230:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"2230:6:15"},"referencedDeclaration":2377,"src":"2230:6:15","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"name":"PostSettings","nameLocation":"2056:12:15","nodeType":"StructDefinition","scope":2547,"src":"2049:203:15","visibility":"public"},{"canonicalName":"Structures.PostSettingPrivate","id":2482,"members":[{"constant":false,"id":2471,"mutability":"mutable","name":"vaultIdSeller","nameLocation":"2411:13:15","nodeType":"VariableDeclaration","scope":2482,"src":"2405:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2470,"name":"bytes","nodeType":"ElementaryTypeName","src":"2405:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2473,"mutability":"mutable","name":"sellerTwitterId","nameLocation":"2443:15:15","nodeType":"VariableDeclaration","scope":2482,"src":"2435:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"2435:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2475,"mutability":"mutable","name":"sellerTelegramId","nameLocation":"2477:16:15","nodeType":"VariableDeclaration","scope":2482,"src":"2469:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2474,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2477,"mutability":"mutable","name":"vaultIdBuyer","nameLocation":"2510:12:15","nodeType":"VariableDeclaration","scope":2482,"src":"2504:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2476,"name":"bytes","nodeType":"ElementaryTypeName","src":"2504:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2479,"mutability":"mutable","name":"buyerTwitterId","nameLocation":"2541:14:15","nodeType":"VariableDeclaration","scope":2482,"src":"2533:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2478,"name":"uint256","nodeType":"ElementaryTypeName","src":"2533:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2481,"mutability":"mutable","name":"buyerTelegramId","nameLocation":"2574:15:15","nodeType":"VariableDeclaration","scope":2482,"src":"2566:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"2566:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PostSettingPrivate","nameLocation":"2375:18:15","nodeType":"StructDefinition","scope":2547,"src":"2368:229:15","visibility":"public"},{"canonicalName":"Structures.PostEscrow","id":2491,"members":[{"constant":false,"id":2484,"mutability":"mutable","name":"stake","nameLocation":"2740:5:15","nodeType":"VariableDeclaration","scope":2491,"src":"2732:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2483,"name":"uint256","nodeType":"ElementaryTypeName","src":"2732:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2486,"mutability":"mutable","name":"payment","nameLocation":"2764:7:15","nodeType":"VariableDeclaration","scope":2491,"src":"2756:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2485,"name":"uint256","nodeType":"ElementaryTypeName","src":"2756:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2488,"mutability":"mutable","name":"punishment","nameLocation":"2790:10:15","nodeType":"VariableDeclaration","scope":2491,"src":"2782:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2487,"name":"uint256","nodeType":"ElementaryTypeName","src":"2782:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2490,"mutability":"mutable","name":"penalty","nameLocation":"2819:7:15","nodeType":"VariableDeclaration","scope":2491,"src":"2811:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"2811:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PostEscrow","nameLocation":"2710:10:15","nodeType":"StructDefinition","scope":2547,"src":"2703:131:15","visibility":"public"},{"canonicalName":"Structures.User","id":2494,"members":[{"constant":false,"id":2493,"mutability":"mutable","name":"vaultId","nameLocation":"2957:7:15","nodeType":"VariableDeclaration","scope":2494,"src":"2949:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2492,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2949:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"User","nameLocation":"2933:4:15","nodeType":"StructDefinition","scope":2547,"src":"2926:46:15","visibility":"public"},{"canonicalName":"Structures.Feed","id":2517,"members":[{"constant":false,"id":2496,"mutability":"mutable","name":"contractAddress","nameLocation":"3095:15:15","nodeType":"VariableDeclaration","scope":2517,"src":"3087:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2495,"name":"address","nodeType":"ElementaryTypeName","src":"3087:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2498,"mutability":"mutable","name":"operator","nameLocation":"3129:8:15","nodeType":"VariableDeclaration","scope":2517,"src":"3121:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3121:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2500,"mutability":"mutable","name":"sellerStake","nameLocation":"3156:11:15","nodeType":"VariableDeclaration","scope":2517,"src":"3148:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2499,"name":"uint256","nodeType":"ElementaryTypeName","src":"3148:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2502,"mutability":"mutable","name":"buyerStake","nameLocation":"3186:10:15","nodeType":"VariableDeclaration","scope":2517,"src":"3178:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2501,"name":"uint256","nodeType":"ElementaryTypeName","src":"3178:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2504,"mutability":"mutable","name":"totalStake","nameLocation":"3215:10:15","nodeType":"VariableDeclaration","scope":2517,"src":"3207:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"3207:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2506,"mutability":"mutable","name":"postCount","nameLocation":"3244:9:15","nodeType":"VariableDeclaration","scope":2517,"src":"3236:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"3236:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2508,"mutability":"mutable","name":"paymentRequested","nameLocation":"3272:16:15","nodeType":"VariableDeclaration","scope":2517,"src":"3264:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2507,"name":"uint256","nodeType":"ElementaryTypeName","src":"3264:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2510,"mutability":"mutable","name":"stakeRequested","nameLocation":"3307:14:15","nodeType":"VariableDeclaration","scope":2517,"src":"3299:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2509,"name":"uint256","nodeType":"ElementaryTypeName","src":"3299:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2513,"mutability":"mutable","name":"status","nameLocation":"3343:6:15","nodeType":"VariableDeclaration","scope":2517,"src":"3332:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":2512,"nodeType":"UserDefinedTypeName","pathNode":{"id":2511,"name":"PostStatus","nameLocations":["3332:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"3332:10:15"},"referencedDeclaration":2373,"src":"3332:10:15","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":2516,"mutability":"mutable","name":"tokenId","nameLocation":"3367:7:15","nodeType":"VariableDeclaration","scope":2517,"src":"3360:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":2515,"nodeType":"UserDefinedTypeName","pathNode":{"id":2514,"name":"Tokens","nameLocations":["3360:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"3360:6:15"},"referencedDeclaration":2377,"src":"3360:6:15","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"name":"Feed","nameLocation":"3071:4:15","nodeType":"StructDefinition","scope":2547,"src":"3064:318:15","visibility":"public"},{"canonicalName":"Structures.BayRequest","id":2533,"members":[{"constant":false,"id":2519,"mutability":"mutable","name":"request","nameLocation":"3518:7:15","nodeType":"VariableDeclaration","scope":2533,"src":"3510:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3510:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"payment","nameLocation":"3544:7:15","nodeType":"VariableDeclaration","scope":2533,"src":"3536:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2520,"name":"uint256","nodeType":"ElementaryTypeName","src":"3536:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2523,"mutability":"mutable","name":"stake","nameLocation":"3570:5:15","nodeType":"VariableDeclaration","scope":2533,"src":"3562:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"3562:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"postAddress","nameLocation":"3594:11:15","nodeType":"VariableDeclaration","scope":2533,"src":"3586:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2524,"name":"address","nodeType":"ElementaryTypeName","src":"3586:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"accepted","nameLocation":"3621:8:15","nodeType":"VariableDeclaration","scope":2533,"src":"3616:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2526,"name":"bool","nodeType":"ElementaryTypeName","src":"3616:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2529,"mutability":"mutable","name":"postCount","nameLocation":"3648:9:15","nodeType":"VariableDeclaration","scope":2533,"src":"3640:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2528,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2532,"mutability":"mutable","name":"tokenId","nameLocation":"3675:7:15","nodeType":"VariableDeclaration","scope":2533,"src":"3668:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":2531,"nodeType":"UserDefinedTypeName","pathNode":{"id":2530,"name":"Tokens","nameLocations":["3668:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"3668:6:15"},"referencedDeclaration":2377,"src":"3668:6:15","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"name":"BayRequest","nameLocation":"3488:10:15","nodeType":"StructDefinition","scope":2547,"src":"3481:209:15","visibility":"public"},{"canonicalName":"Structures.BayRequestPrivate","id":2546,"members":[{"constant":false,"id":2535,"mutability":"mutable","name":"vaultIdSeller","nameLocation":"3855:13:15","nodeType":"VariableDeclaration","scope":2546,"src":"3849:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2534,"name":"bytes","nodeType":"ElementaryTypeName","src":"3849:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"sellerResponse","nameLocation":"3885:14:15","nodeType":"VariableDeclaration","scope":2546,"src":"3879:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2536,"name":"bytes","nodeType":"ElementaryTypeName","src":"3879:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2539,"mutability":"mutable","name":"vaultIdBuyer","nameLocation":"3916:12:15","nodeType":"VariableDeclaration","scope":2546,"src":"3910:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2538,"name":"bytes","nodeType":"ElementaryTypeName","src":"3910:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2541,"mutability":"mutable","name":"buyerResponse","nameLocation":"3945:13:15","nodeType":"VariableDeclaration","scope":2546,"src":"3939:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2540,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2543,"mutability":"mutable","name":"buyerTo","nameLocation":"3977:7:15","nodeType":"VariableDeclaration","scope":2546,"src":"3969:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2542,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"buyerNonce","nameLocation":"4003:10:15","nodeType":"VariableDeclaration","scope":2546,"src":"3995:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3995:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"BayRequestPrivate","nameLocation":"3820:17:15","nodeType":"StructDefinition","scope":2547,"src":"3813:208:15","visibility":"public"}],"scope":2548,"src":"144:3880:15","usedErrors":[]}],"src":"117:3909:15"},"id":15},"contracts/modules/Acceptance.sol":{"ast":{"absolutePath":"contracts/modules/Acceptance.sol","exportedSymbols":{"Acceptance":[2754],"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Staking":[5485],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":2755,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2549,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"711:23:16"},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":2550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2755,"sourceUnit":3974,"src":"736:22:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":2551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2755,"sourceUnit":5486,"src":"759:23:16","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2552,"name":"Events","nameLocations":["816:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3973,"src":"816:6:16"},"id":2553,"nodeType":"InheritanceSpecifier","src":"816:6:16"},{"baseName":{"id":2554,"name":"Staking","nameLocations":["824:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":5485,"src":"824:7:16"},"id":2555,"nodeType":"InheritanceSpecifier","src":"824:7:16"}],"canonicalName":"Acceptance","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2754,"linearizedBaseContracts":[2754,5485,6228,2982,3068,3932,3973,3740],"name":"Acceptance","nameLocation":"802:10:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":2752,"nodeType":"Block","src":"1044:2012:16","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2570,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"1075:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":2577,"indexExpression":{"arguments":[{"expression":{"expression":{"id":2573,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1095:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1106:10:16","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1095:21:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1117:8:16","memberName":"Proposed","nodeType":"MemberAccess","referencedDeclaration":2366,"src":"1095:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":2572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1089:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2571,"name":"uint8","nodeType":"ElementaryTypeName","src":"1089:5:16","typeDescriptions":{}}},"id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1075:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1141:16:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":2569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1054:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:113:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2580,"nodeType":"ExpressionStatement","src":"1054:113:16"},{"expression":{"arguments":[{"id":2582,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"1189:7:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":2581,"name":"_checkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"1177:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$__$","typeString":"function (enum Structures.Tokens) view"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2584,"nodeType":"ExpressionStatement","src":"1177:20:16"},{"assignments":[2586],"declarations":[{"constant":false,"id":2586,"mutability":"mutable","name":"amountToAdd","nameLocation":"1216:11:16","nodeType":"VariableDeclaration","scope":2752,"src":"1208:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"1208:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2596,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2587,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"1230:7:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2588,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1241:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1252:6:16","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"1241:17:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1259:3:16","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"1241:21:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"1230:32:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2594,"name":"_paymentAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"1301:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1230:85:16","trueExpression":{"expression":{"id":2592,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1277:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1281:5:16","memberName":"value","nodeType":"MemberAccess","src":"1277:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1208:107:16"},{"assignments":[2598],"declarations":[{"constant":false,"id":2598,"mutability":"mutable","name":"sellerVaultIdHash","nameLocation":"1333:17:16","nodeType":"VariableDeclaration","scope":2752,"src":"1325:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1325:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2603,"initialValue":{"arguments":[{"expression":{"id":2600,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1363:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":2601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1382:13:16","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"1363:32:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":2599,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1353:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1353:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1325:71:16"},{"assignments":[2605,2607,2609,null],"declarations":[{"constant":false,"id":2605,"mutability":"mutable","name":"vaultId","nameLocation":"1476:7:16","nodeType":"VariableDeclaration","scope":2752,"src":"1463:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2604,"name":"bytes","nodeType":"ElementaryTypeName","src":"1463:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2607,"mutability":"mutable","name":"twitterId","nameLocation":"1505:9:16","nodeType":"VariableDeclaration","scope":2752,"src":"1497:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint256","nodeType":"ElementaryTypeName","src":"1497:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2609,"mutability":"mutable","name":"telegramId","nameLocation":"1536:10:16","nodeType":"VariableDeclaration","scope":2752,"src":"1528:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":2615,"initialValue":{"arguments":[{"id":2611,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"1574:20:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2612,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"1596:3:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2613,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"1601:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2610,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"1561:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1561:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1449:159:16"},{"assignments":[2617],"declarations":[{"constant":false,"id":2617,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"1626:16:16","nodeType":"VariableDeclaration","scope":2752,"src":"1618:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1618:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2621,"initialValue":{"arguments":[{"id":2619,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"1655:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2618,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1645:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1645:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1618:45:16"},{"assignments":[2623],"declarations":[{"constant":false,"id":2623,"mutability":"mutable","name":"sellerStake","nameLocation":"1731:11:16","nodeType":"VariableDeclaration","scope":2752,"src":"1723:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2622,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2629,"initialValue":{"arguments":[{"id":2626,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"1765:7:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":2627,"name":"sellerVaultIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"1774:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2624,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"1745:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1753:11:16","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"1745:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1745:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1723:69:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2631,"name":"sellerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"1811:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"expression":{"expression":{"id":2632,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1826:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":2633,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1831:8:16","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1826:13:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":2634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1840:6:16","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"1826:20:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:5:16","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"1826:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1811:41:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f494e434f5252454354","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1854:17:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_100319a84d0f3890efe46b41e6f5d0707fc1a8c06671421f3a6f1e6b07425e0b","typeString":"literal_string \"STAKE_INCORRECT\""},"value":"STAKE_INCORRECT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_100319a84d0f3890efe46b41e6f5d0707fc1a8c06671421f3a6f1e6b07425e0b","typeString":"literal_string \"STAKE_INCORRECT\""}],"id":2630,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1803:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1803:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2639,"nodeType":"ExpressionStatement","src":"1803:69:16"},{"expression":{"arguments":[{"arguments":[{"id":2646,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"1982:16:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[{"expression":{"id":2642,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1918:8:16","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2643,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1927:19:16","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"1918:28:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2641,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"1903:14:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2342_$","typeString":"type(contract IMecenateUsers)"}},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1903:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2342","typeString":"contract IMecenateUsers"}},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1948:16:16","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":2314,"src":"1903:61:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view external returns (bool)"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1903:109:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"55534552545f4e4f545f4558495354","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2026:17:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_9c9ce06a1c77c8a9a7d8b9c6680eadbfd4333137bc18abaed1e07eaf47e66615","typeString":"literal_string \"USERT_NOT_EXIST\""},"value":"USERT_NOT_EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9c9ce06a1c77c8a9a7d8b9c6680eadbfd4333137bc18abaed1e07eaf47e66615","typeString":"literal_string \"USERT_NOT_EXIST\""}],"id":2640,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1882:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1882:171:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2650,"nodeType":"ExpressionStatement","src":"1882:171:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2652,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"2071:16:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2653,"name":"sellerVaultIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"2091:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2071:37:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"594f555f4152455f5448455f53454c4c4552","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2110:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""},"value":"YOU_ARE_THE_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""}],"id":2651,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2063:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2063:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2657,"nodeType":"ExpressionStatement","src":"2063:68:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":2658,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2146:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":2659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2151:8:16","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2146:13:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":2660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2160:6:16","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"2146:20:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2661,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2167:7:16","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"2146:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2177:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2146:32:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2690,"nodeType":"Block","src":"2334:121:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2676,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2356:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2360:5:16","memberName":"value","nodeType":"MemberAccess","src":"2356:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2368:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2356:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5a45524f5f4d534756414c5545","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2371:15:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_664e35cd69e9c0fd2c3a2541a0d1babcd863ee7a8f8b62c3489cd2e77100fb4e","typeString":"literal_string \"ZERO_MSGVALUE\""},"value":"ZERO_MSGVALUE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_664e35cd69e9c0fd2c3a2541a0d1babcd863ee7a8f8b62c3489cd2e77100fb4e","typeString":"literal_string \"ZERO_MSGVALUE\""}],"id":2675,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2348:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2682,"nodeType":"ExpressionStatement","src":"2348:39:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2684,"name":"_paymentAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2409:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2426:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2409:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5a45524f5f5041594d454e54","id":2687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2429:14:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f56529c301fb3aba700b534fe7aa1bb123b816bddf2e310d805052f5d74b4a13","typeString":"literal_string \"ZERO_PAYMENT\""},"value":"ZERO_PAYMENT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f56529c301fb3aba700b534fe7aa1bb123b816bddf2e310d805052f5d74b4a13","typeString":"literal_string \"ZERO_PAYMENT\""}],"id":2683,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2401:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2689,"nodeType":"ExpressionStatement","src":"2401:43:16"}]},"id":2691,"nodeType":"IfStatement","src":"2142:313:16","trueBody":{"id":2674,"nodeType":"Block","src":"2180:148:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2665,"name":"_paymentAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2219:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"expression":{"expression":{"id":2666,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2237:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":2667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2242:8:16","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2237:13:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":2668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2251:6:16","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"2237:20:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2669,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2258:7:16","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"2237:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2219:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f454e4f5547485f5041594d454e54","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2283:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f7127b08ebb47662d7f1314ad8619c85cc122b6410cd6decda53b54bce976896","typeString":"literal_string \"NOT_ENOUGH_PAYMENT\""},"value":"NOT_ENOUGH_PAYMENT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f7127b08ebb47662d7f1314ad8619c85cc122b6410cd6decda53b54bce976896","typeString":"literal_string \"NOT_ENOUGH_PAYMENT\""}],"id":2664,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2194:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2194:123:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2673,"nodeType":"ExpressionStatement","src":"2194:123:16"}]}},{"assignments":[2693],"declarations":[{"constant":false,"id":2693,"mutability":"mutable","name":"payment","nameLocation":"2473:7:16","nodeType":"VariableDeclaration","scope":2752,"src":"2465:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2692,"name":"uint256","nodeType":"ElementaryTypeName","src":"2465:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2701,"initialValue":{"arguments":[{"id":2695,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"2506:7:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":2696,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"2527:16:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2697,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2557:8:16","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2566:13:16","memberName":"vaultContract","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"2557:22:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2699,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"2593:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2694,"name":"_addStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"2483:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,address,uint256) returns (uint256)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2483:131:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2465:149:16"},{"expression":{"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":2702,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2655:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":2706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2660:8:16","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2655:13:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":2707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2669:6:16","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"2655:20:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2676:7:16","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"2655:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2709,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"2686:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2655:38:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2711,"nodeType":"ExpressionStatement","src":"2655:38:16"},{"expression":{"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":2712,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2703:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":2716,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2708:8:16","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2703:13:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":2717,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2717:8:16","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2703:22:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":2718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2726:6:16","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"2703:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":2719,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2735:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2746:10:16","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2735:21:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2757:8:16","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"2735:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2703:62:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":2723,"nodeType":"ExpressionStatement","src":"2703:62:16"},{"expression":{"arguments":[{"expression":{"expression":{"id":2725,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2789:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2800:10:16","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2789:21:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":2727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2811:8:16","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"2789:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":2724,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"2775:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2373_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2775:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2729,"nodeType":"ExpressionStatement","src":"2775:45:16"},{"expression":{"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2730,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2866:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":2732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2885:12:16","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"2866:31:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2733,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"2900:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2866:41:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":2735,"nodeType":"ExpressionStatement","src":"2866:41:16"},{"expression":{"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2736,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2917:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":2738,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2936:14:16","memberName":"buyerTwitterId","nodeType":"MemberAccess","referencedDeclaration":2479,"src":"2917:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2739,"name":"twitterId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"2953:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2917:45:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2741,"nodeType":"ExpressionStatement","src":"2917:45:16"},{"expression":{"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2742,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2972:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":2744,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2991:15:16","memberName":"buyerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2481,"src":"2972:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2745,"name":"telegramId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"3009:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2972:47:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2747,"nodeType":"ExpressionStatement","src":"2972:47:16"},{"eventCall":{"arguments":[{"id":2749,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3044:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}],"id":2748,"name":"Accepted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"3035:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3035:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2751,"nodeType":"EmitStatement","src":"3030:19:16"}]},"functionSelector":"200f852c","id":2753,"implemented":true,"kind":"function","modifiers":[],"name":"acceptPost","nameLocation":"847:10:16","nodeType":"FunctionDefinition","parameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2557,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"880:20:16","nodeType":"VariableDeclaration","scope":2753,"src":"867:33:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2556,"name":"bytes","nodeType":"ElementaryTypeName","src":"867:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2559,"mutability":"mutable","name":"_to","nameLocation":"918:3:16","nodeType":"VariableDeclaration","scope":2753,"src":"910:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2558,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2561,"mutability":"mutable","name":"_nonce","nameLocation":"939:6:16","nodeType":"VariableDeclaration","scope":2753,"src":"931:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"931:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2564,"mutability":"mutable","name":"tokenId","nameLocation":"973:7:16","nodeType":"VariableDeclaration","scope":2753,"src":"955:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":2563,"nodeType":"UserDefinedTypeName","pathNode":{"id":2562,"name":"Structures.Tokens","nameLocations":["955:10:16","966:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"955:17:16"},"referencedDeclaration":2377,"src":"955:17:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"_paymentAmount","nameLocation":"998:14:16","nodeType":"VariableDeclaration","scope":2753,"src":"990:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"990:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"857:161:16"},"returnParameters":{"id":2568,"nodeType":"ParameterList","parameters":[],"src":"1044:0:16"},"scope":2754,"src":"838:2218:16","stateMutability":"payable","virtual":true,"visibility":"external"}],"scope":2755,"src":"784:2274:16","usedErrors":[]}],"src":"711:2348:16"},"id":16},"contracts/modules/BurnDAI.sol":{"ast":{"absolutePath":"contracts/modules/BurnDAI.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Strings":[306],"Structures":[2547]},"id":2983,"nodeType":"SourceUnit","nodes":[{"id":2756,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:17"},{"absolutePath":"contracts/modules/BurnMUSE.sol","file":"./BurnMUSE.sol","id":2757,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2983,"sourceUnit":3069,"src":"27:24:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","file":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","id":2758,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2983,"sourceUnit":2070,"src":"53:68:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":2759,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2983,"sourceUnit":1851,"src":"123:57:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2760,"name":"BurnMUSE","nameLocations":["213:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":3068,"src":"213:8:17"},"id":2761,"nodeType":"InheritanceSpecifier","src":"213:8:17"}],"canonicalName":"BurnDAI","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2982,"linearizedBaseContracts":[2982,3068,3973,3740],"name":"BurnDAI","nameLocation":"202:7:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2764,"libraryName":{"id":2762,"name":"SafeMath","nameLocations":["235:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1850,"src":"235:8:17"},"nodeType":"UsingForDirective","src":"229:27:17","typeName":{"id":2763,"name":"uint256","nodeType":"ElementaryTypeName","src":"248:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"baseFunctions":[3039],"body":{"id":2793,"nodeType":"Block","src":"330:164:17","statements":[{"expression":{"arguments":[{"id":2781,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"434:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2784,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"448:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_BurnDAI_$2982","typeString":"contract BurnDAI"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnDAI_$2982","typeString":"contract BurnDAI"}],"id":2783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"440:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2782,"name":"address","nodeType":"ElementaryTypeName","src":"440:7:17","typeDescriptions":{}}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"440:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"455:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2774,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"369:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"378:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"369:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2773,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"348:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"348:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"395:8:17","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"348:55:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"348:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2772,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"341:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"341:65:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"421:12:17","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"341:92:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"341:120:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2788,"nodeType":"ExpressionStatement","src":"341:120:17"},{"expression":{"arguments":[{"id":2790,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"480:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2789,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"474:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2792,"nodeType":"ExpressionStatement","src":"474:12:17"}]},"id":2794,"implemented":true,"kind":"function","modifiers":[],"name":"_burnFrom","nameLocation":"273:9:17","nodeType":"FunctionDefinition","overrides":{"id":2770,"nodeType":"OverrideSpecifier","overrides":[],"src":"321:8:17"},"parameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"mutability":"mutable","name":"from","nameLocation":"291:4:17","nodeType":"VariableDeclaration","scope":2794,"src":"283:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2765,"name":"address","nodeType":"ElementaryTypeName","src":"283:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"value","nameLocation":"305:5:17","nodeType":"VariableDeclaration","scope":2794,"src":"297:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2767,"name":"uint256","nodeType":"ElementaryTypeName","src":"297:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"282:29:17"},"returnParameters":{"id":2771,"nodeType":"ParameterList","parameters":[],"src":"330:0:17"},"scope":2982,"src":"264:230:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2872,"nodeType":"Block","src":"544:964:17","statements":[{"expression":{"arguments":[{"expression":{"id":2808,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"690:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2809,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"699:6:17","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"690:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"707:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2801,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"630:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"639:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"630:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2800,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"609:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"656:8:17","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"609:55:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2799,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"602:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:65:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"682:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"602:87:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:111:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2812,"nodeType":"ExpressionStatement","src":"602:111:17"},{"assignments":[2814],"declarations":[{"constant":false,"id":2814,"mutability":"mutable","name":"tokens_sold","nameLocation":"764:11:17","nodeType":"VariableDeclaration","scope":2872,"src":"756:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2813,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2816,"initialValue":{"id":2815,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"778:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"756:27:17"},{"assignments":[2818],"declarations":[{"constant":false,"id":2818,"mutability":"mutable","name":"tokens_bought","nameLocation":"804:13:17","nodeType":"VariableDeclaration","scope":2872,"src":"796:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"796:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2840,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2820,"name":"getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[2887],"referencedDeclaration":2887,"src":"854:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"854:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2823,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"907:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2824,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"916:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"907:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2822,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"886:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"886:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:9:17","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"886:56:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"886:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"hexValue":"30","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[{"expression":{"id":2831,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1005:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2832,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1014:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"1005:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2830,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"984:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"984:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1031:12:17","memberName":"getRouterFee","nodeType":"MemberAccess","referencedDeclaration":2285,"src":"984:59:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint8) view external returns (uint256)"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"984:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"959:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":2828,"name":"uint24","nodeType":"ElementaryTypeName","src":"959:6:17","typeDescriptions":{}}},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"959:102:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":2838,"name":"tokens_sold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"1076:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2819,"name":"_swapTokensForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"820:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint24,uint256) returns (uint256)"}},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"820:278:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"796:302:17"},{"assignments":[2842],"declarations":[{"constant":false,"id":2842,"mutability":"mutable","name":"tokens_sold_to_muse","nameLocation":"1119:19:17","nodeType":"VariableDeclaration","scope":2872,"src":"1111:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1111:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2865,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2845,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1196:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2846,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1205:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"1196:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2844,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"1175:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1175:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1222:9:17","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"1175:56:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1175:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2850,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"1248:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1257:15:17","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"1248:24:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1248:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"hexValue":"31","id":2860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1374:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"arguments":[{"expression":{"id":2856,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1335:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2857,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1344:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"1335:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2855,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"1314:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1314:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1361:12:17","memberName":"getRouterFee","nodeType":"MemberAccess","referencedDeclaration":2285,"src":"1314:59:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint8) view external returns (uint256)"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1314:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":2853,"name":"uint24","nodeType":"ElementaryTypeName","src":"1289:6:17","typeDescriptions":{}}},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:102:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":2863,"name":"tokens_bought","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"1406:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2843,"name":"_swapTokensForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"1141:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint24,uint256) returns (uint256)"}},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1141:289:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1111:319:17"},{"expression":{"arguments":[{"id":2869,"name":"tokens_sold_to_muse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"1480:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2866,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"1465:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1474:5:17","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":3010,"src":"1465:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1465:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2871,"nodeType":"ExpressionStatement","src":"1465:35:17"}]},"id":2873,"implemented":true,"kind":"function","modifiers":[],"name":"_burnDai","nameLocation":"511:8:17","nodeType":"FunctionDefinition","parameters":{"id":2797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2796,"mutability":"mutable","name":"value","nameLocation":"528:5:17","nodeType":"VariableDeclaration","scope":2873,"src":"520:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2795,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"519:15:17"},"returnParameters":{"id":2798,"nodeType":"ParameterList","parameters":[],"src":"544:0:17"},"scope":2982,"src":"502:1006:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3052],"body":{"id":2886,"nodeType":"Block","src":"1648:83:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2880,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1687:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1696:15:17","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"1687:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2879,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"1666:20:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1666:46:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1713:8:17","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"1666:55:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1666:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2878,"id":2885,"nodeType":"Return","src":"1659:64:17"}]},"id":2887,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenAddress","nameLocation":"1525:15:17","nodeType":"FunctionDefinition","overrides":{"id":2875,"nodeType":"OverrideSpecifier","overrides":[],"src":"1601:8:17"},"parameters":{"id":2874,"nodeType":"ParameterList","parameters":[],"src":"1540:2:17"},"returnParameters":{"id":2878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2877,"mutability":"mutable","name":"token","nameLocation":"1636:5:17","nodeType":"VariableDeclaration","scope":2887,"src":"1628:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2876,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1627:15:17"},"scope":2982,"src":"1516:215:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3067],"body":{"id":2898,"nodeType":"Block","src":"1860:45:17","statements":[{"expression":{"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2893,"name":"exchange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"1871:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2894,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1882:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2895,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1891:6:17","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"1882:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1871:26:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2897,"nodeType":"ExpressionStatement","src":"1871:26:17"}]},"id":2899,"implemented":true,"kind":"function","modifiers":[],"name":"getExchangeAddress","nameLocation":"1748:18:17","nodeType":"FunctionDefinition","overrides":{"id":2889,"nodeType":"OverrideSpecifier","overrides":[],"src":"1810:8:17"},"parameters":{"id":2888,"nodeType":"ParameterList","parameters":[],"src":"1766:2:17"},"returnParameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"exchange","nameLocation":"1845:8:17","nodeType":"VariableDeclaration","scope":2899,"src":"1837:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2890,"name":"address","nodeType":"ElementaryTypeName","src":"1837:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1836:18:17"},"scope":2982,"src":"1739:166:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2980,"nodeType":"Block","src":"2087:1078:17","statements":[{"assignments":[2913],"declarations":[{"constant":false,"id":2913,"mutability":"mutable","name":"allowance","nameLocation":"2146:9:17","nodeType":"VariableDeclaration","scope":2980,"src":"2138:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2925,"initialValue":{"arguments":[{"arguments":[{"id":2920,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2206:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_BurnDAI_$2982","typeString":"contract BurnDAI"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnDAI_$2982","typeString":"contract BurnDAI"}],"id":2919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2198:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2918,"name":"address","nodeType":"ElementaryTypeName","src":"2198:7:17","typeDescriptions":{}}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2922,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2226:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2235:6:17","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"2226:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2915,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2165:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2914,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2158:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2158:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2174:9:17","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"2158:25:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2158:94:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2138:114:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2926,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"2267:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2927,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"2279:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2267:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"nodeType":"IfStatement","src":"2263:112:17","trueBody":{"id":2942,"nodeType":"Block","src":"2289:86:17","statements":[{"expression":{"arguments":[{"expression":{"id":2933,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2328:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2337:6:17","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"2328:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":2937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2350:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"2350:7:17","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2935,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2345:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2345:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2359:3:17","memberName":"max","nodeType":"MemberAccess","src":"2345:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2930,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2311:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2929,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2304:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2304:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2320:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"2304:23:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2304:59:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2941,"nodeType":"ExpressionStatement","src":"2304:59:17"}]}},{"assignments":[2945],"declarations":[{"constant":false,"id":2945,"mutability":"mutable","name":"recipient","nameLocation":"2426:9:17","nodeType":"VariableDeclaration","scope":2980,"src":"2418:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2944,"name":"address","nodeType":"ElementaryTypeName","src":"2418:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2950,"initialValue":{"arguments":[{"id":2948,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2446:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_BurnDAI_$2982","typeString":"contract BurnDAI"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnDAI_$2982","typeString":"contract BurnDAI"}],"id":2947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2438:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2946,"name":"address","nodeType":"ElementaryTypeName","src":"2438:7:17","typeDescriptions":{}}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2438:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2418:33:17"},{"assignments":[2952],"declarations":[{"constant":false,"id":2952,"mutability":"mutable","name":"deadline","nameLocation":"2470:8:17","nodeType":"VariableDeclaration","scope":2980,"src":"2462:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"2462:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2957,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2953,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2481:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2487:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"2481:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3135","id":2955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2499:2:17","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"2481:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2462:39:17"},{"expression":{"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2958,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"2667:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2966,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2802:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2967,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"2838:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2968,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"2870:3:17","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":2969,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"2903:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2970,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2941:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2971,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"2978:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3023:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3100:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2964,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"2739:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$2069_$","typeString":"type(contract ISwapRouter)"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2751:22:17","memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":1993,"src":"2739:34:17","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$1993_storage_ptr_$","typeString":"type(struct ISwapRouter.ExactInputSingleParams storage pointer)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2793:7:17","2828:8:17","2865:3:17","2892:9:17","2931:8:17","2968:8:17","3005:16:17","3081:17:17"],"names":["tokenIn","tokenOut","fee","recipient","deadline","amountIn","amountOutMinimum","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"2739:378:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1993_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1993_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}],"expression":{"arguments":[{"expression":{"id":2960,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2691:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2700:6:17","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"2691:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2959,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"2679:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$2069_$","typeString":"type(contract ISwapRouter)"}},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2679:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$2069","typeString":"contract ISwapRouter"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2708:16:17","memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":2002,"src":"2679:45:17","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$1993_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2679:449:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2667:461:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2977,"nodeType":"ExpressionStatement","src":"2667:461:17"},{"expression":{"id":2978,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"3148:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2911,"id":2979,"nodeType":"Return","src":"3141:16:17"}]},"id":2981,"implemented":true,"kind":"function","modifiers":[],"name":"_swapTokensForToken","nameLocation":"1922:19:17","nodeType":"FunctionDefinition","parameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2901,"mutability":"mutable","name":"tokenIn","nameLocation":"1960:7:17","nodeType":"VariableDeclaration","scope":2981,"src":"1952:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2900,"name":"address","nodeType":"ElementaryTypeName","src":"1952:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2903,"mutability":"mutable","name":"tokenOut","nameLocation":"1986:8:17","nodeType":"VariableDeclaration","scope":2981,"src":"1978:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2902,"name":"address","nodeType":"ElementaryTypeName","src":"1978:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2905,"mutability":"mutable","name":"fee","nameLocation":"2012:3:17","nodeType":"VariableDeclaration","scope":2981,"src":"2005:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2904,"name":"uint24","nodeType":"ElementaryTypeName","src":"2005:6:17","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":2907,"mutability":"mutable","name":"amountIn","nameLocation":"2034:8:17","nodeType":"VariableDeclaration","scope":2981,"src":"2026:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2906,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1941:108:17"},"returnParameters":{"id":2911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2910,"mutability":"mutable","name":"amountOut","nameLocation":"2076:9:17","nodeType":"VariableDeclaration","scope":2981,"src":"2068:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2068:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2067:19:17"},"scope":2982,"src":"1913:1252:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2983,"src":"184:2984:17","usedErrors":[]}],"src":"0:3170:17"},"id":17},"contracts/modules/BurnMUSE.sol":{"ast":{"absolutePath":"contracts/modules/BurnMUSE.sol","exportedSymbols":{"BurnMUSE":[3068],"Data":[3740],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"Math":[1538],"SignedMath":[1955],"Strings":[306],"Structures":[2547]},"id":3069,"nodeType":"SourceUnit","nodes":[{"id":2984,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:18"},{"absolutePath":"contracts/interfaces/IMUSE.sol","file":"../interfaces/IMUSE.sol","id":2985,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3069,"sourceUnit":2159,"src":"25:33:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","file":"../interfaces/IMecenateFeedFactory.sol","id":2986,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3069,"sourceUnit":2292,"src":"60:48:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":2987,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3069,"sourceUnit":3974,"src":"110:22:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2988,"name":"Events","nameLocations":["166:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3973,"src":"166:6:18"},"id":2989,"nodeType":"InheritanceSpecifier","src":"166:6:18"}],"canonicalName":"BurnMUSE","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3068,"linearizedBaseContracts":[3068,3973,3740],"name":"BurnMUSE","nameLocation":"154:8:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3009,"nodeType":"Block","src":"227:180:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":3004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"349:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2997,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"287:8:18","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"296:15:18","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"287:24:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2996,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"266:20:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"266:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"313:9:18","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2263,"src":"266:56:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"266:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2995,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"260:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2158_$","typeString":"type(contract IMUSE)"}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"260:65:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2158","typeString":"contract IMUSE"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"344:4:18","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":2157,"src":"260:88:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) external returns (bool)"}},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"260:95:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6d757365206275726e206661696c6564","id":3006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"370:18:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5264a249d8d1b9309e23da104b14a7345b2c6061705168ead8fd7c7516ce0eb4","typeString":"literal_string \"muse burn failed\""},"value":"muse burn failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5264a249d8d1b9309e23da104b14a7345b2c6061705168ead8fd7c7516ce0eb4","typeString":"literal_string \"muse burn failed\""}],"id":2994,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"238:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"238:161:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3008,"nodeType":"ExpressionStatement","src":"238:161:18"}]},"id":3010,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"189:5:18","nodeType":"FunctionDefinition","parameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2991,"mutability":"mutable","name":"value","nameLocation":"203:5:18","nodeType":"VariableDeclaration","scope":3010,"src":"195:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2990,"name":"uint256","nodeType":"ElementaryTypeName","src":"195:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"194:15:18"},"returnParameters":{"id":2993,"nodeType":"ParameterList","parameters":[],"src":"227:0:18"},"scope":3068,"src":"180:227:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3038,"nodeType":"Block","src":"480:162:18","statements":[{"expression":{"arguments":[{"id":3026,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"584:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3029,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"598:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_BurnMUSE_$3068","typeString":"contract BurnMUSE"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnMUSE_$3068","typeString":"contract BurnMUSE"}],"id":3028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"590:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3027,"name":"address","nodeType":"ElementaryTypeName","src":"590:7:18","typeDescriptions":{}}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"590:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"605:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3019,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"518:8:18","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"527:15:18","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"518:24:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3018,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"497:20:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"497:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"544:9:18","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2263,"src":"497:56:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"497:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3017,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"491:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2158_$","typeString":"type(contract IMUSE)"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"491:65:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2158","typeString":"contract IMUSE"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"571:12:18","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"491:92:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"491:120:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3033,"nodeType":"ExpressionStatement","src":"491:120:18"},{"expression":{"arguments":[{"id":3035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"628:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3034,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"622:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"622:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3037,"nodeType":"ExpressionStatement","src":"622:12:18"}]},"id":3039,"implemented":true,"kind":"function","modifiers":[],"name":"_burnFrom","nameLocation":"424:9:18","nodeType":"FunctionDefinition","parameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3012,"mutability":"mutable","name":"from","nameLocation":"442:4:18","nodeType":"VariableDeclaration","scope":3039,"src":"434:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3011,"name":"address","nodeType":"ElementaryTypeName","src":"434:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3014,"mutability":"mutable","name":"value","nameLocation":"456:5:18","nodeType":"VariableDeclaration","scope":3039,"src":"448:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"433:29:18"},"returnParameters":{"id":3016,"nodeType":"ParameterList","parameters":[],"src":"480:0:18"},"scope":3068,"src":"415:227:18","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3051,"nodeType":"Block","src":"723:84:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3045,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"762:8:18","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3046,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"771:15:18","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"762:24:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3044,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"741:20:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"741:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"788:9:18","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2263,"src":"741:56:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"741:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3043,"id":3050,"nodeType":"Return","src":"734:65:18"}]},"id":3052,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenAddress","nameLocation":"659:15:18","nodeType":"FunctionDefinition","parameters":{"id":3040,"nodeType":"ParameterList","parameters":[],"src":"674:2:18"},"returnParameters":{"id":3043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3042,"mutability":"mutable","name":"token","nameLocation":"716:5:18","nodeType":"VariableDeclaration","scope":3052,"src":"708:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3041,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:15:18"},"scope":3068,"src":"650:157:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3066,"nodeType":"Block","src":"935:85:18","statements":[{"expression":{"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3057,"name":"exchange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"946:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3059,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"978:8:18","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3060,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"987:15:18","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"978:24:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3058,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"957:20:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"957:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1004:6:18","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2278,"src":"957:53:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"957:55:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"946:66:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3065,"nodeType":"ExpressionStatement","src":"946:66:18"}]},"id":3067,"implemented":true,"kind":"function","modifiers":[],"name":"getExchangeAddress","nameLocation":"824:18:18","nodeType":"FunctionDefinition","parameters":{"id":3053,"nodeType":"ParameterList","parameters":[],"src":"842:2:18"},"returnParameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3055,"mutability":"mutable","name":"exchange","nameLocation":"920:8:18","nodeType":"VariableDeclaration","scope":3067,"src":"912:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3054,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"911:18:18"},"scope":3068,"src":"815:205:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3069,"src":"136:887:18","usedErrors":[]}],"src":"0:1025:18"},"id":18},"contracts/modules/Creation.sol":{"ast":{"absolutePath":"contracts/modules/Creation.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Creation":[3260],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Staking":[5485],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":3261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3070,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"377:23:19"},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":3071,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3261,"sourceUnit":5486,"src":"402:23:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3072,"name":"Staking","nameLocations":["457:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":5485,"src":"457:7:19"},"id":3073,"nodeType":"InheritanceSpecifier","src":"457:7:19"}],"canonicalName":"Creation","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3260,"linearizedBaseContracts":[3260,5485,6228,2982,3068,3932,3973,3740],"name":"Creation","nameLocation":"445:8:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3258,"nodeType":"Block","src":"906:2349:19","statements":[{"assignments":[3104,3106,3108,null],"declarations":[{"constant":false,"id":3104,"mutability":"mutable","name":"vaultId","nameLocation":"943:7:19","nodeType":"VariableDeclaration","scope":3258,"src":"930:20:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3103,"name":"bytes","nodeType":"ElementaryTypeName","src":"930:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3106,"mutability":"mutable","name":"twitterId","nameLocation":"972:9:19","nodeType":"VariableDeclaration","scope":3258,"src":"964:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3105,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3108,"mutability":"mutable","name":"telegramId","nameLocation":"1003:10:19","nodeType":"VariableDeclaration","scope":3258,"src":"995:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3107,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":3114,"initialValue":{"arguments":[{"id":3110,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"1041:20:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3111,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"1063:3:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3112,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"1068:6:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3109,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"1028:12:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1028:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"916:159:19"},{"assignments":[3116],"declarations":[{"constant":false,"id":3116,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"1093:16:19","nodeType":"VariableDeclaration","scope":3258,"src":"1085:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1085:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3120,"initialValue":{"arguments":[{"id":3118,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"1122:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3117,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1112:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1085:45:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3122,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"1182:16:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3123,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"1202:5:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1182:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f4f574e4552","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1209:11:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_d4d6719c9f6bf1f398a61e7ceb8dff26d48346602421236409d0fb0b222f65b2","typeString":"literal_string \"NOT_OWNER\""},"value":"NOT_OWNER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d4d6719c9f6bf1f398a61e7ceb8dff26d48346602421236409d0fb0b222f65b2","typeString":"literal_string \"NOT_OWNER\""}],"id":3121,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1174:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1174:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3127,"nodeType":"ExpressionStatement","src":"1174:47:19"},{"expression":{"arguments":[{"arguments":[{"id":3134,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"1331:16:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[{"expression":{"id":3130,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1267:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1276:19:19","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"1267:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3129,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"1252:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2342_$","typeString":"type(contract IMecenateUsers)"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1252:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2342","typeString":"contract IMecenateUsers"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1297:16:19","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":2314,"src":"1252:61:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view external returns (bool)"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1252:109:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f4e4f545f4558495354","id":3136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1375:16:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a30548538b44c7c399c3fe1d567a4d60d62cbbd14ed880bc3963c8108d6cdde","typeString":"literal_string \"USER_NOT_EXIST\""},"value":"USER_NOT_EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a30548538b44c7c399c3fe1d567a4d60d62cbbd14ed880bc3963c8108d6cdde","typeString":"literal_string \"USER_NOT_EXIST\""}],"id":3128,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1231:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1231:170:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3138,"nodeType":"ExpressionStatement","src":"1231:170:19"},{"expression":{"arguments":[{"baseExpression":{"id":3140,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"1432:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3148,"indexExpression":{"arguments":[{"expression":{"expression":{"expression":{"id":3143,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1452:4:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1457:8:19","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1452:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1466:8:19","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1452:22:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1475:6:19","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"1452:29:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":3142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1446:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3141,"name":"uint8","nodeType":"ElementaryTypeName","src":"1446:5:19","typeDescriptions":{}}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1446:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1432:51:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":3149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1497:16:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":3139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1411:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1411:112:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3151,"nodeType":"ExpressionStatement","src":"1411:112:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3153,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"1541:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1555:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1541:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f414d4f554e545f5a45524f","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1558:19:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_849c3f8b91cf2334f55865bdc5129917e74cccfbc0e15dbd355baf1993e3f730","typeString":"literal_string \"STAKE_AMOUNT_ZERO\""},"value":"STAKE_AMOUNT_ZERO"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_849c3f8b91cf2334f55865bdc5129917e74cccfbc0e15dbd355baf1993e3f730","typeString":"literal_string \"STAKE_AMOUNT_ZERO\""}],"id":3152,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1533:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1533:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3158,"nodeType":"ExpressionStatement","src":"1533:45:19"},{"assignments":[3160],"declarations":[{"constant":false,"id":3160,"mutability":"mutable","name":"duration","nameLocation":"1597:8:19","nodeType":"VariableDeclaration","scope":3258,"src":"1589:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3167,"initialValue":{"baseExpression":{"id":3161,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1608:18:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3166,"indexExpression":{"arguments":[{"id":3164,"name":"postDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"1633:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}],"id":3163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1627:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3162,"name":"uint8","nodeType":"ElementaryTypeName","src":"1627:5:19","typeDescriptions":{}}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1627:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1608:39:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:58:19"},{"assignments":[3169],"declarations":[{"constant":false,"id":3169,"mutability":"mutable","name":"stake","nameLocation":"1665:5:19","nodeType":"VariableDeclaration","scope":3258,"src":"1657:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1657:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3177,"initialValue":{"arguments":[{"id":3171,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"1696:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":3172,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"1717:16:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3173,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1747:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3174,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1756:13:19","memberName":"vaultContract","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"1747:22:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3175,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"1783:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3170,"name":"_addStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"1673:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,address,uint256) returns (uint256)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:131:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1657:147:19"},{"expression":{"arguments":[{"expression":{"expression":{"id":3179,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1866:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1877:10:19","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1866:21:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":3181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1888:8:19","memberName":"Proposed","nodeType":"MemberAccess","referencedDeclaration":2366,"src":"1866:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":3178,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"1852:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2373_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1852:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3183,"nodeType":"ExpressionStatement","src":"1852:45:19"},{"assignments":[3188],"declarations":[{"constant":false,"id":3188,"mutability":"mutable","name":"newPost","nameLocation":"2006:7:19","nodeType":"VariableDeclaration","scope":3258,"src":"1983:30:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3187,"nodeType":"UserDefinedTypeName","pathNode":{"id":3186,"name":"Structures.Post","nameLocations":["1983:10:19","1994:4:19"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"1983:15:19"},"referencedDeclaration":2436,"src":"1983:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"id":3224,"initialValue":{"arguments":[{"arguments":[{"id":3193,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"2081:16:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3191,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2055:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2066:4:19","memberName":"User","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"2055:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$2494_storage_ptr_$","typeString":"type(struct Structures.User storage pointer)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2072:7:19"],"names":["vaultId"],"nodeType":"FunctionCall","src":"2055:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_memory_ptr","typeString":"struct Structures.User memory"}},{"arguments":[{"arguments":[{"id":3199,"name":"postType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"2227:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"}},{"expression":{"expression":{"id":3200,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2265:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2276:10:19","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2265:21:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":3202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2287:8:19","memberName":"Proposed","nodeType":"MemberAccess","referencedDeclaration":2366,"src":"2265:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},{"expression":{"id":3203,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2336:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2342:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"2336:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2387:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3206,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"2420:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"2459:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"},{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"expression":{"id":3197,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2171:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2182:12:19","memberName":"PostSettings","nodeType":"MemberAccess","referencedDeclaration":2469,"src":"2171:23:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostSettings_$2469_storage_ptr_$","typeString":"type(struct Structures.PostSettings storage pointer)"}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2217:8:19","2257:6:19","2317:17:19","2373:12:19","2410:8:19","2450:7:19"],"names":["postType","status","creationTimeStamp","endTimeStamp","duration","tokenId"],"nodeType":"FunctionCall","src":"2171:314:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_memory_ptr","typeString":"struct Structures.PostSettings memory"}},{"arguments":[{"id":3211,"name":"stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"2562:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3212,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"2598:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2639:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2671:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3209,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2511:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2522:10:19","memberName":"PostEscrow","nodeType":"MemberAccess","referencedDeclaration":2491,"src":"2511:21:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEscrow_$2491_storage_ptr_$","typeString":"type(struct Structures.PostEscrow storage pointer)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2555:5:19","2589:7:19","2627:10:19","2662:7:19"],"names":["stake","payment","punishment","penalty"],"nodeType":"FunctionCall","src":"2511:180:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_memory_ptr","typeString":"struct Structures.PostEscrow memory"}},{"arguments":[{"id":3218,"name":"encryptedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"2781:13:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3219,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2830:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3220,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2875:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3216,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2715:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2726:17:19","memberName":"PostEncryptedData","nodeType":"MemberAccess","referencedDeclaration":2453,"src":"2715:28:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEncryptedData_$2453_storage_ptr_$","typeString":"type(struct Structures.PostEncryptedData storage pointer)"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2766:13:19","2816:12:19","2860:13:19"],"names":["encryptedData","encryptedKey","decryptedData"],"nodeType":"FunctionCall","src":"2715:187:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PostSettings_$2469_memory_ptr","typeString":"struct Structures.PostSettings memory"},{"typeIdentifier":"t_struct$_PostEscrow_$2491_memory_ptr","typeString":"struct Structures.PostEscrow memory"},{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}],"expression":{"id":3195,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2123:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2134:8:19","memberName":"PostData","nodeType":"MemberAccess","referencedDeclaration":2446,"src":"2123:19:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostData_$2446_storage_ptr_$","typeString":"type(struct Structures.PostData storage pointer)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2161:8:19","2503:6:19","2709:4:19"],"names":["settings","escrow","data"],"nodeType":"FunctionCall","src":"2123:794:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_memory_ptr","typeString":"struct Structures.PostData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_User_$2494_memory_ptr","typeString":"struct Structures.User memory"},{"typeIdentifier":"t_struct$_PostData_$2446_memory_ptr","typeString":"struct Structures.PostData memory"}],"expression":{"id":3189,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2016:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2027:4:19","memberName":"Post","nodeType":"MemberAccess","referencedDeclaration":2436,"src":"2016:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Post_$2436_storage_ptr_$","typeString":"type(struct Structures.Post storage pointer)"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2046:7:19","2113:8:19"],"names":["creator","postdata"],"nodeType":"FunctionCall","src":"2016:912:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post memory"}},"nodeType":"VariableDeclarationStatement","src":"1983:945:19"},{"expression":{"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3225,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2980:4:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3226,"name":"newPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"2987:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post memory"}},"src":"2980:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3228,"nodeType":"ExpressionStatement","src":"2980:14:19"},{"expression":{"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3004:20:19","subExpression":{"expression":{"id":3229,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3004:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3231,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3013:9:19","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":2393,"src":"3004:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3233,"nodeType":"ExpressionStatement","src":"3004:20:19"},{"expression":{"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3234,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3035:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":3236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3054:13:19","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"3035:32:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3237,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"3070:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3035:42:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3239,"nodeType":"ExpressionStatement","src":"3035:42:19"},{"expression":{"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3240,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3087:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":3242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3106:15:19","memberName":"sellerTwitterId","nodeType":"MemberAccess","referencedDeclaration":2473,"src":"3087:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3243,"name":"twitterId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"3124:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3087:46:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3245,"nodeType":"ExpressionStatement","src":"3087:46:19"},{"expression":{"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3246,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3143:18:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":3248,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3162:16:19","memberName":"sellerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2475,"src":"3143:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3249,"name":"telegramId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"3181:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3143:48:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3251,"nodeType":"ExpressionStatement","src":"3143:48:19"},{"eventCall":{"arguments":[{"id":3253,"name":"newPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"3215:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post memory"}],"id":3252,"name":"Created","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"3207:7:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3207:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3255,"nodeType":"EmitStatement","src":"3202:21:19"},{"expression":{"id":3256,"name":"newPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"3241:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post memory"}},"functionReturnParameters":3102,"id":3257,"nodeType":"Return","src":"3234:14:19"}]},"functionSelector":"402e3e0b","id":3259,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3097,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"852:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":3098,"kind":"modifierInvocation","modifierName":{"id":3096,"name":"onlyValidTokenID","nameLocations":["835:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"835:16:19"},"nodeType":"ModifierInvocation","src":"835:25:19"}],"name":"createPost","nameLocation":"480:10:19","nodeType":"FunctionDefinition","parameters":{"id":3095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3075,"mutability":"mutable","name":"encryptedHash","nameLocation":"513:13:19","nodeType":"VariableDeclaration","scope":3259,"src":"500:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3074,"name":"bytes","nodeType":"ElementaryTypeName","src":"500:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3078,"mutability":"mutable","name":"postType","nameLocation":"556:8:19","nodeType":"VariableDeclaration","scope":3259,"src":"536:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"},"typeName":{"id":3077,"nodeType":"UserDefinedTypeName","pathNode":{"id":3076,"name":"Structures.PostType","nameLocations":["536:10:19","547:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2383,"src":"536:19:19"},"referencedDeclaration":2383,"src":"536:19:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"}},"visibility":"internal"},{"constant":false,"id":3081,"mutability":"mutable","name":"postDuration","nameLocation":"598:12:19","nodeType":"VariableDeclaration","scope":3259,"src":"574:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"},"typeName":{"id":3080,"nodeType":"UserDefinedTypeName","pathNode":{"id":3079,"name":"Structures.PostDuration","nameLocations":["574:10:19","585:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2389,"src":"574:23:19"},"referencedDeclaration":2389,"src":"574:23:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}},"visibility":"internal"},{"constant":false,"id":3083,"mutability":"mutable","name":"payment","nameLocation":"628:7:19","nodeType":"VariableDeclaration","scope":3259,"src":"620:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3082,"name":"uint256","nodeType":"ElementaryTypeName","src":"620:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3085,"mutability":"mutable","name":"stakeAmount","nameLocation":"653:11:19","nodeType":"VariableDeclaration","scope":3259,"src":"645:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3084,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3088,"mutability":"mutable","name":"tokenId","nameLocation":"692:7:19","nodeType":"VariableDeclaration","scope":3259,"src":"674:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3087,"nodeType":"UserDefinedTypeName","pathNode":{"id":3086,"name":"Structures.Tokens","nameLocations":["674:10:19","685:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"674:17:19"},"referencedDeclaration":2377,"src":"674:17:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3090,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"722:20:19","nodeType":"VariableDeclaration","scope":3259,"src":"709:33:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3089,"name":"bytes","nodeType":"ElementaryTypeName","src":"709:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3092,"mutability":"mutable","name":"_to","nameLocation":"760:3:19","nodeType":"VariableDeclaration","scope":3259,"src":"752:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3091,"name":"address","nodeType":"ElementaryTypeName","src":"752:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3094,"mutability":"mutable","name":"_nonce","nameLocation":"781:6:19","nodeType":"VariableDeclaration","scope":3259,"src":"773:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"773:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"490:303:19"},"returnParameters":{"id":3102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3259,"src":"878:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3100,"nodeType":"UserDefinedTypeName","pathNode":{"id":3099,"name":"Structures.Post","nameLocations":["878:10:19","889:4:19"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"878:15:19"},"referencedDeclaration":2436,"src":"878:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"877:24:19"},"scope":3260,"src":"471:2784:19","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3261,"src":"427:2830:19","usedErrors":[]}],"src":"377:2881:19"},"id":19},"contracts/modules/Data.sol":{"ast":{"absolutePath":"contracts/modules/Data.sol","exportedSymbols":{"Data":[3740],"ECDSA":[672],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"Math":[1538],"SignedMath":[1955],"Strings":[306],"Structures":[2547]},"id":3741,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3262,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"33:23:20"},{"absolutePath":"contracts/interfaces/IMecenateFeed.sol","file":"../interfaces/IMecenateFeed.sol","id":3263,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3741,"sourceUnit":2224,"src":"60:41:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","file":"../interfaces/IMecenateUsers.sol","id":3264,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3741,"sourceUnit":2343,"src":"103:42:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","file":"../interfaces/IMecenateTreasury.sol","id":3265,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3741,"sourceUnit":2305,"src":"147:45:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","file":"../interfaces/IMecenateFeedFactory.sol","id":3266,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3741,"sourceUnit":2292,"src":"194:48:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateVerifier.sol","file":"../interfaces/IMecenateVerifier.sol","id":3267,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3741,"sourceUnit":2363,"src":"244:45:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":3268,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3741,"sourceUnit":673,"src":"323:62:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Data","contractDependencies":[],"contractKind":"contract","documentation":{"id":3269,"nodeType":"StructuredDocumentation","src":"389:129:20","text":" @title Data\n @dev This contract stores data related to Mecenate posts and provides functions to interact with it."},"fullyImplemented":true,"id":3740,"linearizedBaseContracts":[3740],"name":"Data","nameLocation":"529:4:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3272,"mutability":"constant","name":"ZEROHASH","nameLocation":"565:8:20","nodeType":"VariableDeclaration","scope":3740,"src":"541:41:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3270,"name":"bytes","nodeType":"ElementaryTypeName","src":"541:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"30783030","id":3271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"576:6:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4","typeString":"literal_string \"0x00\""},"value":"0x00"},"visibility":"internal"},{"constant":false,"functionSelector":"8da5cb5b","id":3274,"mutability":"mutable","name":"owner","nameLocation":"606:5:20","nodeType":"VariableDeclaration","scope":3740,"src":"591:20:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"591:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"05c1f502","id":3277,"mutability":"mutable","name":"post","nameLocation":"643:4:20","nodeType":"VariableDeclaration","scope":3740,"src":"620:27:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post"},"typeName":{"id":3276,"nodeType":"UserDefinedTypeName","pathNode":{"id":3275,"name":"Structures.Post","nameLocations":["620:10:20","631:4:20"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"620:15:20"},"referencedDeclaration":2436,"src":"620:15:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"public"},{"constant":false,"id":3280,"mutability":"mutable","name":"postSettingPrivate","nameLocation":"693:18:20","nodeType":"VariableDeclaration","scope":3740,"src":"654:57:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate"},"typeName":{"id":3279,"nodeType":"UserDefinedTypeName","pathNode":{"id":3278,"name":"Structures.PostSettingPrivate","nameLocations":["654:10:20","665:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":2482,"src":"654:29:20"},"referencedDeclaration":2482,"src":"654:29:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage_ptr","typeString":"struct Structures.PostSettingPrivate"}},"visibility":"internal"},{"constant":false,"id":3283,"mutability":"mutable","name":"settings","nameLocation":"751:8:20","nodeType":"VariableDeclaration","scope":3740,"src":"718:41:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings"},"typeName":{"id":3282,"nodeType":"UserDefinedTypeName","pathNode":{"id":3281,"name":"Structures.FeedSettings","nameLocations":["718:10:20","729:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":2412,"src":"718:23:20"},"referencedDeclaration":2412,"src":"718:23:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage_ptr","typeString":"struct Structures.FeedSettings"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"postDurationToDays","nameLocation":"803:18:20","nodeType":"VariableDeclaration","scope":3740,"src":"768:53:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"},"typeName":{"id":3286,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3284,"name":"uint8","nodeType":"ElementaryTypeName","src":"776:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Mapping","src":"768:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3285,"name":"uint256","nodeType":"ElementaryTypeName","src":"785:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":3291,"mutability":"mutable","name":"validStatuses","nameLocation":"860:13:20","nodeType":"VariableDeclaration","scope":3740,"src":"828:45:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"},"typeName":{"id":3290,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3288,"name":"uint8","nodeType":"ElementaryTypeName","src":"836:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Mapping","src":"828:22:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3289,"name":"bool","nodeType":"ElementaryTypeName","src":"845:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"body":{"id":3303,"nodeType":"Block","src":"917:78:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3295,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"936:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:6:20","memberName":"sender","nodeType":"MemberAccess","src":"936:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3297,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"950:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"959:13:20","memberName":"vaultContract","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"950:22:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"936:36:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f4e4c595f5641554c54","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"974:12:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_33e6d19c1f8b8d25f46d7432bd2519b15a4fd2e13dcb93c36a2b15b1b22409b8","typeString":"literal_string \"ONLY_VAULT\""},"value":"ONLY_VAULT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_33e6d19c1f8b8d25f46d7432bd2519b15a4fd2e13dcb93c36a2b15b1b22409b8","typeString":"literal_string \"ONLY_VAULT\""}],"id":3294,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"928:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:59:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3302,"nodeType":"ExpressionStatement","src":"928:59:20"}]},"id":3304,"implemented":true,"kind":"function","modifiers":[],"name":"onlyVault","nameLocation":"891:9:20","nodeType":"FunctionDefinition","parameters":{"id":3292,"nodeType":"ParameterList","parameters":[],"src":"900:2:20"},"returnParameters":{"id":3293,"nodeType":"ParameterList","parameters":[],"src":"917:0:20"},"scope":3740,"src":"882:113:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3466,"nodeType":"Block","src":"1198:1159:20","statements":[{"expression":{"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3317,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1209:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3319,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1218:15:20","memberName":"punishmentRatio","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"1209:24:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"313030303030303030303030303030303030","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:18:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"100000000000000000"},"src":"1209:45:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3322,"nodeType":"ExpressionStatement","src":"1209:45:20"},{"expression":{"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3323,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1283:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3325,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1292:9:20","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":2393,"src":"1283:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1304:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1283:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3328,"nodeType":"ExpressionStatement","src":"1283:22:20"},{"expression":{"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3329,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1345:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1354:19:20","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"1345:28:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3332,"name":"_usersModuleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"1376:20:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1345:51:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3334,"nodeType":"ExpressionStatement","src":"1345:51:20"},{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3335,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1407:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1416:16:20","memberName":"verifierContract","nodeType":"MemberAccess","referencedDeclaration":2399,"src":"1407:25:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3338,"name":"_verifierContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"1435:17:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1407:45:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3340,"nodeType":"ExpressionStatement","src":"1407:45:20"},{"expression":{"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3341,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1463:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1472:13:20","memberName":"vaultContract","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"1463:22:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3344,"name":"_vaultContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"1488:14:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1463:39:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3346,"nodeType":"ExpressionStatement","src":"1463:39:20"},{"expression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3347,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1513:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3349,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1522:15:20","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"1513:24:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3350,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1540:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1544:6:20","memberName":"sender","nodeType":"MemberAccess","src":"1540:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1513:37:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3353,"nodeType":"ExpressionStatement","src":"1513:37:20"},{"expression":{"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3354,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1561:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1570:6:20","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"1561:15:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3358,"name":"_factoryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"1600:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3357,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"1579:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1618:6:20","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2278,"src":"1579:45:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:47:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1561:65:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3363,"nodeType":"ExpressionStatement","src":"1561:65:20"},{"expression":{"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3364,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1637:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1646:13:20","memberName":"encodedSymKey","nodeType":"MemberAccess","referencedDeclaration":2405,"src":"1637:22:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3367,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"1662:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1637:33:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3369,"nodeType":"ExpressionStatement","src":"1637:33:20"},{"expression":{"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3370,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1681:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3372,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1690:19:20","memberName":"lastMessageForBuyer","nodeType":"MemberAccess","referencedDeclaration":2407,"src":"1681:28:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3373,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"1712:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1681:39:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3375,"nodeType":"ExpressionStatement","src":"1681:39:20"},{"expression":{"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3376,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1731:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1740:20:20","memberName":"lastMessageForSeller","nodeType":"MemberAccess","referencedDeclaration":2409,"src":"1731:29:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3379,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"1763:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1731:40:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3381,"nodeType":"ExpressionStatement","src":"1731:40:20"},{"expression":{"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":3382,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1782:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1787:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1782:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3387,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1796:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1782:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1805:6:20","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"1782:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3389,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1814:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1825:10:20","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1814:21:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":3391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1836:7:20","memberName":"Waiting","nodeType":"MemberAccess","referencedDeclaration":2365,"src":"1814:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"1782:61:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":3393,"nodeType":"ExpressionStatement","src":"1782:61:20"},{"expression":{"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3394,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1856:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3401,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3397,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1881:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1892:12:20","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2389,"src":"1881:23:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2389_$","typeString":"type(enum Structures.PostDuration)"}},"id":3399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1905:6:20","memberName":"OneDay","nodeType":"MemberAccess","referencedDeclaration":2384,"src":"1881:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}],"id":3396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1875:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3395,"name":"uint8","nodeType":"ElementaryTypeName","src":"1875:5:20","typeDescriptions":{}}},"id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1875:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1856:57:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1916:6:20","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"1856:66:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3404,"nodeType":"ExpressionStatement","src":"1856:66:20"},{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3405,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1933:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3412,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3408,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1958:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1969:12:20","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2389,"src":"1958:23:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2389_$","typeString":"type(enum Structures.PostDuration)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1982:9:20","memberName":"ThreeDays","nodeType":"MemberAccess","referencedDeclaration":2385,"src":"1958:33:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}],"id":3407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1952:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3406,"name":"uint8","nodeType":"ElementaryTypeName","src":"1952:5:20","typeDescriptions":{}}},"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1952:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1933:60:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"33","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1996:6:20","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_259200_by_1","typeString":"int_const 259200"},"value":"3"},"src":"1933:69:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"1933:69:20"},{"expression":{"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3416,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"2013:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3423,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3419,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2038:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2049:12:20","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2389,"src":"2038:23:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2389_$","typeString":"type(enum Structures.PostDuration)"}},"id":3421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2062:7:20","memberName":"OneWeek","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"2038:31:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}],"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2032:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3417,"name":"uint8","nodeType":"ElementaryTypeName","src":"2032:5:20","typeDescriptions":{}}},"id":3422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2032:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2013:58:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"37","id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2074:6:20","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_604800_by_1","typeString":"int_const 604800"},"value":"7"},"src":"2013:67:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3426,"nodeType":"ExpressionStatement","src":"2013:67:20"},{"expression":{"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3427,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"2091:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3434,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3430,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2116:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2127:12:20","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2389,"src":"2116:23:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2389_$","typeString":"type(enum Structures.PostDuration)"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2140:8:20","memberName":"TwoWeeks","nodeType":"MemberAccess","referencedDeclaration":2387,"src":"2116:32:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}],"id":3429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2110:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3428,"name":"uint8","nodeType":"ElementaryTypeName","src":"2110:5:20","typeDescriptions":{}}},"id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2110:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2091:59:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3134","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2153:7:20","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_1209600_by_1","typeString":"int_const 1209600"},"value":"14"},"src":"2091:69:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3437,"nodeType":"ExpressionStatement","src":"2091:69:20"},{"expression":{"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3438,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"2171:18:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3445,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3441,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2196:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2207:12:20","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2389,"src":"2196:23:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2389_$","typeString":"type(enum Structures.PostDuration)"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2220:8:20","memberName":"OneMonth","nodeType":"MemberAccess","referencedDeclaration":2388,"src":"2196:32:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2389","typeString":"enum Structures.PostDuration"}],"id":3440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2190:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3439,"name":"uint8","nodeType":"ElementaryTypeName","src":"2190:5:20","typeDescriptions":{}}},"id":3444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2190:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2171:59:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3330","id":3446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2233:7:20","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"src":"2171:69:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3448,"nodeType":"ExpressionStatement","src":"2171:69:20"},{"expression":{"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3449,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"2251:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3456,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3452,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2271:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2282:10:20","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2271:21:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":3454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2293:7:20","memberName":"Waiting","nodeType":"MemberAccess","referencedDeclaration":2365,"src":"2271:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":3451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2265:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3450,"name":"uint8","nodeType":"ElementaryTypeName","src":"2265:5:20","typeDescriptions":{}}},"id":3455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2265:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2251:51:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2305:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2251:58:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3459,"nodeType":"ExpressionStatement","src":"2251:58:20"},{"expression":{"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3460,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2322:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3462,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2331:7:20","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":2411,"src":"2322:16:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3463,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"2341:8:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2322:27:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3465,"nodeType":"ExpressionStatement","src":"2322:27:20"}]},"id":3467,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"_usersModuleContract","nameLocation":"1033:20:20","nodeType":"VariableDeclaration","scope":3467,"src":"1025:28:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3305,"name":"address","nodeType":"ElementaryTypeName","src":"1025:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3308,"mutability":"mutable","name":"_verifierContract","nameLocation":"1072:17:20","nodeType":"VariableDeclaration","scope":3467,"src":"1064:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3307,"name":"address","nodeType":"ElementaryTypeName","src":"1064:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"_vaultContract","nameLocation":"1108:14:20","nodeType":"VariableDeclaration","scope":3467,"src":"1100:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3309,"name":"address","nodeType":"ElementaryTypeName","src":"1100:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3312,"mutability":"mutable","name":"_factoryContract","nameLocation":"1141:16:20","nodeType":"VariableDeclaration","scope":3467,"src":"1133:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3311,"name":"address","nodeType":"ElementaryTypeName","src":"1133:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3314,"mutability":"mutable","name":"_version","nameLocation":"1182:8:20","nodeType":"VariableDeclaration","scope":3467,"src":"1168:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3313,"name":"string","nodeType":"ElementaryTypeName","src":"1168:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1014:183:20"},"returnParameters":{"id":3316,"nodeType":"ParameterList","parameters":[],"src":"1198:0:20"},"scope":3740,"src":"1003:1354:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3475,"nodeType":"Block","src":"2422:42:20","statements":[{"expression":{"expression":{"id":3472,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2440:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2449:7:20","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":2411,"src":"2440:16:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3471,"id":3474,"nodeType":"Return","src":"2433:23:20"}]},"functionSelector":"54fd4d50","id":3476,"implemented":true,"kind":"function","modifiers":[],"name":"version","nameLocation":"2374:7:20","nodeType":"FunctionDefinition","parameters":{"id":3468,"nodeType":"ParameterList","parameters":[],"src":"2381:2:20"},"returnParameters":{"id":3471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3476,"src":"2407:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3469,"name":"string","nodeType":"ElementaryTypeName","src":"2407:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2406:15:20"},"scope":3740,"src":"2365:99:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3513,"nodeType":"Block","src":"2538:181:20","statements":[{"expression":{"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3482,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"2549:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3490,"indexExpression":{"arguments":[{"expression":{"expression":{"expression":{"id":3485,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2569:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2574:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2569:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2583:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2569:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2592:6:20","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"2569:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":3484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2563:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3483,"name":"uint8","nodeType":"ElementaryTypeName","src":"2563:5:20","typeDescriptions":{}}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2549:51:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2603:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2549:59:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3493,"nodeType":"ExpressionStatement","src":"2549:59:20"},{"expression":{"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3494,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"2619:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3499,"indexExpression":{"arguments":[{"id":3497,"name":"_newStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2639:10:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":3496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2633:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3495,"name":"uint8","nodeType":"ElementaryTypeName","src":"2633:5:20","typeDescriptions":{}}},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2619:32:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2654:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2619:39:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3502,"nodeType":"ExpressionStatement","src":"2619:39:20"},{"expression":{"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":3503,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2669:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3507,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2674:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2669:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2683:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2669:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2692:6:20","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"2669:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3510,"name":"_newStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2701:10:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2669:42:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":3512,"nodeType":"ExpressionStatement","src":"2669:42:20"}]},"id":3514,"implemented":true,"kind":"function","modifiers":[],"name":"_changeStatus","nameLocation":"2481:13:20","nodeType":"FunctionDefinition","parameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"_newStatus","nameLocation":"2517:10:20","nodeType":"VariableDeclaration","scope":3514,"src":"2495:32:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":3478,"nodeType":"UserDefinedTypeName","pathNode":{"id":3477,"name":"Structures.PostStatus","nameLocations":["2495:10:20","2506:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"2495:21:20"},"referencedDeclaration":2373,"src":"2495:21:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"2494:34:20"},"returnParameters":{"id":3481,"nodeType":"ParameterList","parameters":[],"src":"2538:0:20"},"scope":3740,"src":"2472:247:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3574,"nodeType":"Block","src":"2916:528:20","statements":[{"assignments":[3532,3534,3536,3538],"declarations":[{"constant":false,"id":3532,"mutability":"mutable","name":"vaultId","nameLocation":"2955:7:20","nodeType":"VariableDeclaration","scope":3574,"src":"2942:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3531,"name":"bytes","nodeType":"ElementaryTypeName","src":"2942:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3534,"mutability":"mutable","name":"twitterId","nameLocation":"2985:9:20","nodeType":"VariableDeclaration","scope":3574,"src":"2977:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3533,"name":"uint256","nodeType":"ElementaryTypeName","src":"2977:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3536,"mutability":"mutable","name":"telegramId","nameLocation":"3017:10:20","nodeType":"VariableDeclaration","scope":3574,"src":"3009:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3535,"name":"uint256","nodeType":"ElementaryTypeName","src":"3009:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3538,"mutability":"mutable","name":"signedMessage","nameLocation":"3055:13:20","nodeType":"VariableDeclaration","scope":3574,"src":"3042:26:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3537,"name":"bytes","nodeType":"ElementaryTypeName","src":"3042:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3548,"initialValue":{"arguments":[{"id":3544,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"3157:20:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3545,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"3196:3:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3546,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"3218:6:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[{"expression":{"id":3540,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3100:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3109:16:20","memberName":"verifierContract","nodeType":"MemberAccess","referencedDeclaration":2399,"src":"3100:25:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3539,"name":"IMecenateVerifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"3082:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateVerifier_$2362_$","typeString":"type(contract IMecenateVerifier)"}},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3082:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateVerifier_$2362","typeString":"contract IMecenateVerifier"}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3127:11:20","memberName":"sismoVerify","nodeType":"MemberAccess","referencedDeclaration":2361,"src":"3082:56:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view external returns (bytes memory,uint256,uint256,bytes memory)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3082:157:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2927:312:20"},{"assignments":[null,3550],"declarations":[null,{"constant":false,"id":3550,"mutability":"mutable","name":"nonce","nameLocation":"3263:5:20","nodeType":"VariableDeclaration","scope":3574,"src":"3255:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3255:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3560,"initialValue":{"arguments":[{"id":3553,"name":"signedMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"3283:13:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3299:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3554,"name":"address","nodeType":"ElementaryTypeName","src":"3299:7:20","typeDescriptions":{}}},{"id":3557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3308:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3308:7:20","typeDescriptions":{}}}],"id":3558,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3298:18:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(address),type(bytes32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(address),type(bytes32))"}],"expression":{"id":3551,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3272:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3276:6:20","memberName":"decode","nodeType":"MemberAccess","src":"3272:10:20","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3272:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_bytes32_$","typeString":"tuple(address payable,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3252:65:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3562,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"3338:6:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3563,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"3348:5:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3338:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f4e4f4e4345","id":3565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3355:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_49b8741b862d67661aef7a0ca12728211cd2d5b89cd654e5f5ae72e3204059de","typeString":"literal_string \"WRONG_NONCE\""},"value":"WRONG_NONCE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_49b8741b862d67661aef7a0ca12728211cd2d5b89cd654e5f5ae72e3204059de","typeString":"literal_string \"WRONG_NONCE\""}],"id":3561,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3330:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3330:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3567,"nodeType":"ExpressionStatement","src":"3330:39:20"},{"expression":{"components":[{"id":3568,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"3390:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3569,"name":"twitterId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"3399:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3570,"name":"telegramId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"3410:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3571,"name":"signedMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"3422:13:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":3572,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3389:47:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"functionReturnParameters":3530,"id":3573,"nodeType":"Return","src":"3382:54:20"}]},"id":3575,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyNonce","nameLocation":"2736:12:20","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3516,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"2772:20:20","nodeType":"VariableDeclaration","scope":3575,"src":"2759:33:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3515,"name":"bytes","nodeType":"ElementaryTypeName","src":"2759:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3518,"mutability":"mutable","name":"_to","nameLocation":"2811:3:20","nodeType":"VariableDeclaration","scope":3575,"src":"2803:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3517,"name":"address","nodeType":"ElementaryTypeName","src":"2803:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3520,"mutability":"mutable","name":"_nonce","nameLocation":"2833:6:20","nodeType":"VariableDeclaration","scope":3575,"src":"2825:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2825:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2748:98:20"},"returnParameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3575,"src":"2870:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3522,"name":"bytes","nodeType":"ElementaryTypeName","src":"2870:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3575,"src":"2884:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2884:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3575,"src":"2893:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"2893:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3575,"src":"2902:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3528,"name":"bytes","nodeType":"ElementaryTypeName","src":"2902:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2869:46:20"},"scope":3740,"src":"2727:717:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3616,"nodeType":"Block","src":"3640:398:20","statements":[{"assignments":[3593,3595,3597,3599],"declarations":[{"constant":false,"id":3593,"mutability":"mutable","name":"vaultId","nameLocation":"3679:7:20","nodeType":"VariableDeclaration","scope":3616,"src":"3666:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3592,"name":"bytes","nodeType":"ElementaryTypeName","src":"3666:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3595,"mutability":"mutable","name":"twitterId","nameLocation":"3709:9:20","nodeType":"VariableDeclaration","scope":3616,"src":"3701:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3594,"name":"uint256","nodeType":"ElementaryTypeName","src":"3701:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3597,"mutability":"mutable","name":"telegramId","nameLocation":"3741:10:20","nodeType":"VariableDeclaration","scope":3616,"src":"3733:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"3733:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3599,"mutability":"mutable","name":"signedMessage","nameLocation":"3779:13:20","nodeType":"VariableDeclaration","scope":3616,"src":"3766:26:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3598,"name":"bytes","nodeType":"ElementaryTypeName","src":"3766:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3609,"initialValue":{"arguments":[{"id":3605,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3577,"src":"3881:20:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3606,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"3920:3:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3607,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"3942:6:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[{"expression":{"id":3601,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3824:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3602,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3833:16:20","memberName":"verifierContract","nodeType":"MemberAccess","referencedDeclaration":2399,"src":"3824:25:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3600,"name":"IMecenateVerifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"3806:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateVerifier_$2362_$","typeString":"type(contract IMecenateVerifier)"}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateVerifier_$2362","typeString":"contract IMecenateVerifier"}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3851:11:20","memberName":"sismoVerify","nodeType":"MemberAccess","referencedDeclaration":2361,"src":"3806:56:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view external returns (bytes memory,uint256,uint256,bytes memory)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:157:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3651:312:20"},{"expression":{"components":[{"id":3610,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"3984:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3611,"name":"twitterId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"3993:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3612,"name":"telegramId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"4004:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3613,"name":"signedMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"4016:13:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":3614,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3983:47:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"functionReturnParameters":3591,"id":3615,"nodeType":"Return","src":"3976:54:20"}]},"id":3617,"implemented":true,"kind":"function","modifiers":[],"name":"sismoVerify","nameLocation":"3461:11:20","nodeType":"FunctionDefinition","parameters":{"id":3582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3577,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"3496:20:20","nodeType":"VariableDeclaration","scope":3617,"src":"3483:33:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3576,"name":"bytes","nodeType":"ElementaryTypeName","src":"3483:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3579,"mutability":"mutable","name":"_to","nameLocation":"3535:3:20","nodeType":"VariableDeclaration","scope":3617,"src":"3527:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3578,"name":"address","nodeType":"ElementaryTypeName","src":"3527:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3581,"mutability":"mutable","name":"_nonce","nameLocation":"3557:6:20","nodeType":"VariableDeclaration","scope":3617,"src":"3549:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3549:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3472:98:20"},"returnParameters":{"id":3591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3617,"src":"3594:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3583,"name":"bytes","nodeType":"ElementaryTypeName","src":"3594:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3617,"src":"3608:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3585,"name":"uint256","nodeType":"ElementaryTypeName","src":"3608:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3617,"src":"3617:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3587,"name":"uint256","nodeType":"ElementaryTypeName","src":"3617:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3617,"src":"3626:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3589,"name":"bytes","nodeType":"ElementaryTypeName","src":"3626:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3593:46:20"},"scope":3740,"src":"3452:586:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3628,"nodeType":"Block","src":"4113:55:20","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3623,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4131:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3624,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4136:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4131:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4145:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4131:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3626,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4154:6:20","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"4131:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"functionReturnParameters":3622,"id":3627,"nodeType":"Return","src":"4124:36:20"}]},"functionSelector":"4e69d560","id":3629,"implemented":true,"kind":"function","modifiers":[],"name":"getStatus","nameLocation":"4055:9:20","nodeType":"FunctionDefinition","parameters":{"id":3618,"nodeType":"ParameterList","parameters":[],"src":"4064:2:20"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3629,"src":"4090:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":3620,"nodeType":"UserDefinedTypeName","pathNode":{"id":3619,"name":"Structures.PostStatus","nameLocations":["4090:10:20","4101:10:20"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"4090:21:20"},"referencedDeclaration":2373,"src":"4090:21:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"4089:23:20"},"scope":3740,"src":"4046:122:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3640,"nodeType":"Block","src":"4240:56:20","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3635,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4258:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4263:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4258:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3637,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4272:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4258:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4281:7:20","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"4258:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"functionReturnParameters":3634,"id":3639,"nodeType":"Return","src":"4251:37:20"}]},"functionSelector":"010a38f5","id":3641,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"4185:10:20","nodeType":"FunctionDefinition","parameters":{"id":3630,"nodeType":"ParameterList","parameters":[],"src":"4195:2:20"},"returnParameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3641,"src":"4221:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3632,"nodeType":"UserDefinedTypeName","pathNode":{"id":3631,"name":"Structures.Tokens","nameLocations":["4221:10:20","4232:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4221:17:20"},"referencedDeclaration":2377,"src":"4221:17:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"4220:19:20"},"scope":3740,"src":"4176:120:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3686,"nodeType":"Block","src":"4363:380:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":3646,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4378:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4383:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4378:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4392:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4378:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4401:7:20","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"4378:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3650,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"4412:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4423:6:20","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"4412:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4430:4:20","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"4412:22:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"4378:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":3662,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4538:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4543:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4538:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3664,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4552:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4538:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3665,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4561:7:20","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"4538:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3666,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"4572:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4583:6:20","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"4572:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4590:3:20","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"4572:21:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"4538:55:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3683,"nodeType":"Block","src":"4692:44:20","statements":[{"expression":{"arguments":[{"hexValue":"30","id":3680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4722:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4714:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3678,"name":"address","nodeType":"ElementaryTypeName","src":"4714:7:20","typeDescriptions":{}}},"id":3681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4714:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3645,"id":3682,"nodeType":"Return","src":"4707:17:20"}]},"id":3684,"nodeType":"IfStatement","src":"4534:202:20","trueBody":{"id":3677,"nodeType":"Block","src":"4595:91:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3671,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"4638:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4647:15:20","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"4638:24:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3670,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"4617:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4664:8:20","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"4617:55:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3645,"id":3676,"nodeType":"Return","src":"4610:64:20"}]}},"id":3685,"nodeType":"IfStatement","src":"4374:362:20","trueBody":{"id":3661,"nodeType":"Block","src":"4436:92:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3655,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"4479:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4488:15:20","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"4479:24:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3654,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"4458:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4458:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4505:9:20","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2263,"src":"4458:56:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4458:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3645,"id":3660,"nodeType":"Return","src":"4451:65:20"}]}}]},"functionSelector":"5ad4e170","id":3687,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenIdAddress","nameLocation":"4313:17:20","nodeType":"FunctionDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[],"src":"4330:2:20"},"returnParameters":{"id":3645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3644,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3687,"src":"4354:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3643,"name":"address","nodeType":"ElementaryTypeName","src":"4354:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4353:9:20"},"scope":3740,"src":"4304:439:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3703,"nodeType":"Block","src":"4812:83:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3694,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"4831:6:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":3695,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4841:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4846:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4841:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4855:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4841:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4864:7:20","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"4841:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"4831:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":3700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4873:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":3693,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4823:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:64:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3702,"nodeType":"ExpressionStatement","src":"4823:64:20"}]},"id":3704,"implemented":true,"kind":"function","modifiers":[],"name":"_checkToken","nameLocation":"4760:11:20","nodeType":"FunctionDefinition","parameters":{"id":3691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3690,"mutability":"mutable","name":"_token","nameLocation":"4790:6:20","nodeType":"VariableDeclaration","scope":3704,"src":"4772:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3689,"nodeType":"UserDefinedTypeName","pathNode":{"id":3688,"name":"Structures.Tokens","nameLocations":["4772:10:20","4783:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4772:17:20"},"referencedDeclaration":2377,"src":"4772:17:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"4771:26:20"},"returnParameters":{"id":3692,"nodeType":"ParameterList","parameters":[],"src":"4812:0:20"},"scope":3740,"src":"4751:144:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3714,"nodeType":"Block","src":"4966:54:20","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3709,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4984:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4989:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4984:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4998:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"4984:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":3712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5005:7:20","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"4984:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3708,"id":3713,"nodeType":"Return","src":"4977:35:20"}]},"functionSelector":"d24e0c87","id":3715,"implemented":true,"kind":"function","modifiers":[],"name":"getPaymentRequested","nameLocation":"4912:19:20","nodeType":"FunctionDefinition","parameters":{"id":3705,"nodeType":"ParameterList","parameters":[],"src":"4931:2:20"},"returnParameters":{"id":3708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3715,"src":"4957:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3706,"name":"uint256","nodeType":"ElementaryTypeName","src":"4957:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4956:9:20"},"scope":3740,"src":"4903:117:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3725,"nodeType":"Block","src":"5089:52:20","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3720,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"5107:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5112:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"5107:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5121:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"5107:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":3723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5128:5:20","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"5107:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3719,"id":3724,"nodeType":"Return","src":"5100:33:20"}]},"functionSelector":"faeb5e17","id":3726,"implemented":true,"kind":"function","modifiers":[],"name":"getStakeRequested","nameLocation":"5037:17:20","nodeType":"FunctionDefinition","parameters":{"id":3716,"nodeType":"ParameterList","parameters":[],"src":"5054:2:20"},"returnParameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3726,"src":"5080:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3717,"name":"uint256","nodeType":"ElementaryTypeName","src":"5080:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5079:9:20"},"scope":3740,"src":"5028:113:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3734,"nodeType":"Block","src":"5202:44:20","statements":[{"expression":{"expression":{"id":3731,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"5220:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5229:9:20","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":2393,"src":"5220:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3730,"id":3733,"nodeType":"Return","src":"5213:25:20"}]},"functionSelector":"17906c2e","id":3735,"implemented":true,"kind":"function","modifiers":[],"name":"postCount","nameLocation":"5158:9:20","nodeType":"FunctionDefinition","parameters":{"id":3727,"nodeType":"ParameterList","parameters":[],"src":"5167:2:20"},"returnParameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3735,"src":"5193:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3728,"name":"uint256","nodeType":"ElementaryTypeName","src":"5193:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5192:9:20"},"scope":3740,"src":"5149:97:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3738,"nodeType":"Block","src":"5281:2:20","statements":[]},"id":3739,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3736,"nodeType":"ParameterList","parameters":[],"src":"5261:2:20"},"returnParameters":{"id":3737,"nodeType":"ParameterList","parameters":[],"src":"5281:0:20"},"scope":3740,"src":"5254:29:20","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3741,"src":"520:4766:20","usedErrors":[]}],"src":"33:5255:20"},"id":20},"contracts/modules/Deposit.sol":{"ast":{"absolutePath":"contracts/modules/Deposit.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":3933,"nodeType":"SourceUnit","nodes":[{"id":3742,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:21"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":3743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3933,"sourceUnit":1851,"src":"25:57:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3744,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3933,"sourceUnit":78,"src":"84:56:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/TokenManager.sol","file":"./TokenManager.sol","id":3745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3933,"sourceUnit":6229,"src":"144:28:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Deposit","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3932,"linearizedBaseContracts":[3932],"name":"Deposit","nameLocation":"185:7:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3748,"libraryName":{"id":3746,"name":"SafeMath","nameLocations":["206:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1850,"src":"206:8:21"},"nodeType":"UsingForDirective","src":"200:27:21","typeName":{"id":3747,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":3754,"mutability":"mutable","name":"_deposit","nameLocation":"291:8:21","nodeType":"VariableDeclaration","scope":3932,"src":"235:64:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"},"typeName":{"id":3753,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3749,"name":"uint256","nodeType":"ElementaryTypeName","src":"243:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"235:47:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3752,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"262:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"254:27:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"273:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"anonymous":false,"eventSelector":"fc75911105c5435503d8ce6e41bf92051ed6da32a2077c1a8f73e1d251f64cde","id":3765,"name":"DepositIncreased","nameLocation":"314:16:21","nodeType":"EventDefinition","parameters":{"id":3764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3757,"indexed":false,"mutability":"mutable","name":"tokenID","nameLocation":"359:7:21","nodeType":"VariableDeclaration","scope":3765,"src":"341:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3756,"nodeType":"UserDefinedTypeName","pathNode":{"id":3755,"name":"Structures.Tokens","nameLocations":["341:10:21","352:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"341:17:21"},"referencedDeclaration":2377,"src":"341:17:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3759,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"385:4:21","nodeType":"VariableDeclaration","scope":3765,"src":"377:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3758,"name":"bytes32","nodeType":"ElementaryTypeName","src":"377:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3761,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"408:6:21","nodeType":"VariableDeclaration","scope":3765,"src":"400:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3760,"name":"uint256","nodeType":"ElementaryTypeName","src":"400:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3763,"indexed":false,"mutability":"mutable","name":"newDeposit","nameLocation":"433:10:21","nodeType":"VariableDeclaration","scope":3765,"src":"425:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"425:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"330:120:21"},"src":"308:143:21"},{"anonymous":false,"eventSelector":"77008762ca31a384e88f2217752cdef978440c9ad826b7b891c59a8e61281a31","id":3776,"name":"DepositDecreased","nameLocation":"463:16:21","nodeType":"EventDefinition","parameters":{"id":3775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3768,"indexed":false,"mutability":"mutable","name":"tokenID","nameLocation":"508:7:21","nodeType":"VariableDeclaration","scope":3776,"src":"490:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3767,"nodeType":"UserDefinedTypeName","pathNode":{"id":3766,"name":"Structures.Tokens","nameLocations":["490:10:21","501:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"490:17:21"},"referencedDeclaration":2377,"src":"490:17:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3770,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"534:4:21","nodeType":"VariableDeclaration","scope":3776,"src":"526:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3769,"name":"bytes32","nodeType":"ElementaryTypeName","src":"526:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3772,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"557:6:21","nodeType":"VariableDeclaration","scope":3776,"src":"549:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"549:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3774,"indexed":false,"mutability":"mutable","name":"newDeposit","nameLocation":"582:10:21","nodeType":"VariableDeclaration","scope":3776,"src":"574:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3773,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"479:120:21"},"src":"457:143:21"},{"body":{"id":3822,"nodeType":"Block","src":"768:363:21","statements":[{"expression":{"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3788,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"820:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3798,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"870:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"baseExpression":{"id":3789,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"833:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"}},"id":3794,"indexExpression":{"arguments":[{"id":3792,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"850:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":3791,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"842:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3790,"name":"uint256","nodeType":"ElementaryTypeName","src":"842:7:21","typeDescriptions":{}}},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"842:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"833:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3796,"indexExpression":{"id":3795,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"860:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"833:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"866:3:21","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1714,"src":"833:36:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"833:49:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"820:62:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3801,"nodeType":"ExpressionStatement","src":"820:62:21"},{"expression":{"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3802,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"932:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"}},"id":3808,"indexExpression":{"arguments":[{"id":3805,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"949:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":3804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"941:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3803,"name":"uint256","nodeType":"ElementaryTypeName","src":"941:7:21","typeDescriptions":{}}},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"932:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3809,"indexExpression":{"id":3807,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"959:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"932:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3810,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"967:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"932:45:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3812,"nodeType":"ExpressionStatement","src":"932:45:21"},{"eventCall":{"arguments":[{"id":3814,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"1035:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":3815,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3781,"src":"1044:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3816,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"1050:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3817,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"1063:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3813,"name":"DepositIncreased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"1018:16:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,bytes32,uint256,uint256)"}},"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1018:56:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3819,"nodeType":"EmitStatement","src":"1013:61:21"},{"expression":{"id":3820,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"1113:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3787,"id":3821,"nodeType":"Return","src":"1106:17:21"}]},"id":3823,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseDeposit","nameLocation":"617:16:21","nodeType":"FunctionDefinition","parameters":{"id":3784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3779,"mutability":"mutable","name":"tokenID","nameLocation":"662:7:21","nodeType":"VariableDeclaration","scope":3823,"src":"644:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3778,"nodeType":"UserDefinedTypeName","pathNode":{"id":3777,"name":"Structures.Tokens","nameLocations":["644:10:21","655:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"644:17:21"},"referencedDeclaration":2377,"src":"644:17:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3781,"mutability":"mutable","name":"user","nameLocation":"688:4:21","nodeType":"VariableDeclaration","scope":3823,"src":"680:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3780,"name":"bytes32","nodeType":"ElementaryTypeName","src":"680:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3783,"mutability":"mutable","name":"amountToAdd","nameLocation":"711:11:21","nodeType":"VariableDeclaration","scope":3823,"src":"703:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3782,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:96:21"},"returnParameters":{"id":3787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3786,"mutability":"mutable","name":"newDeposit","nameLocation":"756:10:21","nodeType":"VariableDeclaration","scope":3823,"src":"748:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3785,"name":"uint256","nodeType":"ElementaryTypeName","src":"748:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"747:20:21"},"scope":3932,"src":"608:523:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3880,"nodeType":"Block","src":"1302:571:21","statements":[{"assignments":[3836],"declarations":[{"constant":false,"id":3836,"mutability":"mutable","name":"currentDeposit","nameLocation":"1353:14:21","nodeType":"VariableDeclaration","scope":3880,"src":"1345:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3835,"name":"uint256","nodeType":"ElementaryTypeName","src":"1345:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3845,"initialValue":{"baseExpression":{"baseExpression":{"id":3837,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"1370:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"}},"id":3842,"indexExpression":{"arguments":[{"id":3840,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"1387:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":3839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1379:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1379:7:21","typeDescriptions":{}}},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1370:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3844,"indexExpression":{"id":3843,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"1397:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1370:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1345:57:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3847,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"1463:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3848,"name":"amountToRemove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"1481:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1463:32:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e53554646494349454e545f4445504f534954","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1497:22:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_1bafdd5d54a45209622d7b4fbaa1b4f9a95d4eac24a9200a3c11e152a8c082fa","typeString":"literal_string \"INSUFFICIENT_DEPOSIT\""},"value":"INSUFFICIENT_DEPOSIT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1bafdd5d54a45209622d7b4fbaa1b4f9a95d4eac24a9200a3c11e152a8c082fa","typeString":"literal_string \"INSUFFICIENT_DEPOSIT\""}],"id":3846,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1455:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"1455:65:21"},{"expression":{"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3853,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"1574:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3856,"name":"amountToRemove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"1606:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3854,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"1587:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1602:3:21","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1729,"src":"1587:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1574:47:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3859,"nodeType":"ExpressionStatement","src":"1574:47:21"},{"expression":{"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3860,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"1671:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"}},"id":3866,"indexExpression":{"arguments":[{"id":3863,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"1688:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":3862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1680:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1680:7:21","typeDescriptions":{}}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1680:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1671:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3867,"indexExpression":{"id":3865,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"1698:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1671:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3868,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"1706:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1671:45:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3870,"nodeType":"ExpressionStatement","src":"1671:45:21"},{"eventCall":{"arguments":[{"id":3872,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"1774:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":3873,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"1783:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3874,"name":"amountToRemove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"1789:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3875,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"1805:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3871,"name":"DepositDecreased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"1757:16:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,bytes32,uint256,uint256)"}},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:59:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3877,"nodeType":"EmitStatement","src":"1752:64:21"},{"expression":{"id":3878,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"1855:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3834,"id":3879,"nodeType":"Return","src":"1848:17:21"}]},"id":3881,"implemented":true,"kind":"function","modifiers":[],"name":"_decreaseDeposit","nameLocation":"1148:16:21","nodeType":"FunctionDefinition","parameters":{"id":3831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3826,"mutability":"mutable","name":"tokenID","nameLocation":"1193:7:21","nodeType":"VariableDeclaration","scope":3881,"src":"1175:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3825,"nodeType":"UserDefinedTypeName","pathNode":{"id":3824,"name":"Structures.Tokens","nameLocations":["1175:10:21","1186:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1175:17:21"},"referencedDeclaration":2377,"src":"1175:17:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3828,"mutability":"mutable","name":"user","nameLocation":"1219:4:21","nodeType":"VariableDeclaration","scope":3881,"src":"1211:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1211:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3830,"mutability":"mutable","name":"amountToRemove","nameLocation":"1242:14:21","nodeType":"VariableDeclaration","scope":3881,"src":"1234:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1164:99:21"},"returnParameters":{"id":3834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3833,"mutability":"mutable","name":"newDeposit","nameLocation":"1290:10:21","nodeType":"VariableDeclaration","scope":3881,"src":"1282:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1282:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1281:20:21"},"scope":3932,"src":"1139:734:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3910,"nodeType":"Block","src":"2011:248:21","statements":[{"assignments":[3892],"declarations":[{"constant":false,"id":3892,"mutability":"mutable","name":"currentDeposit","nameLocation":"2062:14:21","nodeType":"VariableDeclaration","scope":3910,"src":"2054:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3891,"name":"uint256","nodeType":"ElementaryTypeName","src":"2054:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3901,"initialValue":{"baseExpression":{"baseExpression":{"id":3893,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"2079:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"}},"id":3898,"indexExpression":{"arguments":[{"id":3896,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"2096:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":3895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2088:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3894,"name":"uint256","nodeType":"ElementaryTypeName","src":"2088:7:21","typeDescriptions":{}}},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2088:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2079:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3900,"indexExpression":{"id":3899,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"2106:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2079:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2054:57:21"},{"expression":{"arguments":[{"id":3903,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"2168:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":3904,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"2177:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3905,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"2183:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3902,"name":"_decreaseDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"2151:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2151:47:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3907,"nodeType":"ExpressionStatement","src":"2151:47:21"},{"expression":{"id":3908,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"2237:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3890,"id":3909,"nodeType":"Return","src":"2230:21:21"}]},"id":3911,"implemented":true,"kind":"function","modifiers":[],"name":"_clearDeposit","nameLocation":"1890:13:21","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"tokenID","nameLocation":"1932:7:21","nodeType":"VariableDeclaration","scope":3911,"src":"1914:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3883,"nodeType":"UserDefinedTypeName","pathNode":{"id":3882,"name":"Structures.Tokens","nameLocations":["1914:10:21","1925:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1914:17:21"},"referencedDeclaration":2377,"src":"1914:17:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3886,"mutability":"mutable","name":"user","nameLocation":"1958:4:21","nodeType":"VariableDeclaration","scope":3911,"src":"1950:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3885,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1950:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1903:66:21"},"returnParameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"amountRemoved","nameLocation":"1996:13:21","nodeType":"VariableDeclaration","scope":3911,"src":"1988:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:23:21"},"scope":3932,"src":"1881:378:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3930,"nodeType":"Block","src":"2394:58:21","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3921,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"2412:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(bytes32 => uint256))"}},"id":3926,"indexExpression":{"arguments":[{"id":3924,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"2429:7:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":3923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2421:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3922,"name":"uint256","nodeType":"ElementaryTypeName","src":"2421:7:21","typeDescriptions":{}}},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2421:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2412:26:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3928,"indexExpression":{"id":3927,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2439:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2412:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3920,"id":3929,"nodeType":"Return","src":"2405:39:21"}]},"id":3931,"implemented":true,"kind":"function","modifiers":[],"name":"_getDeposit","nameLocation":"2276:11:21","nodeType":"FunctionDefinition","parameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3914,"mutability":"mutable","name":"tokenID","nameLocation":"2316:7:21","nodeType":"VariableDeclaration","scope":3931,"src":"2298:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":3913,"nodeType":"UserDefinedTypeName","pathNode":{"id":3912,"name":"Structures.Tokens","nameLocations":["2298:10:21","2309:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"2298:17:21"},"referencedDeclaration":2377,"src":"2298:17:21","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3916,"mutability":"mutable","name":"user","nameLocation":"2342:4:21","nodeType":"VariableDeclaration","scope":3931,"src":"2334:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2334:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2287:66:21"},"returnParameters":{"id":3920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3919,"mutability":"mutable","name":"deposit","nameLocation":"2385:7:21","nodeType":"VariableDeclaration","scope":3931,"src":"2377:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3918,"name":"uint256","nodeType":"ElementaryTypeName","src":"2377:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2376:17:21"},"scope":3932,"src":"2267:185:21","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3933,"src":"176:2279:21","usedErrors":[]}],"src":"0:2457:21"},"id":21},"contracts/modules/Events.sol":{"ast":{"absolutePath":"contracts/modules/Events.sol","exportedSymbols":{"Data":[3740],"ECDSA":[672],"Events":[3973],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"Math":[1538],"SignedMath":[1955],"Strings":[306],"Structures":[2547]},"id":3974,"nodeType":"SourceUnit","nodes":[{"id":3934,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"130:23:22"},{"absolutePath":"contracts/modules/Data.sol","file":"./Data.sol","id":3935,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3974,"sourceUnit":3741,"src":"157:20:22","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3936,"name":"Data","nameLocations":["209:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":3740,"src":"209:4:22"},"id":3937,"nodeType":"InheritanceSpecifier","src":"209:4:22"}],"canonicalName":"Events","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3973,"linearizedBaseContracts":[3973,3740],"name":"Events","nameLocation":"199:6:22","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"5c0140b1f9412009d09b44a8920b411de7a75ebe8c087005130524935e0e457f","id":3942,"name":"Created","nameLocation":"227:7:22","nodeType":"EventDefinition","parameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"251:4:22","nodeType":"VariableDeclaration","scope":3942,"src":"235:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3939,"nodeType":"UserDefinedTypeName","pathNode":{"id":3938,"name":"Structures.Post","nameLocations":["235:10:22","246:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"235:15:22"},"referencedDeclaration":2436,"src":"235:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"234:22:22"},"src":"221:36:22"},{"anonymous":false,"eventSelector":"f13f251f5172305eb93606c0071b9c48215d3ec6a6698a7fa987c18725488e7f","id":3947,"name":"Accepted","nameLocation":"269:8:22","nodeType":"EventDefinition","parameters":{"id":3946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3945,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"294:4:22","nodeType":"VariableDeclaration","scope":3947,"src":"278:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3944,"nodeType":"UserDefinedTypeName","pathNode":{"id":3943,"name":"Structures.Post","nameLocations":["278:10:22","289:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"278:15:22"},"referencedDeclaration":2436,"src":"278:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"277:22:22"},"src":"263:37:22"},{"anonymous":false,"eventSelector":"130bb2fe638478ab244a90fc4550e3d9f3401c2bd639012d7cb8d0cbe95266ef","id":3952,"name":"Valid","nameLocation":"312:5:22","nodeType":"EventDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3950,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"334:4:22","nodeType":"VariableDeclaration","scope":3952,"src":"318:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3949,"nodeType":"UserDefinedTypeName","pathNode":{"id":3948,"name":"Structures.Post","nameLocations":["318:10:22","329:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"318:15:22"},"referencedDeclaration":2436,"src":"318:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"317:22:22"},"src":"306:34:22"},{"anonymous":false,"eventSelector":"1c9ee42116032ebac99a31ae475140077588d76949471dfb40a21a14ad523b2d","id":3957,"name":"Invalid","nameLocation":"352:7:22","nodeType":"EventDefinition","parameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"376:4:22","nodeType":"VariableDeclaration","scope":3957,"src":"360:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3954,"nodeType":"UserDefinedTypeName","pathNode":{"id":3953,"name":"Structures.Post","nameLocations":["360:10:22","371:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"360:15:22"},"referencedDeclaration":2436,"src":"360:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"359:22:22"},"src":"346:36:22"},{"anonymous":false,"eventSelector":"8c29ee13fd7c46c5bb38132cd9dd5f69f502dc95e0460c430794a4f8b2e1ed70","id":3962,"name":"Finalized","nameLocation":"394:9:22","nodeType":"EventDefinition","parameters":{"id":3961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3960,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"420:4:22","nodeType":"VariableDeclaration","scope":3962,"src":"404:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3959,"nodeType":"UserDefinedTypeName","pathNode":{"id":3958,"name":"Structures.Post","nameLocations":["404:10:22","415:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"404:15:22"},"referencedDeclaration":2436,"src":"404:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"403:22:22"},"src":"388:38:22"},{"anonymous":false,"eventSelector":"53d57d9d48dda1c6e6d0fc0b92d00b750b752f21cc973929ce8b4b60b374505e","id":3967,"name":"MadePublic","nameLocation":"438:10:22","nodeType":"EventDefinition","parameters":{"id":3966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3965,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"465:4:22","nodeType":"VariableDeclaration","scope":3967,"src":"449:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3964,"nodeType":"UserDefinedTypeName","pathNode":{"id":3963,"name":"Structures.Post","nameLocations":["449:10:22","460:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"449:15:22"},"referencedDeclaration":2436,"src":"449:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"448:22:22"},"src":"432:39:22"},{"anonymous":false,"eventSelector":"496685ed89450883d7ff0e8e3b71eb9dca092e7b9742b53ed4611b7522443e5e","id":3972,"name":"Renounced","nameLocation":"483:9:22","nodeType":"EventDefinition","parameters":{"id":3971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3970,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"509:4:22","nodeType":"VariableDeclaration","scope":3972,"src":"493:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3969,"nodeType":"UserDefinedTypeName","pathNode":{"id":3968,"name":"Structures.Post","nameLocations":["493:10:22","504:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":2436,"src":"493:15:22"},"referencedDeclaration":2436,"src":"493:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"492:22:22"},"src":"477:38:22"}],"scope":3974,"src":"181:337:22","usedErrors":[]}],"src":"130:390:22"},"id":22},"contracts/modules/Finalization.sol":{"ast":{"absolutePath":"contracts/modules/Finalization.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"Finalization":[4275],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Staking":[5485],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":4276,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3975,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"33:23:23"},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":3976,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4276,"sourceUnit":5486,"src":"58:23:23","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3977,"name":"Staking","nameLocations":["119:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":5485,"src":"119:7:23"},"id":3978,"nodeType":"InheritanceSpecifier","src":"119:7:23"}],"canonicalName":"Finalization","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4275,"linearizedBaseContracts":[4275,5485,6228,2982,3068,3932,3973,3740],"name":"Finalization","nameLocation":"103:12:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":4273,"nodeType":"Block","src":"265:3219:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3987,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"276:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"276:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3989,"nodeType":"ExpressionStatement","src":"276:11:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":3991,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"320:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":3992,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"325:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"320:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":3993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"334:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"320:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3994,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"343:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"320:29:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3995,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"353:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"364:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"353:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"375:9:23","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"353:31:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"320:64:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f5355424d4954544544","id":3999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"399:15:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4988573c1cd6284ce3e17f7aa983bed6f3c4568b70b11ebfe4a79252f5a7e8d5","typeString":"literal_string \"NOT_SUBMITTED\""},"value":"NOT_SUBMITTED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4988573c1cd6284ce3e17f7aa983bed6f3c4568b70b11ebfe4a79252f5a7e8d5","typeString":"literal_string \"NOT_SUBMITTED\""}],"id":3990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"298:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"298:127:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4001,"nodeType":"ExpressionStatement","src":"298:127:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":4004,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"468:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4005,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"487:12:23","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"468:31:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4003,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"458:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"458:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4007,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"504:16:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"458:62:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5641554c5449445f4e4f545f4d41544348","id":4009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"535:19:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_62fb310997b45d93ce3187a58b63f0d4b6a727623a81e131027c3726d32cc4f8","typeString":"literal_string \"VAULTID_NOT_MATCH\""},"value":"VAULTID_NOT_MATCH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_62fb310997b45d93ce3187a58b63f0d4b6a727623a81e131027c3726d32cc4f8","typeString":"literal_string \"VAULTID_NOT_MATCH\""}],"id":4002,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"436:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"436:129:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4011,"nodeType":"ExpressionStatement","src":"436:129:23"},{"assignments":[4013],"declarations":[{"constant":false,"id":4013,"mutability":"mutable","name":"treasuryContract","nameLocation":"638:16:23","nodeType":"VariableDeclaration","scope":4273,"src":"630:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4012,"name":"address","nodeType":"ElementaryTypeName","src":"630:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4020,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4015,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"692:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4016,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"701:15:23","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"692:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4014,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"657:20:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"657:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"728:16:23","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":2235,"src":"657:87:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_payable_$","typeString":"function () view external returns (address payable)"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"657:89:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"630:116:23"},{"assignments":[4022],"declarations":[{"constant":false,"id":4022,"mutability":"mutable","name":"buyerFee","nameLocation":"765:8:23","nodeType":"VariableDeclaration","scope":4273,"src":"757:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4021,"name":"uint256","nodeType":"ElementaryTypeName","src":"757:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4036,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4023,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"777:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4024,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"782:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"777:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"791:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"777:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4026,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"798:7:23","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"777:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4028,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"839:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4027,"name":"IMecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"821:17:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateTreasury_$2304_$","typeString":"type(contract IMecenateTreasury)"}},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:35:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2304","typeString":"contract IMecenateTreasury"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"857:9:23","memberName":"globalFee","nodeType":"MemberAccess","referencedDeclaration":2298,"src":"821:45:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:47:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"777:91:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4033,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"776:93:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"872:5:23","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"776:101:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"757:120:23"},{"assignments":[4038],"declarations":[{"constant":false,"id":4038,"mutability":"mutable","name":"amountToAdd","nameLocation":"896:11:23","nodeType":"VariableDeclaration","scope":4273,"src":"888:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"888:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4045,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4039,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"910:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4040,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"915:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"910:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"924:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"910:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4042,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"931:7:23","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"910:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4043,"name":"buyerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"941:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"910:39:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"888:61:23"},{"assignments":[4047],"declarations":[{"constant":false,"id":4047,"mutability":"mutable","name":"buyerStake","nameLocation":"1010:10:23","nodeType":"VariableDeclaration","scope":4273,"src":"1002:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4046,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4048,"nodeType":"VariableDeclarationStatement","src":"1002:18:23"},{"assignments":[4050],"declarations":[{"constant":false,"id":4050,"mutability":"mutable","name":"sellerStake","nameLocation":"1039:11:23","nodeType":"VariableDeclaration","scope":4273,"src":"1031:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4049,"name":"uint256","nodeType":"ElementaryTypeName","src":"1031:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4051,"nodeType":"VariableDeclarationStatement","src":"1031:19:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4052,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1067:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1072:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1067:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1081:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1067:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4055,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1090:12:23","memberName":"endTimeStamp","nodeType":"MemberAccess","referencedDeclaration":2463,"src":"1067:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4056,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1105:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1111:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"1105:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1067:53:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":4059,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1124:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1067:62:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2173:6:23","subExpression":{"id":4141,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"2174:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4271,"nodeType":"IfStatement","src":"2169:1308:23","trueBody":{"id":4270,"nodeType":"Block","src":"2181:1296:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4144,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"2222:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"expression":{"expression":{"id":4145,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2236:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2241:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2236:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2250:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"2236:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2257:5:23","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"2236:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2222:40:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50554e4953484d454e545f544f4f5f48494748","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2281:21:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_10e5c35e6dc1acf357c58dd3d0268c4a82a0a96506834ca5807fc59997f685c1","typeString":"literal_string \"PUNISHMENT_TOO_HIGH\""},"value":"PUNISHMENT_TOO_HIGH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_10e5c35e6dc1acf357c58dd3d0268c4a82a0a96506834ca5807fc59997f685c1","typeString":"literal_string \"PUNISHMENT_TOO_HIGH\""}],"id":4143,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2196:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2196:121:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4152,"nodeType":"ExpressionStatement","src":"2196:121:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4154,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2340:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2349:15:23","memberName":"punishmentRatio","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"2340:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31653138","id":4156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2367:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"2340:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50554e4953484d454e545f524154494f5f48494748","id":4158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2373:23:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_ad1fb82965748d8622a3821eab72a0367e08f340a3cb198305fc7c24daf437ab","typeString":"literal_string \"PUNISHMENT_RATIO_HIGH\""},"value":"PUNISHMENT_RATIO_HIGH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ad1fb82965748d8622a3821eab72a0367e08f340a3cb198305fc7c24daf437ab","typeString":"literal_string \"PUNISHMENT_RATIO_HIGH\""}],"id":4153,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2332:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:65:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4160,"nodeType":"ExpressionStatement","src":"2332:65:23"},{"assignments":[4162],"declarations":[{"constant":false,"id":4162,"mutability":"mutable","name":"penalty","nameLocation":"2422:7:23","nodeType":"VariableDeclaration","scope":4270,"src":"2414:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4161,"name":"uint256","nodeType":"ElementaryTypeName","src":"2414:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4170,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4163,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"2433:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4164,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2446:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4165,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2455:15:23","memberName":"punishmentRatio","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"2446:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2433:37:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4167,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2432:39:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":4168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2474:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"2432:46:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2414:64:23"},{"assignments":[4172],"declarations":[{"constant":false,"id":4172,"mutability":"mutable","name":"totalPunishmentFee","nameLocation":"2501:18:23","nodeType":"VariableDeclaration","scope":4270,"src":"2493:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4171,"name":"uint256","nodeType":"ElementaryTypeName","src":"2493:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4176,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4173,"name":"penalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"2522:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4174,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"2532:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2522:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2493:49:23"},{"expression":{"arguments":[{"expression":{"expression":{"expression":{"id":4180,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2596:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4181,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2601:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2596:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2610:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2596:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4183,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2619:7:23","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"2596:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4184,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"2645:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4185,"name":"totalPunishmentFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4172,"src":"2680:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4177,"name":"TokenManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6228,"src":"2559:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenManager_$6228_$","typeString":"type(contract TokenManager)"}},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2572:5:23","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":6041,"src":"2559:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256)"}},"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2559:154:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4187,"nodeType":"ExpressionStatement","src":"2559:154:23"},{"expression":{"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4188,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2730:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2735:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2730:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2744:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"2730:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4194,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2751:7:23","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"2730:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4196,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2790:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2795:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2790:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4198,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2804:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2790:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4199,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2813:7:23","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"2790:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":4201,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2849:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2868:12:23","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"2849:31:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4200,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2839:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4204,"name":"penalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"2900:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4195,"name":"_burnStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5045,"src":"2761:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:161:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2730:192:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4207,"nodeType":"ExpressionStatement","src":"2730:192:23"},{"expression":{"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4208,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2939:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2944:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2939:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2953:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"2939:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2960:5:23","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"2939:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4216,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2997:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4217,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3002:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2997:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3011:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2997:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3020:7:23","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"2997:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":4221,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3056:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3075:13:23","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"3056:32:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4220,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3046:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4224,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"3108:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4215,"name":"_burnStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5045,"src":"2968:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2968:165:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2939:194:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4227,"nodeType":"ExpressionStatement","src":"2939:194:23"},{"expression":{"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4228,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3194:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4232,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3199:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"3194:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3208:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"3194:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3217:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"3194:29:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4235,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3226:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3237:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"3226:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3248:8:23","memberName":"Punished","nodeType":"MemberAccess","referencedDeclaration":2370,"src":"3226:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"3194:62:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":4239,"nodeType":"ExpressionStatement","src":"3194:62:23"},{"expression":{"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4240,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3271:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3276:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"3271:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3285:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"3271:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4246,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3292:10:23","memberName":"punishment","nodeType":"MemberAccess","referencedDeclaration":2488,"src":"3271:31:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4247,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"3305:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3271:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4249,"nodeType":"ExpressionStatement","src":"3271:44:23"},{"expression":{"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4250,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3330:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3335:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"3330:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3344:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"3330:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3351:7:23","memberName":"penalty","nodeType":"MemberAccess","referencedDeclaration":2490,"src":"3330:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4257,"name":"penalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"3361:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3330:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4259,"nodeType":"ExpressionStatement","src":"3330:38:23"},{"expression":{"arguments":[{"expression":{"expression":{"id":4261,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3399:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3410:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"3399:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3421:8:23","memberName":"Punished","nodeType":"MemberAccess","referencedDeclaration":2370,"src":"3399:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":4260,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"3385:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2373_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3385:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4265,"nodeType":"ExpressionStatement","src":"3385:45:23"},{"eventCall":{"arguments":[{"id":4267,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3460:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}],"id":4266,"name":"Invalid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"3452:7:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":4268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3452:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4269,"nodeType":"EmitStatement","src":"3447:18:23"}]}},"id":4272,"nodeType":"IfStatement","src":"1063:2414:23","trueBody":{"id":4140,"nodeType":"Block","src":"1131:1032:23","statements":[{"expression":{"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4061,"name":"buyerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"1207:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4064,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1263:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4065,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1268:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1263:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1277:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1263:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1286:7:23","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"1263:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":4069,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1322:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4070,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1341:12:23","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"1322:31:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4068,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1312:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1312:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"expression":{"expression":{"id":4072,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1373:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1378:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1373:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1387:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"1373:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4075,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1394:7:23","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"1373:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4062,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"1220:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1228:16:23","memberName":"_decreaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3881,"src":"1220:24:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:196:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1207:209:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4078,"nodeType":"ExpressionStatement","src":"1207:209:23"},{"expression":{"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4079,"name":"sellerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"1433:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4082,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1490:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4083,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1495:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1490:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4084,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1504:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1490:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1513:7:23","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"1490:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":4087,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1549:18:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1568:13:23","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"1549:32:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4086,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1539:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1539:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4090,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"1601:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4080,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"1447:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1455:16:23","memberName":"_increaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3823,"src":"1447:24:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1447:180:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1433:194:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4093,"nodeType":"ExpressionStatement","src":"1433:194:23"},{"expression":{"arguments":[{"expression":{"expression":{"expression":{"id":4097,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1681:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4098,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1686:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1681:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1695:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1681:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4100,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1704:7:23","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"1681:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4101,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"1730:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4102,"name":"buyerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"1765:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4094,"name":"TokenManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6228,"src":"1644:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenManager_$6228_$","typeString":"type(contract TokenManager)"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1657:5:23","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":6041,"src":"1644:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256)"}},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1644:144:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4104,"nodeType":"ExpressionStatement","src":"1644:144:23"},{"expression":{"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4105,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1846:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1851:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1846:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1860:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"1846:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1867:5:23","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"1846:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4112,"name":"sellerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"1875:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1846:40:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4114,"nodeType":"ExpressionStatement","src":"1846:40:23"},{"expression":{"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4115,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1901:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1906:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1901:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:23","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"1901:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1922:7:23","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"1901:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4122,"name":"buyerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"1932:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1901:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4124,"nodeType":"ExpressionStatement","src":"1901:41:23"},{"expression":{"arguments":[{"condition":{"id":4126,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1989:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"expression":{"id":4130,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2073:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2084:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2073:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2095:8:23","memberName":"Punished","nodeType":"MemberAccess","referencedDeclaration":2370,"src":"2073:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1989:114:23","trueExpression":{"expression":{"expression":{"id":4127,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2018:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2029:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2018:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2040:9:23","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":2369,"src":"2018:31:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":4125,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"1957:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2373_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:161:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4135,"nodeType":"ExpressionStatement","src":"1957:161:23"},{"eventCall":{"arguments":[{"id":4137,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2146:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}],"id":4136,"name":"Valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"2140:5:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2140:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4139,"nodeType":"EmitStatement","src":"2135:16:23"}]}}]},"functionSelector":"8f287dc2","id":4274,"implemented":true,"kind":"function","modifiers":[],"name":"finalizePost","nameLocation":"143:12:23","nodeType":"FunctionDefinition","parameters":{"id":3985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"valid","nameLocation":"171:5:23","nodeType":"VariableDeclaration","scope":4274,"src":"166:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3979,"name":"bool","nodeType":"ElementaryTypeName","src":"166:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"punishment","nameLocation":"195:10:23","nodeType":"VariableDeclaration","scope":4274,"src":"187:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3981,"name":"uint256","nodeType":"ElementaryTypeName","src":"187:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3984,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"224:16:23","nodeType":"VariableDeclaration","scope":4274,"src":"216:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3983,"name":"bytes32","nodeType":"ElementaryTypeName","src":"216:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"155:92:23"},"returnParameters":{"id":3986,"nodeType":"ParameterList","parameters":[],"src":"265:0:23"},"scope":4275,"src":"134:3350:23","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":4276,"src":"85:3402:23","usedErrors":[]}],"src":"33:3456:23"},"id":23},"contracts/modules/Message.sol":{"ast":{"absolutePath":"contracts/modules/Message.sol","exportedSymbols":{"Data":[3740],"ECDSA":[672],"Events":[3973],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"Math":[1538],"Message":[4577],"SignedMath":[1955],"Strings":[306],"Structures":[2547]},"id":4578,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4277,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"33:23:24"},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":4278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4578,"sourceUnit":3974,"src":"60:22:24","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4279,"name":"Events","nameLocations":["115:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":3973,"src":"115:6:24"},"id":4280,"nodeType":"InheritanceSpecifier","src":"115:6:24"}],"canonicalName":"Message","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4577,"linearizedBaseContracts":[4577,3973,3740],"name":"Message","nameLocation":"104:7:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":4310,"nodeType":"Block","src":"226:280:24","statements":[{"assignments":[4288],"declarations":[{"constant":false,"id":4288,"mutability":"mutable","name":"sellerVaultIdHash","nameLocation":"245:17:24","nodeType":"VariableDeclaration","scope":4310,"src":"237:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"237:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4293,"initialValue":{"arguments":[{"expression":{"id":4290,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"275:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"294:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"275:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4289,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"265:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"265:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"237:71:24"},{"assignments":[4295],"declarations":[{"constant":false,"id":4295,"mutability":"mutable","name":"buyerVaultIdHash","nameLocation":"327:16:24","nodeType":"VariableDeclaration","scope":4310,"src":"319:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"319:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4300,"initialValue":{"arguments":[{"expression":{"id":4297,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"356:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"375:12:24","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"356:31:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4296,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"346:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"346:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"319:69:24"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4301,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"407:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4302,"name":"sellerVaultIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"427:17:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"407:37:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4304,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"461:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4305,"name":"buyerVaultIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"481:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"461:36:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"407:90:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4308,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"406:92:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4286,"id":4309,"nodeType":"Return","src":"399:99:24"}]},"id":4311,"implemented":true,"kind":"function","modifiers":[],"name":"_isSellerOrBuyer","nameLocation":"138:16:24","nodeType":"FunctionDefinition","parameters":{"id":4283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4282,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"173:16:24","nodeType":"VariableDeclaration","scope":4311,"src":"165:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4281,"name":"bytes32","nodeType":"ElementaryTypeName","src":"165:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"154:42:24"},"returnParameters":{"id":4286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4311,"src":"220:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4284,"name":"bool","nodeType":"ElementaryTypeName","src":"220:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"219:6:24"},"scope":4577,"src":"129:377:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4328,"nodeType":"Block","src":"627:139:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":4320,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"663:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4319,"name":"_isSellerOrBuyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"646:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"646:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f5448455f53454c4c45525f4f525f4255594552","id":4322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"682:25:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""},"value":"NOT_THE_SELLER_OR_BUYER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""}],"id":4318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"638:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"638:70:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4324,"nodeType":"ExpressionStatement","src":"638:70:24"},{"expression":{"expression":{"id":4325,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"726:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4326,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"745:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"726:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4317,"id":4327,"nodeType":"Return","src":"719:39:24"}]},"functionSelector":"9d8cc89a","id":4329,"implemented":true,"kind":"function","modifiers":[],"name":"getVaultIdSecret","nameLocation":"523:16:24","nodeType":"FunctionDefinition","parameters":{"id":4314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4313,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"558:16:24","nodeType":"VariableDeclaration","scope":4329,"src":"550:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"550:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"539:42:24"},"returnParameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4329,"src":"613:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4315,"name":"bytes","nodeType":"ElementaryTypeName","src":"613:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"612:14:24"},"scope":4577,"src":"514:252:24","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":4383,"nodeType":"Block","src":"881:640:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4339,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"914:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"933:15:24","memberName":"buyerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2481,"src":"914:34:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"914:39:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f5f54454c454752414d5f49445f464f525f4255594552","id":4343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"968:26:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef081175550a6169c9969a2a454713cea2e9bf6b92a3d83e90849c0ac71c3117","typeString":"literal_string \"NO_TELEGRAM_ID_FOR_BUYER\""},"value":"NO_TELEGRAM_ID_FOR_BUYER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef081175550a6169c9969a2a454713cea2e9bf6b92a3d83e90849c0ac71c3117","typeString":"literal_string \"NO_TELEGRAM_ID_FOR_BUYER\""}],"id":4338,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"892:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"892:113:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4345,"nodeType":"ExpressionStatement","src":"892:113:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4347,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1040:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4348,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1059:16:24","memberName":"sellerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2475,"src":"1040:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1079:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1040:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f5f54454c454752414d5f49445f464f525f53454c4c4552","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1095:27:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_535ab048b755150cc85e5afeb28f92ae8defc0abbb5cdc3f398b1869d00967a1","typeString":"literal_string \"NO_TELEGRAM_ID_FOR_SELLER\""},"value":"NO_TELEGRAM_ID_FOR_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_535ab048b755150cc85e5afeb28f92ae8defc0abbb5cdc3f398b1869d00967a1","typeString":"literal_string \"NO_TELEGRAM_ID_FOR_SELLER\""}],"id":4346,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1018:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1018:115:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4353,"nodeType":"ExpressionStatement","src":"1018:115:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4355,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"1168:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4357,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1198:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4358,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1217:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"1198:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4356,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1188:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1168:63:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4361,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"1252:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4363,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1282:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1301:12:24","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"1282:31:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4362,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1272:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1272:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1252:62:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1168:146:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f5448455f53454c4c45525f4f525f4255594552","id":4368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1329:25:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""},"value":"NOT_THE_SELLER_OR_BUYER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""}],"id":4354,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1146:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1146:219:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4370,"nodeType":"ExpressionStatement","src":"1146:219:24"},{"expression":{"components":[{"arguments":[{"expression":{"id":4373,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1408:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1427:15:24","memberName":"buyerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2481,"src":"1408:34:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1400:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4371,"name":"uint160","nodeType":"ElementaryTypeName","src":"1400:7:24","typeDescriptions":{}}},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1400:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"expression":{"id":4378,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1466:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1485:16:24","memberName":"sellerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2475,"src":"1466:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1458:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4376,"name":"uint160","nodeType":"ElementaryTypeName","src":"1458:7:24","typeDescriptions":{}}},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1458:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":4381,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1385:128:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"functionReturnParameters":4337,"id":4382,"nodeType":"Return","src":"1378:135:24"}]},"functionSelector":"3258d15c","id":4384,"implemented":true,"kind":"function","modifiers":[],"name":"getTelegramIds","nameLocation":"783:14:24","nodeType":"FunctionDefinition","parameters":{"id":4332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4331,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"816:16:24","nodeType":"VariableDeclaration","scope":4384,"src":"808:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"808:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"797:42:24"},"returnParameters":{"id":4337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4384,"src":"863:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4333,"name":"uint256","nodeType":"ElementaryTypeName","src":"863:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4384,"src":"872:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4335,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"862:18:24"},"scope":4577,"src":"774:747:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4445,"nodeType":"Block","src":"1688:673:24","statements":[{"assignments":[4396,null,null,null],"declarations":[{"constant":false,"id":4396,"mutability":"mutable","name":"vaultId","nameLocation":"1713:7:24","nodeType":"VariableDeclaration","scope":4445,"src":"1700:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4395,"name":"bytes","nodeType":"ElementaryTypeName","src":"1700:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},null,null,null],"id":4402,"initialValue":{"arguments":[{"id":4398,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4386,"src":"1757:20:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4399,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"1792:3:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4400,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"1810:6:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4397,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"1730:12:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1730:97:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1699:128:24"},{"assignments":[4404],"declarations":[{"constant":false,"id":4404,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"1848:16:24","nodeType":"VariableDeclaration","scope":4445,"src":"1840:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1840:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4408,"initialValue":{"arguments":[{"id":4406,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"1877:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4405,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1867:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1867:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1840:45:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4410,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"1920:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4412,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1950:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1969:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"1950:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4411,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1940:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1920:63:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4416,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"2004:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4418,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2034:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2053:12:24","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"2034:31:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4417,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2024:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2024:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2004:62:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1920:146:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c45525f4f525f4255594552","id":4423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2081:21:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_261fb51bc66e4aae294cad7710d25d445a10c8b09a71371f3d642529752955e3","typeString":"literal_string \"NOT_SELLER_OR_BUYER\""},"value":"NOT_SELLER_OR_BUYER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_261fb51bc66e4aae294cad7710d25d445a10c8b09a71371f3d642529752955e3","typeString":"literal_string \"NOT_SELLER_OR_BUYER\""}],"id":4409,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1898:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1898:215:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4425,"nodeType":"ExpressionStatement","src":"1898:215:24"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4426,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"2130:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4428,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2160:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2179:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2160:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4427,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2150:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2150:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2130:63:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4443,"nodeType":"Block","src":"2278:76:24","statements":[{"expression":{"arguments":[{"expression":{"id":4439,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2310:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4440,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2329:12:24","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"2310:31:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4438,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2300:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4394,"id":4442,"nodeType":"Return","src":"2293:49:24"}]},"id":4444,"nodeType":"IfStatement","src":"2126:228:24","trueBody":{"id":4437,"nodeType":"Block","src":"2195:77:24","statements":[{"expression":{"arguments":[{"expression":{"id":4433,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2227:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2246:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2227:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4432,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2217:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2217:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4394,"id":4436,"nodeType":"Return","src":"2210:50:24"}]}}]},"functionSelector":"e02cfa4c","id":4446,"implemented":true,"kind":"function","modifiers":[],"name":"getHashedVaultId","nameLocation":"1538:16:24","nodeType":"FunctionDefinition","parameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4386,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"1578:20:24","nodeType":"VariableDeclaration","scope":4446,"src":"1565:33:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4385,"name":"bytes","nodeType":"ElementaryTypeName","src":"1565:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4388,"mutability":"mutable","name":"_to","nameLocation":"1617:3:24","nodeType":"VariableDeclaration","scope":4446,"src":"1609:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4387,"name":"address","nodeType":"ElementaryTypeName","src":"1609:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4390,"mutability":"mutable","name":"_nonce","nameLocation":"1639:6:24","nodeType":"VariableDeclaration","scope":4446,"src":"1631:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4389,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1631:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1554:98:24"},"returnParameters":{"id":4394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4446,"src":"1679:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1679:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1678:9:24"},"scope":4577,"src":"1529:832:24","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":4468,"nodeType":"Block","src":"2480:168:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4453,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"2491:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2491:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4455,"nodeType":"ExpressionStatement","src":"2491:11:24"},{"expression":{"arguments":[{"arguments":[{"id":4458,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"2538:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4457,"name":"_isSellerOrBuyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"2521:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2521:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f5448455f53454c4c45525f4f525f4255594552","id":4460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2557:25:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""},"value":"NOT_THE_SELLER_OR_BUYER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""}],"id":4456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2513:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2513:70:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4462,"nodeType":"ExpressionStatement","src":"2513:70:24"},{"expression":{"arguments":[{"id":4464,"name":"encodeMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"2608:13:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4465,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"2623:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4463,"name":"_writeMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"2594:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_bytes32_$returns$__$","typeString":"function (bytes memory,bytes32)"}},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2594:46:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4467,"nodeType":"ExpressionStatement","src":"2594:46:24"}]},"functionSelector":"83dd1743","id":4469,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"2378:5:24","nodeType":"FunctionDefinition","parameters":{"id":4451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4448,"mutability":"mutable","name":"encodeMessage","nameLocation":"2407:13:24","nodeType":"VariableDeclaration","scope":4469,"src":"2394:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4447,"name":"bytes","nodeType":"ElementaryTypeName","src":"2394:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4450,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"2439:16:24","nodeType":"VariableDeclaration","scope":4469,"src":"2431:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2431:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2383:79:24"},"returnParameters":{"id":4452,"nodeType":"ParameterList","parameters":[],"src":"2480:0:24"},"scope":4577,"src":"2369:279:24","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":4497,"nodeType":"Block","src":"2767:236:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4476,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"2782:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4478,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2812:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2831:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2812:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4477,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2802:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2782:63:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4495,"nodeType":"Block","src":"2924:72:24","statements":[{"expression":{"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4489,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2939:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2948:20:24","memberName":"lastMessageForSeller","nodeType":"MemberAccess","referencedDeclaration":2409,"src":"2939:29:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4492,"name":"encodeMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"2971:13:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2939:45:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4494,"nodeType":"ExpressionStatement","src":"2939:45:24"}]},"id":4496,"nodeType":"IfStatement","src":"2778:218:24","trueBody":{"id":4488,"nodeType":"Block","src":"2847:71:24","statements":[{"expression":{"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4482,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2862:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2871:19:24","memberName":"lastMessageForBuyer","nodeType":"MemberAccess","referencedDeclaration":2407,"src":"2862:28:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4485,"name":"encodeMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"2893:13:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2862:44:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4487,"nodeType":"ExpressionStatement","src":"2862:44:24"}]}}]},"id":4498,"implemented":true,"kind":"function","modifiers":[],"name":"_writeMessage","nameLocation":"2665:13:24","nodeType":"FunctionDefinition","parameters":{"id":4474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4471,"mutability":"mutable","name":"encodeMessage","nameLocation":"2702:13:24","nodeType":"VariableDeclaration","scope":4498,"src":"2689:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4470,"name":"bytes","nodeType":"ElementaryTypeName","src":"2689:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4473,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"2734:16:24","nodeType":"VariableDeclaration","scope":4498,"src":"2726:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2726:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2678:79:24"},"returnParameters":{"id":4475,"nodeType":"ParameterList","parameters":[],"src":"2767:0:24"},"scope":4577,"src":"2656:347:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4528,"nodeType":"Block","src":"3169:279:24","statements":[{"assignments":[4510],"declarations":[{"constant":false,"id":4510,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"3188:16:24","nodeType":"VariableDeclaration","scope":4528,"src":"3180:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3180:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4516,"initialValue":{"arguments":[{"id":4512,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"3242:20:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4513,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"3277:3:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4514,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4504,"src":"3295:6:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4511,"name":"_getEncryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"3207:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes memory,address,bytes32) returns (bytes32)"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3207:105:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3180:132:24"},{"expression":{"arguments":[{"arguments":[{"id":4519,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"3348:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4518,"name":"_isSellerOrBuyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"3331:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view returns (bool)"}},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3331:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f5448455f53454c4c45525f4f525f4255594552","id":4521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3367:25:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""},"value":"NOT_THE_SELLER_OR_BUYER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_83056f56b2c6e673eec4290cd99b702a524ca9776b5174a26a81d4f8e302a735","typeString":"literal_string \"NOT_THE_SELLER_OR_BUYER\""}],"id":4517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3323:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3323:70:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4523,"nodeType":"ExpressionStatement","src":"3323:70:24"},{"expression":{"arguments":[{"id":4525,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"3423:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4524,"name":"_getMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4552,"src":"3411:11:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes32) view returns (bytes memory)"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3411:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4508,"id":4527,"nodeType":"Return","src":"3404:36:24"}]},"functionSelector":"9f8b4359","id":4529,"implemented":true,"kind":"function","modifiers":[],"name":"getMessage","nameLocation":"3020:10:24","nodeType":"FunctionDefinition","parameters":{"id":4505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4500,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"3054:20:24","nodeType":"VariableDeclaration","scope":4529,"src":"3041:33:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4499,"name":"bytes","nodeType":"ElementaryTypeName","src":"3041:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4502,"mutability":"mutable","name":"_to","nameLocation":"3093:3:24","nodeType":"VariableDeclaration","scope":4529,"src":"3085:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4501,"name":"address","nodeType":"ElementaryTypeName","src":"3085:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4504,"mutability":"mutable","name":"_nonce","nameLocation":"3115:6:24","nodeType":"VariableDeclaration","scope":4529,"src":"3107:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3107:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3030:98:24"},"returnParameters":{"id":4508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4529,"src":"3155:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4506,"name":"bytes","nodeType":"ElementaryTypeName","src":"3155:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3154:14:24"},"scope":4577,"src":"3011:437:24","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":4551,"nodeType":"Block","src":"3556:218:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4536,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"3571:16:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":4538,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3601:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3620:13:24","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"3601:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4537,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3591:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3591:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3571:63:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4549,"nodeType":"Block","src":"3704:63:24","statements":[{"expression":{"expression":{"id":4546,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3726:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4547,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3735:20:24","memberName":"lastMessageForSeller","nodeType":"MemberAccess","referencedDeclaration":2409,"src":"3726:29:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4535,"id":4548,"nodeType":"Return","src":"3719:36:24"}]},"id":4550,"nodeType":"IfStatement","src":"3567:200:24","trueBody":{"id":4545,"nodeType":"Block","src":"3636:62:24","statements":[{"expression":{"expression":{"id":4542,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3658:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3667:19:24","memberName":"lastMessageForBuyer","nodeType":"MemberAccess","referencedDeclaration":2407,"src":"3658:28:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":4535,"id":4544,"nodeType":"Return","src":"3651:35:24"}]}}]},"id":4552,"implemented":true,"kind":"function","modifiers":[],"name":"_getMessage","nameLocation":"3465:11:24","nodeType":"FunctionDefinition","parameters":{"id":4532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4531,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"3495:16:24","nodeType":"VariableDeclaration","scope":4552,"src":"3487:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3487:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3476:42:24"},"returnParameters":{"id":4535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4552,"src":"3542:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4533,"name":"bytes","nodeType":"ElementaryTypeName","src":"3542:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3541:14:24"},"scope":4577,"src":"3456:318:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4575,"nodeType":"Block","src":"3945:183:24","statements":[{"assignments":[4564,null,null,null],"declarations":[{"constant":false,"id":4564,"mutability":"mutable","name":"vaultId","nameLocation":"3970:7:24","nodeType":"VariableDeclaration","scope":4575,"src":"3957:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4563,"name":"bytes","nodeType":"ElementaryTypeName","src":"3957:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},null,null,null],"id":4570,"initialValue":{"arguments":[{"id":4566,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"4014:20:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4567,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"4049:3:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4568,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"4067:6:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4565,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"3987:12:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3987:97:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3956:128:24"},{"expression":{"arguments":[{"id":4572,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"4112:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4571,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4102:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4102:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4562,"id":4574,"nodeType":"Return","src":"4095:25:24"}]},"id":4576,"implemented":true,"kind":"function","modifiers":[],"name":"_getEncryptedVaultId","nameLocation":"3791:20:24","nodeType":"FunctionDefinition","parameters":{"id":4559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4554,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"3835:20:24","nodeType":"VariableDeclaration","scope":4576,"src":"3822:33:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4553,"name":"bytes","nodeType":"ElementaryTypeName","src":"3822:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4556,"mutability":"mutable","name":"_to","nameLocation":"3874:3:24","nodeType":"VariableDeclaration","scope":4576,"src":"3866:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4555,"name":"address","nodeType":"ElementaryTypeName","src":"3866:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4558,"mutability":"mutable","name":"_nonce","nameLocation":"3896:6:24","nodeType":"VariableDeclaration","scope":4576,"src":"3888:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3888:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3811:98:24"},"returnParameters":{"id":4562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4576,"src":"3936:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3936:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3935:9:24"},"scope":4577,"src":"3782:346:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4578,"src":"86:4045:24","usedErrors":[]}],"src":"33:4100:24"},"id":24},"contracts/modules/Renounce.sol":{"ast":{"absolutePath":"contracts/modules/Renounce.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"Renounce":[4728],"SafeMath":[1850],"SignedMath":[1955],"Staking":[5485],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":4729,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4579,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"625:23:25"},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":4580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4729,"sourceUnit":5486,"src":"652:23:25","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4581,"name":"Staking","nameLocations":["709:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":5485,"src":"709:7:25"},"id":4582,"nodeType":"InheritanceSpecifier","src":"709:7:25"}],"canonicalName":"Renounce","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4728,"linearizedBaseContracts":[4728,5485,6228,2982,3068,3932,3973,3740],"name":"Renounce","nameLocation":"697:8:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":4726,"nodeType":"Block","src":"853:1971:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4591,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"864:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"864:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4593,"nodeType":"ExpressionStatement","src":"864:11:25"},{"assignments":[4598],"declarations":[{"constant":false,"id":4598,"mutability":"mutable","name":"currentStatus","nameLocation":"947:13:25","nodeType":"VariableDeclaration","scope":4726,"src":"925:35:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":4597,"nodeType":"UserDefinedTypeName","pathNode":{"id":4596,"name":"Structures.PostStatus","nameLocations":["925:10:25","936:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"925:21:25"},"referencedDeclaration":2373,"src":"925:21:25","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":4603,"initialValue":{"expression":{"expression":{"expression":{"id":4599,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"963:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4600,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:8:25","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"963:13:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"977:8:25","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"963:22:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4602,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"986:6:25","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"963:29:25","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"925:67:25"},{"expression":{"arguments":[{"baseExpression":{"id":4605,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"1011:13:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":4610,"indexExpression":{"arguments":[{"id":4608,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4598,"src":"1031:13:25","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":4607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1025:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4606,"name":"uint8","nodeType":"ElementaryTypeName","src":"1025:5:25","typeDescriptions":{}}},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1025:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1011:35:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":4611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1048:16:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":4604,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1003:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4613,"nodeType":"ExpressionStatement","src":"1003:62:25"},{"assignments":[4615,null,null,null],"declarations":[{"constant":false,"id":4615,"mutability":"mutable","name":"vaultId","nameLocation":"1142:7:25","nodeType":"VariableDeclaration","scope":4726,"src":"1129:20:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4614,"name":"bytes","nodeType":"ElementaryTypeName","src":"1129:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},null,null,null],"id":4621,"initialValue":{"arguments":[{"id":4617,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"1186:20:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4618,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4586,"src":"1221:3:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4619,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"1239:6:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4616,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"1159:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1159:97:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1128:128:25"},{"assignments":[4623],"declarations":[{"constant":false,"id":4623,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"1275:16:25","nodeType":"VariableDeclaration","scope":4726,"src":"1267:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1267:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4627,"initialValue":{"arguments":[{"id":4625,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"1304:7:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4624,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1294:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1294:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1267:45:25"},{"assignments":[4629],"declarations":[{"constant":false,"id":4629,"mutability":"mutable","name":"sellerVaultId","nameLocation":"1383:13:25","nodeType":"VariableDeclaration","scope":4726,"src":"1375:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1375:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4634,"initialValue":{"arguments":[{"expression":{"id":4631,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"1409:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1428:13:25","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"1409:32:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":4630,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1399:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1399:43:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1375:67:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4636,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4623,"src":"1461:16:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4637,"name":"sellerVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"1481:13:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1461:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c4552","id":4639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1496:12:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""},"value":"NOT_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""}],"id":4635,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1453:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:56:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4641,"nodeType":"ExpressionStatement","src":"1453:56:25"},{"expression":{"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4642,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1563:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":4649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1634:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1626:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1626:7:25","typeDescriptions":{}}},"id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1626:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4645,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1600:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1611:4:25","memberName":"User","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"1600:15:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$2494_storage_ptr_$","typeString":"type(struct Structures.User storage pointer)"}},"id":4651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1617:7:25"],"names":["vaultId"],"nodeType":"FunctionCall","src":"1600:38:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_memory_ptr","typeString":"struct Structures.User memory"}},{"arguments":[{"arguments":[{"expression":{"expression":{"id":4656,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1757:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1768:10:25","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1757:21:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1779:9:25","memberName":"Renounced","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"1757:31:25","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},{"expression":{"expression":{"id":4659,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1821:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1832:8:25","memberName":"PostType","nodeType":"MemberAccess","referencedDeclaration":2383,"src":"1821:19:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostType_$2383_$","typeString":"type(enum Structures.PostType)"}},"id":4661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1841:4:25","memberName":"Text","nodeType":"MemberAccess","referencedDeclaration":2378,"src":"1821:24:25","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"}},{"hexValue":"30","id":4662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1925:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1959:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"expression":{"id":4665,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1992:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2003:6:25","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"1992:17:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":4667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2010:3:25","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"1992:21:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},{"typeIdentifier":"t_enum$_PostType_$2383","typeString":"enum Structures.PostType"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"expression":{"id":4654,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1702:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1713:12:25","memberName":"PostSettings","nodeType":"MemberAccess","referencedDeclaration":2469,"src":"1702:23:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostSettings_$2469_storage_ptr_$","typeString":"type(struct Structures.PostSettings storage pointer)"}},"id":4668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1749:6:25","1811:8:25","1868:17:25","1911:12:25","1949:8:25","1983:7:25"],"names":["status","postType","creationTimeStamp","endTimeStamp","duration","tokenId"],"nodeType":"FunctionCall","src":"1702:331:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_memory_ptr","typeString":"struct Structures.PostSettings memory"}},{"arguments":[{"hexValue":"30","id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2112:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2145:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2181:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2214:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4669,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2060:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2071:10:25","memberName":"PostEscrow","nodeType":"MemberAccess","referencedDeclaration":2491,"src":"2060:21:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEscrow_$2491_storage_ptr_$","typeString":"type(struct Structures.PostEscrow storage pointer)"}},"id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2105:5:25","2136:7:25","2169:10:25","2205:7:25"],"names":["stake","payment","punishment","penalty"],"nodeType":"FunctionCall","src":"2060:175:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_memory_ptr","typeString":"struct Structures.PostEscrow memory"}},{"arguments":[{"hexValue":"","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2327:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2366:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2406:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4676,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2260:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2271:17:25","memberName":"PostEncryptedData","nodeType":"MemberAccess","referencedDeclaration":2453,"src":"2260:28:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEncryptedData_$2453_storage_ptr_$","typeString":"type(struct Structures.PostEncryptedData storage pointer)"}},"id":4681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2312:13:25","2352:12:25","2391:13:25"],"names":["encryptedData","encryptedKey","decryptedData"],"nodeType":"FunctionCall","src":"2260:168:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PostSettings_$2469_memory_ptr","typeString":"struct Structures.PostSettings memory"},{"typeIdentifier":"t_struct$_PostEscrow_$2491_memory_ptr","typeString":"struct Structures.PostEscrow memory"},{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}],"expression":{"id":4652,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1653:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1664:8:25","memberName":"PostData","nodeType":"MemberAccess","referencedDeclaration":2446,"src":"1653:19:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostData_$2446_storage_ptr_$","typeString":"type(struct Structures.PostData storage pointer)"}},"id":4682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1692:8:25","2052:6:25","2254:4:25"],"names":["settings","escrow","data"],"nodeType":"FunctionCall","src":"1653:791:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_memory_ptr","typeString":"struct Structures.PostData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_User_$2494_memory_ptr","typeString":"struct Structures.User memory"},{"typeIdentifier":"t_struct$_PostData_$2446_memory_ptr","typeString":"struct Structures.PostData memory"}],"expression":{"id":4643,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1570:10:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1581:4:25","memberName":"Post","nodeType":"MemberAccess","referencedDeclaration":2436,"src":"1570:15:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Post_$2436_storage_ptr_$","typeString":"type(struct Structures.Post storage pointer)"}},"id":4683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1570:885:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_memory_ptr","typeString":"struct Structures.Post memory"}},"src":"1563:892:25","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4685,"nodeType":"ExpressionStatement","src":"1563:892:25"},{"expression":{"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4686,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2468:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4688,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2487:12:25","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"2468:31:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4689,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2502:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2468:42:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4691,"nodeType":"ExpressionStatement","src":"2468:42:25"},{"expression":{"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4692,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2521:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2540:14:25","memberName":"buyerTwitterId","nodeType":"MemberAccess","referencedDeclaration":2479,"src":"2521:33:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2521:37:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4697,"nodeType":"ExpressionStatement","src":"2521:37:25"},{"expression":{"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4698,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2569:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4700,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2588:15:25","memberName":"buyerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2481,"src":"2569:34:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2606:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2569:38:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4703,"nodeType":"ExpressionStatement","src":"2569:38:25"},{"expression":{"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4704,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2618:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2637:13:25","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2618:32:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4707,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2653:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2618:43:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":4709,"nodeType":"ExpressionStatement","src":"2618:43:25"},{"expression":{"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4710,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2672:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2691:15:25","memberName":"sellerTwitterId","nodeType":"MemberAccess","referencedDeclaration":2473,"src":"2672:34:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2709:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2672:38:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4715,"nodeType":"ExpressionStatement","src":"2672:38:25"},{"expression":{"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4716,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2721:18:25","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":4718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2740:16:25","memberName":"sellerTelegramId","nodeType":"MemberAccess","referencedDeclaration":2475,"src":"2721:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2759:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2721:39:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4721,"nodeType":"ExpressionStatement","src":"2721:39:25"},{"eventCall":{"arguments":[{"id":4723,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2811:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}],"id":4722,"name":"Renounced","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2801:9:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2801:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4725,"nodeType":"EmitStatement","src":"2796:20:25"}]},"functionSelector":"3a4fb8b7","id":4727,"implemented":true,"kind":"function","modifiers":[],"name":"renouncePost","nameLocation":"733:12:25","nodeType":"FunctionDefinition","parameters":{"id":4589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"769:20:25","nodeType":"VariableDeclaration","scope":4727,"src":"756:33:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4583,"name":"bytes","nodeType":"ElementaryTypeName","src":"756:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4586,"mutability":"mutable","name":"_to","nameLocation":"808:3:25","nodeType":"VariableDeclaration","scope":4727,"src":"800:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4585,"name":"address","nodeType":"ElementaryTypeName","src":"800:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4588,"mutability":"mutable","name":"_nonce","nameLocation":"830:6:25","nodeType":"VariableDeclaration","scope":4727,"src":"822:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"745:98:25"},"returnParameters":{"id":4590,"nodeType":"ParameterList","parameters":[],"src":"853:0:25"},"scope":4728,"src":"724:2100:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4729,"src":"679:2148:25","usedErrors":[]}],"src":"625:2204:25"},"id":25},"contracts/modules/Staking.sol":{"ast":{"absolutePath":"contracts/modules/Staking.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"Deposit":[3932],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Staking":[5485],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":5486,"nodeType":"SourceUnit","nodes":[{"id":4730,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"344:23:26"},{"absolutePath":"contracts/modules/Deposit.sol","file":"./Deposit.sol","id":4731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5486,"sourceUnit":3933,"src":"369:23:26","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":4732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5486,"sourceUnit":3974,"src":"393:22:26","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4733,"name":"Events","nameLocations":["446:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":3973,"src":"446:6:26"},"id":4734,"nodeType":"InheritanceSpecifier","src":"446:6:26"},{"baseName":{"id":4735,"name":"Deposit","nameLocations":["454:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":3932,"src":"454:7:26"},"id":4736,"nodeType":"InheritanceSpecifier","src":"454:7:26"},{"baseName":{"id":4737,"name":"TokenManager","nameLocations":["463:12:26"],"nodeType":"IdentifierPath","referencedDeclaration":6228,"src":"463:12:26"},"id":4738,"nodeType":"InheritanceSpecifier","src":"463:12:26"}],"canonicalName":"Staking","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5485,"linearizedBaseContracts":[5485,6228,2982,3068,3932,3973,3740],"name":"Staking","nameLocation":"435:7:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4741,"libraryName":{"id":4739,"name":"SafeMath","nameLocations":["488:8:26"],"nodeType":"IdentifierPath","referencedDeclaration":1850,"src":"488:8:26"},"nodeType":"UsingForDirective","src":"482:27:26","typeName":{"id":4740,"name":"uint256","nodeType":"ElementaryTypeName","src":"501:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"anonymous":false,"eventSelector":"44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa","id":4747,"name":"StakeBurned","nameLocation":"521:11:26","nodeType":"EventDefinition","parameters":{"id":4746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4743,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"541:6:26","nodeType":"VariableDeclaration","scope":4747,"src":"533:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"533:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4745,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"557:6:26","nodeType":"VariableDeclaration","scope":4747,"src":"549:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4744,"name":"uint256","nodeType":"ElementaryTypeName","src":"549:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:32:26"},"src":"515:50:26"},{"anonymous":false,"eventSelector":"f710aed018092bd38ab8d98fe9aa682f6b3aa552004e37cb2e0d6e3e669582ee","id":4756,"name":"StakeTaken","nameLocation":"576:10:26","nodeType":"EventDefinition","parameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4749,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"595:6:26","nodeType":"VariableDeclaration","scope":4756,"src":"587:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4751,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"611:6:26","nodeType":"VariableDeclaration","scope":4756,"src":"603:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4750,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4754,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"637:7:26","nodeType":"VariableDeclaration","scope":4756,"src":"619:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":4753,"nodeType":"UserDefinedTypeName","pathNode":{"id":4752,"name":"Structures.Tokens","nameLocations":["619:10:26","630:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"619:17:26"},"referencedDeclaration":2377,"src":"619:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"586:59:26"},"src":"570:76:26"},{"anonymous":false,"eventSelector":"7d53254b9393ec490c848e90ed920cf3b18c2151daa4b322875f24dd6301206c","id":4765,"name":"StakeAdded","nameLocation":"657:10:26","nodeType":"EventDefinition","parameters":{"id":4764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4758,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"676:6:26","nodeType":"VariableDeclaration","scope":4765,"src":"668:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"668:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4760,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"692:6:26","nodeType":"VariableDeclaration","scope":4765,"src":"684:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4759,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4763,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"718:7:26","nodeType":"VariableDeclaration","scope":4765,"src":"700:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":4762,"nodeType":"UserDefinedTypeName","pathNode":{"id":4761,"name":"Structures.Tokens","nameLocations":["700:10:26","711:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"700:17:26"},"referencedDeclaration":2377,"src":"700:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"667:59:26"},"src":"651:76:26"},{"body":{"id":4847,"nodeType":"Block","src":"906:703:26","statements":[{"assignments":[4783],"declarations":[{"constant":false,"id":4783,"mutability":"mutable","name":"currentStatus","nameLocation":"938:13:26","nodeType":"VariableDeclaration","scope":4847,"src":"916:35:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":4782,"nodeType":"UserDefinedTypeName","pathNode":{"id":4781,"name":"Structures.PostStatus","nameLocations":["916:10:26","927:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"916:21:26"},"referencedDeclaration":2373,"src":"916:21:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":4788,"initialValue":{"expression":{"expression":{"expression":{"id":4784,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"954:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"959:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"954:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4786,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"954:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4787,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"977:6:26","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"954:29:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"916:67:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":4794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4790,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"1014:13:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4791,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1031:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1042:10:26","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1031:21:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1053:8:26","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"1031:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"1014:47:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4795,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"1081:13:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4796,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1098:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1109:10:26","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1098:21:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:9:26","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"1098:31:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"1081:48:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1014:115:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1143:16:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":4789,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"993:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"993:176:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4803,"nodeType":"ExpressionStatement","src":"993:176:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4805,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"1188:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1202:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1188:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f5245515549524544","id":4808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1205:16:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_151fb58ee8e22d8ffcf94b96aa9d3ac58713988208feb07c984db8e3a5cdd4c4","typeString":"literal_string \"STAKE_REQUIRED\""},"value":"STAKE_REQUIRED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_151fb58ee8e22d8ffcf94b96aa9d3ac58713988208feb07c984db8e3a5cdd4c4","typeString":"literal_string \"STAKE_REQUIRED\""}],"id":4804,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1180:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1180:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4810,"nodeType":"ExpressionStatement","src":"1180:42:26"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4811,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"1237:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4812,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1248:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1259:6:26","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"1248:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":4814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1266:3:26","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"1248:21:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"1237:32:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4829,"nodeType":"IfStatement","src":"1233:212:26","trueBody":{"id":4828,"nodeType":"Block","src":"1271:174:26","statements":[{"expression":{"arguments":[{"id":4819,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"1329:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4820,"name":"funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"1354:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4823,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1386:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_Staking_$5485","typeString":"contract Staking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Staking_$5485","typeString":"contract Staking"}],"id":4822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1378:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4821,"name":"address","nodeType":"ElementaryTypeName","src":"1378:7:26","typeDescriptions":{}}},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1378:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4825,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"1409:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4816,"name":"TokenManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6228,"src":"1285:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenManager_$6228_$","typeString":"type(contract TokenManager)"}},"id":4818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1298:13:26","memberName":"_transferFrom","nodeType":"MemberAccess","referencedDeclaration":5927,"src":"1285:26:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,address,uint256)"}},"id":4826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1285:149:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4827,"nodeType":"ExpressionStatement","src":"1285:149:26"}]}},{"expression":{"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4830,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"1455:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4833,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"1491:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4834,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"1500:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4835,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"1508:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4831,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"1466:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1474:16:26","memberName":"_increaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3823,"src":"1466:24:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1466:54:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1455:65:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4838,"nodeType":"ExpressionStatement","src":"1455:65:26"},{"eventCall":{"arguments":[{"id":4840,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"1547:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4841,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"1555:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4842,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4768,"src":"1568:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":4839,"name":"StakeAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4765,"src":"1536:10:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_enum$_Tokens_$2377_$returns$__$","typeString":"function (bytes32,uint256,enum Structures.Tokens)"}},"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4844,"nodeType":"EmitStatement","src":"1531:45:26"},{"expression":{"id":4845,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"1594:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4778,"id":4846,"nodeType":"Return","src":"1587:15:26"}]},"id":4848,"implemented":true,"kind":"function","modifiers":[],"name":"_addStake","nameLocation":"742:9:26","nodeType":"FunctionDefinition","parameters":{"id":4775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4768,"mutability":"mutable","name":"tokenId","nameLocation":"779:7:26","nodeType":"VariableDeclaration","scope":4848,"src":"761:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":4767,"nodeType":"UserDefinedTypeName","pathNode":{"id":4766,"name":"Structures.Tokens","nameLocations":["761:10:26","772:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"761:17:26"},"referencedDeclaration":2377,"src":"761:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4770,"mutability":"mutable","name":"staker","nameLocation":"804:6:26","nodeType":"VariableDeclaration","scope":4848,"src":"796:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4769,"name":"bytes32","nodeType":"ElementaryTypeName","src":"796:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4772,"mutability":"mutable","name":"funder","nameLocation":"828:6:26","nodeType":"VariableDeclaration","scope":4848,"src":"820:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4771,"name":"address","nodeType":"ElementaryTypeName","src":"820:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4774,"mutability":"mutable","name":"amountToAdd","nameLocation":"852:11:26","nodeType":"VariableDeclaration","scope":4848,"src":"844:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4773,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"751:118:26"},"returnParameters":{"id":4778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4777,"mutability":"mutable","name":"newStake","nameLocation":"896:8:26","nodeType":"VariableDeclaration","scope":4848,"src":"888:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4776,"name":"uint256","nodeType":"ElementaryTypeName","src":"888:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"887:18:26"},"scope":5485,"src":"733:876:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4928,"nodeType":"Block","src":"1787:1021:26","statements":[{"assignments":[4866],"declarations":[{"constant":false,"id":4866,"mutability":"mutable","name":"currentStatus","nameLocation":"1920:13:26","nodeType":"VariableDeclaration","scope":4928,"src":"1898:35:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":4865,"nodeType":"UserDefinedTypeName","pathNode":{"id":4864,"name":"Structures.PostStatus","nameLocations":["1898:10:26","1909:10:26"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"1898:21:26"},"referencedDeclaration":2373,"src":"1898:21:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":4871,"initialValue":{"expression":{"expression":{"expression":{"id":4867,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1936:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":4868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1941:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1936:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":4869,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1950:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1936:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1959:6:26","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"1936:29:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"1898:67:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4873,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4866,"src":"2065:13:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4874,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2082:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2093:10:26","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2082:21:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2104:8:26","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"2082:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2065:47:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4878,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4866,"src":"2132:13:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4879,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2149:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2160:10:26","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2149:21:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":4881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2171:9:26","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"2149:31:26","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2132:48:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2065:115:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":4884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2194:16:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":4872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2044:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2044:176:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4886,"nodeType":"ExpressionStatement","src":"2044:176:26"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4887,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"2295:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4888,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2306:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2317:6:26","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"2306:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2324:3:26","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"2306:21:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"2295:32:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4909,"nodeType":"Block","src":"2517:75:26","statements":[{"expression":{"arguments":[{"id":4904,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"2554:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4905,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2563:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4906,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2568:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4901,"name":"TokenManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6228,"src":"2531:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenManager_$6228_$","typeString":"type(contract TokenManager)"}},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2544:9:26","memberName":"_transfer","nodeType":"MemberAccess","referencedDeclaration":5886,"src":"2531:22:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256)"}},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2531:50:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4908,"nodeType":"ExpressionStatement","src":"2531:50:26"}]},"id":4910,"nodeType":"IfStatement","src":"2291:301:26","trueBody":{"id":4900,"nodeType":"Block","src":"2329:182:26","statements":[{"expression":{"arguments":[{"id":4897,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2487:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4894,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"2473:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2465:8:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4892,"name":"address","nodeType":"ElementaryTypeName","src":"2465:8:26","stateMutability":"payable","typeDescriptions":{}}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2465:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2478:8:26","memberName":"transfer","nodeType":"MemberAccess","src":"2465:21:26","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2465:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4899,"nodeType":"ExpressionStatement","src":"2465:35:26"}]}},{"expression":{"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4911,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4860,"src":"2653:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4914,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"2689:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4915,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4853,"src":"2698:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4916,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2706:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4912,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"2664:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2672:16:26","memberName":"_decreaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3881,"src":"2664:24:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2664:55:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2653:66:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4919,"nodeType":"ExpressionStatement","src":"2653:66:26"},{"eventCall":{"arguments":[{"id":4921,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4853,"src":"2745:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4922,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"2753:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4923,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"2767:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":4920,"name":"StakeTaken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"2734:10:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_enum$_Tokens_$2377_$returns$__$","typeString":"function (bytes32,uint256,enum Structures.Tokens)"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2734:41:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4925,"nodeType":"EmitStatement","src":"2729:46:26"},{"expression":{"id":4926,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4860,"src":"2793:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4861,"id":4927,"nodeType":"Return","src":"2786:15:26"}]},"id":4929,"implemented":true,"kind":"function","modifiers":[],"name":"_takeStake","nameLocation":"1624:10:26","nodeType":"FunctionDefinition","parameters":{"id":4858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4851,"mutability":"mutable","name":"tokenId","nameLocation":"1662:7:26","nodeType":"VariableDeclaration","scope":4929,"src":"1644:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":4850,"nodeType":"UserDefinedTypeName","pathNode":{"id":4849,"name":"Structures.Tokens","nameLocations":["1644:10:26","1655:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1644:17:26"},"referencedDeclaration":2377,"src":"1644:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4853,"mutability":"mutable","name":"staker","nameLocation":"1687:6:26","nodeType":"VariableDeclaration","scope":4929,"src":"1679:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1679:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4855,"mutability":"mutable","name":"_to","nameLocation":"1711:3:26","nodeType":"VariableDeclaration","scope":4929,"src":"1703:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4854,"name":"address","nodeType":"ElementaryTypeName","src":"1703:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4857,"mutability":"mutable","name":"amountToTake","nameLocation":"1732:12:26","nodeType":"VariableDeclaration","scope":4929,"src":"1724:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4856,"name":"uint256","nodeType":"ElementaryTypeName","src":"1724:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1634:116:26"},"returnParameters":{"id":4861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4860,"mutability":"mutable","name":"newStake","nameLocation":"1777:8:26","nodeType":"VariableDeclaration","scope":4929,"src":"1769:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4859,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1768:18:26"},"scope":5485,"src":"1615:1193:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4960,"nodeType":"Block","src":"2963:182:26","statements":[{"assignments":[4942],"declarations":[{"constant":false,"id":4942,"mutability":"mutable","name":"currentDeposit","nameLocation":"2981:14:26","nodeType":"VariableDeclaration","scope":4960,"src":"2973:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4941,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4948,"initialValue":{"arguments":[{"id":4945,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"3018:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4946,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"3027:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4943,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"2998:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3006:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"2998:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2998:36:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2973:61:26"},{"assignments":[4950],"declarations":[{"constant":false,"id":4950,"mutability":"mutable","name":"newStake","nameLocation":"3053:8:26","nodeType":"VariableDeclaration","scope":4960,"src":"3045:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4949,"name":"uint256","nodeType":"ElementaryTypeName","src":"3045:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4957,"initialValue":{"arguments":[{"id":4952,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"3075:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4953,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"3084:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4954,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"3092:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4955,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"3097:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4951,"name":"_takeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"3064:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,address,uint256) returns (uint256)"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3064:48:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3045:67:26"},{"expression":{"id":4958,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"3130:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4940,"id":4959,"nodeType":"Return","src":"3123:15:26"}]},"id":4961,"implemented":true,"kind":"function","modifiers":[],"name":"_takeFullStake","nameLocation":"2823:14:26","nodeType":"FunctionDefinition","parameters":{"id":4937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4932,"mutability":"mutable","name":"tokenId","nameLocation":"2865:7:26","nodeType":"VariableDeclaration","scope":4961,"src":"2847:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":4931,"nodeType":"UserDefinedTypeName","pathNode":{"id":4930,"name":"Structures.Tokens","nameLocations":["2847:10:26","2858:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"2847:17:26"},"referencedDeclaration":2377,"src":"2847:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4934,"mutability":"mutable","name":"_to","nameLocation":"2890:3:26","nodeType":"VariableDeclaration","scope":4961,"src":"2882:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4933,"name":"address","nodeType":"ElementaryTypeName","src":"2882:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4936,"mutability":"mutable","name":"staker","nameLocation":"2911:6:26","nodeType":"VariableDeclaration","scope":4961,"src":"2903:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2903:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2837:86:26"},"returnParameters":{"id":4940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4939,"mutability":"mutable","name":"amountTaken","nameLocation":"2950:11:26","nodeType":"VariableDeclaration","scope":4961,"src":"2942:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4938,"name":"uint256","nodeType":"ElementaryTypeName","src":"2942:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2941:21:26"},"scope":5485,"src":"2814:331:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5044,"nodeType":"Block","src":"3302:703:26","statements":[{"assignments":[4974],"declarations":[{"constant":false,"id":4974,"mutability":"mutable","name":"newDeposit","nameLocation":"3320:10:26","nodeType":"VariableDeclaration","scope":5044,"src":"3312:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4973,"name":"uint256","nodeType":"ElementaryTypeName","src":"3312:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4981,"initialValue":{"arguments":[{"id":4977,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"3371:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":4978,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"3392:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4979,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"3412:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4975,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"3333:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3341:16:26","memberName":"_decreaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3881,"src":"3333:24:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3333:101:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3312:122:26"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4982,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"3449:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4983,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3460:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3471:6:26","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3460:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":4985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3478:3:26","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"3460:21:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3449:32:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5010,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"3735:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5011,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3746:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3757:6:26","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3746:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3764:3:26","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"3746:21:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3735:32:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5022,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"3834:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5023,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3845:10:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3856:6:26","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3845:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3863:4:26","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"3845:22:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3834:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5034,"nodeType":"IfStatement","src":"3830:92:26","trueBody":{"id":5033,"nodeType":"Block","src":"3869:53:26","statements":[{"expression":{"arguments":[{"id":5030,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"3898:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5027,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"3883:8:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3892:5:26","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":3010,"src":"3883:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3883:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5032,"nodeType":"ExpressionStatement","src":"3883:28:26"}]}},"id":5035,"nodeType":"IfStatement","src":"3731:191:26","trueBody":{"id":5021,"nodeType":"Block","src":"3769:55:26","statements":[{"expression":{"arguments":[{"id":5018,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"3800:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5015,"name":"BurnDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3783:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnDAI_$2982_$","typeString":"type(contract BurnDAI)"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3791:8:26","memberName":"_burnDai","nodeType":"MemberAccess","referencedDeclaration":2873,"src":"3783:16:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3783:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5020,"nodeType":"ExpressionStatement","src":"3783:30:26"}]}},"id":5036,"nodeType":"IfStatement","src":"3445:477:26","trueBody":{"id":5009,"nodeType":"Block","src":"3483:242:26","statements":[{"assignments":[4988,null],"declarations":[{"constant":false,"id":4988,"mutability":"mutable","name":"result","nameLocation":"3503:6:26","nodeType":"VariableDeclaration","scope":5009,"src":"3498:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4987,"name":"bool","nodeType":"ElementaryTypeName","src":"3498:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5003,"initialValue":{"arguments":[{"hexValue":"","id":5001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3667:2:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4992,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"3561:8:26","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3570:15:26","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"3561:24:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4991,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"3540:20:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3540:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3608:16:26","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":2235,"src":"3540:84:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_payable_$","typeString":"function () view external returns (address payable)"}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3540:86:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3515:8:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4989,"name":"address","nodeType":"ElementaryTypeName","src":"3515:8:26","stateMutability":"payable","typeDescriptions":{}}},"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3515:125:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3641:4:26","memberName":"call","nodeType":"MemberAccess","src":"3515:130:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4999,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"3653:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3515:151:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3515:155:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3497:173:26"},{"expression":{"arguments":[{"id":5005,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4988,"src":"3692:6:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43414c4c5f4641494c4544","id":5006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3700:13:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""},"value":"CALL_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""}],"id":5004,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3684:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3684:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5008,"nodeType":"ExpressionStatement","src":"3684:30:26"}]}},{"eventCall":{"arguments":[{"id":5038,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"3949:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5039,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"3957:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5037,"name":"StakeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4747,"src":"3937:11:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3937:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5041,"nodeType":"EmitStatement","src":"3932:38:26"},{"expression":{"id":5042,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"3988:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4972,"id":5043,"nodeType":"Return","src":"3981:17:26"}]},"id":5045,"implemented":true,"kind":"function","modifiers":[],"name":"_burnStake","nameLocation":"3160:10:26","nodeType":"FunctionDefinition","parameters":{"id":4969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4964,"mutability":"mutable","name":"tokenId","nameLocation":"3198:7:26","nodeType":"VariableDeclaration","scope":5045,"src":"3180:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":4963,"nodeType":"UserDefinedTypeName","pathNode":{"id":4962,"name":"Structures.Tokens","nameLocations":["3180:10:26","3191:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"3180:17:26"},"referencedDeclaration":2377,"src":"3180:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4966,"mutability":"mutable","name":"staker","nameLocation":"3223:6:26","nodeType":"VariableDeclaration","scope":5045,"src":"3215:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3215:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4968,"mutability":"mutable","name":"amountToBurn","nameLocation":"3247:12:26","nodeType":"VariableDeclaration","scope":5045,"src":"3239:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4967,"name":"uint256","nodeType":"ElementaryTypeName","src":"3239:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3170:95:26"},"returnParameters":{"id":4972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4971,"mutability":"mutable","name":"newStake","nameLocation":"3292:8:26","nodeType":"VariableDeclaration","scope":5045,"src":"3284:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4970,"name":"uint256","nodeType":"ElementaryTypeName","src":"3284:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3283:18:26"},"scope":5485,"src":"3151:854:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5071,"nodeType":"Block","src":"4140:164:26","statements":[{"assignments":[5056],"declarations":[{"constant":false,"id":5056,"mutability":"mutable","name":"currentDeposit","nameLocation":"4158:14:26","nodeType":"VariableDeclaration","scope":5071,"src":"4150:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5055,"name":"uint256","nodeType":"ElementaryTypeName","src":"4150:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5062,"initialValue":{"arguments":[{"id":5059,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"4195:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5060,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"4204:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5057,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"4175:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4183:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"4175:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4175:36:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4150:61:26"},{"expression":{"arguments":[{"id":5064,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"4233:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5065,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"4242:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5066,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"4250:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5063,"name":"_burnStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5045,"src":"4222:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,uint256) returns (uint256)"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4222:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5068,"nodeType":"ExpressionStatement","src":"4222:43:26"},{"expression":{"id":5069,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"4283:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5054,"id":5070,"nodeType":"Return","src":"4276:21:26"}]},"id":5072,"implemented":true,"kind":"function","modifiers":[],"name":"_burnFullStake","nameLocation":"4020:14:26","nodeType":"FunctionDefinition","parameters":{"id":5051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5048,"mutability":"mutable","name":"tokenId","nameLocation":"4062:7:26","nodeType":"VariableDeclaration","scope":5072,"src":"4044:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5047,"nodeType":"UserDefinedTypeName","pathNode":{"id":5046,"name":"Structures.Tokens","nameLocations":["4044:10:26","4055:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4044:17:26"},"referencedDeclaration":2377,"src":"4044:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5050,"mutability":"mutable","name":"staker","nameLocation":"4087:6:26","nodeType":"VariableDeclaration","scope":5072,"src":"4079:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4079:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4034:65:26"},"returnParameters":{"id":5054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5053,"mutability":"mutable","name":"amountBurned","nameLocation":"4126:12:26","nodeType":"VariableDeclaration","scope":5072,"src":"4118:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5052,"name":"uint256","nodeType":"ElementaryTypeName","src":"4118:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4117:22:26"},"scope":5485,"src":"4011:293:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5092,"nodeType":"Block","src":"4432:135:26","statements":[{"expression":{"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5082,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"4465:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5085,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5075,"src":"4494:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5086,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5077,"src":"4503:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5083,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"4474:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4482:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"4474:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4474:36:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4465:45:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5089,"nodeType":"ExpressionStatement","src":"4465:45:26"},{"expression":{"id":5090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"4554:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5081,"id":5091,"nodeType":"Return","src":"4547:13:26"}]},"functionSelector":"1b9f0a43","id":5093,"implemented":true,"kind":"function","modifiers":[],"name":"getStake","nameLocation":"4319:8:26","nodeType":"FunctionDefinition","parameters":{"id":5078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5075,"mutability":"mutable","name":"tokenId","nameLocation":"4355:7:26","nodeType":"VariableDeclaration","scope":5093,"src":"4337:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5074,"nodeType":"UserDefinedTypeName","pathNode":{"id":5073,"name":"Structures.Tokens","nameLocations":["4337:10:26","4348:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4337:17:26"},"referencedDeclaration":2377,"src":"4337:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5077,"mutability":"mutable","name":"staker","nameLocation":"4380:6:26","nodeType":"VariableDeclaration","scope":5093,"src":"4372:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5076,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4372:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4327:65:26"},"returnParameters":{"id":5081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5080,"mutability":"mutable","name":"amount","nameLocation":"4424:6:26","nodeType":"VariableDeclaration","scope":5093,"src":"4416:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5079,"name":"uint256","nodeType":"ElementaryTypeName","src":"4416:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4415:16:26"},"scope":5485,"src":"4310:257:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5131,"nodeType":"Block","src":"4631:378:26","statements":[{"assignments":[5099],"declarations":[{"constant":false,"id":5099,"mutability":"mutable","name":"amountSeller","nameLocation":"4649:12:26","nodeType":"VariableDeclaration","scope":5131,"src":"4641:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5098,"name":"uint256","nodeType":"ElementaryTypeName","src":"4641:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5111,"initialValue":{"arguments":[{"expression":{"expression":{"expression":{"id":5102,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4697:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4702:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4697:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5104,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4711:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4697:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5105,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4720:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"4697:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":5107,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"4751:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5108,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4770:13:26","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"4751:32:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5106,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4741:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4741:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5100,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"4664:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4672:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"4664:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4664:130:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4641:153:26"},{"assignments":[5113],"declarations":[{"constant":false,"id":5113,"mutability":"mutable","name":"amountBuyer","nameLocation":"4813:11:26","nodeType":"VariableDeclaration","scope":5131,"src":"4805:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5112,"name":"uint256","nodeType":"ElementaryTypeName","src":"4805:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5125,"initialValue":{"arguments":[{"expression":{"expression":{"expression":{"id":5116,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4860:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4865:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"4860:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4874:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"4860:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4883:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"4860:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":5121,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"4914:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5122,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4933:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"4914:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5120,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4904:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4904:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5114,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"4827:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4835:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"4827:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4827:129:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4805:151:26"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5126,"name":"amountSeller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5099,"src":"4975:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5127,"name":"amountBuyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"4990:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4975:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5129,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4974:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5097,"id":5130,"nodeType":"Return","src":"4967:35:26"}]},"functionSelector":"0917e776","id":5132,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalStaked","nameLocation":"4582:14:26","nodeType":"FunctionDefinition","parameters":{"id":5094,"nodeType":"ParameterList","parameters":[],"src":"4596:2:26"},"returnParameters":{"id":5097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5132,"src":"4622:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5095,"name":"uint256","nodeType":"ElementaryTypeName","src":"4622:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4621:9:26"},"scope":5485,"src":"4573:436:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5226,"nodeType":"Block","src":"5172:1125:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5145,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"5190:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5146,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"5201:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5206:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"5201:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5215:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"5201:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5224:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"5201:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"5190:41:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5233:13:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5144,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5182:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5153,"nodeType":"ExpressionStatement","src":"5182:65:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5155,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"5364:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5157,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"5394:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5413:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"5394:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5156,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5384:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5384:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5364:62:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5161,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"5446:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5163,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"5476:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5495:13:26","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"5476:32:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5162,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5466:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5466:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5446:63:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5364:145:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5641554c5449445f4d49534d41544348","id":5168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5523:18:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_b6a1afb5bd30b70f765e157bc14c4cc1caf674a53d1d23ec8e0c7109f2d02e48","typeString":"literal_string \"VAULTID_MISMATCH\""},"value":"VAULTID_MISMATCH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b6a1afb5bd30b70f765e157bc14c4cc1caf674a53d1d23ec8e0c7109f2d02e48","typeString":"literal_string \"VAULTID_MISMATCH\""}],"id":5154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5343:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5343:208:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5170,"nodeType":"ExpressionStatement","src":"5343:208:26"},{"assignments":[5172],"declarations":[{"constant":false,"id":5172,"mutability":"mutable","name":"actualAmountToAdd","nameLocation":"5645:17:26","nodeType":"VariableDeclaration","scope":5226,"src":"5637:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5171,"name":"uint256","nodeType":"ElementaryTypeName","src":"5637:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5184,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5173,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"5666:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5175,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"5708:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5176,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5727:13:26","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"5708:32:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5174,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5698:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5698:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5666:75:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5665:77:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5182,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"5781:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5665:127:26","trueExpression":{"expression":{"id":5180,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5757:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5761:5:26","memberName":"value","nodeType":"MemberAccess","src":"5757:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5637:155:26"},{"assignments":[5186],"declarations":[{"constant":false,"id":5186,"mutability":"mutable","name":"newStake","nameLocation":"5839:8:26","nodeType":"VariableDeclaration","scope":5226,"src":"5831:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5185,"name":"uint256","nodeType":"ElementaryTypeName","src":"5831:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5194,"initialValue":{"arguments":[{"id":5188,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"5873:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5189,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"5894:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5190,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"5924:8:26","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5933:13:26","memberName":"vaultContract","nodeType":"MemberAccess","referencedDeclaration":2401,"src":"5924:22:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5192,"name":"actualAmountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"5960:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5187,"name":"_addStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"5850:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,address,uint256) returns (uint256)"}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5850:137:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5831:156:26"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5195,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"6069:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5197,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"6099:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5198,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6118:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"6099:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5196,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6089:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6089:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6069:62:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5222,"nodeType":"Block","src":"6203:62:26","statements":[{"expression":{"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5212,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"6217:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6222:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"6217:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5217,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6231:6:26","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"6217:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6238:5:26","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"6217:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5219,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"6246:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6217:37:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5221,"nodeType":"ExpressionStatement","src":"6217:37:26"}]},"id":5223,"nodeType":"IfStatement","src":"6065:200:26","trueBody":{"id":5211,"nodeType":"Block","src":"6133:64:26","statements":[{"expression":{"id":5209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5201,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"6147:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6152:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"6147:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6161:6:26","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"6147:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6168:7:26","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"6147:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5208,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"6178:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6147:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5210,"nodeType":"ExpressionStatement","src":"6147:39:26"}]}},{"expression":{"id":5224,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"6282:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5143,"id":5225,"nodeType":"Return","src":"6275:15:26"}]},"functionSelector":"b52d2ce4","id":5227,"implemented":true,"kind":"function","modifiers":[],"name":"addStake","nameLocation":"5024:8:26","nodeType":"FunctionDefinition","parameters":{"id":5140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5135,"mutability":"mutable","name":"tokenId","nameLocation":"5060:7:26","nodeType":"VariableDeclaration","scope":5227,"src":"5042:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5134,"nodeType":"UserDefinedTypeName","pathNode":{"id":5133,"name":"Structures.Tokens","nameLocations":["5042:10:26","5053:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"5042:17:26"},"referencedDeclaration":2377,"src":"5042:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5137,"mutability":"mutable","name":"amountToAdd","nameLocation":"5085:11:26","nodeType":"VariableDeclaration","scope":5227,"src":"5077:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5136,"name":"uint256","nodeType":"ElementaryTypeName","src":"5077:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5139,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"5114:16:26","nodeType":"VariableDeclaration","scope":5227,"src":"5106:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5106:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5032:104:26"},"returnParameters":{"id":5143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5227,"src":"5163:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5141,"name":"uint256","nodeType":"ElementaryTypeName","src":"5163:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5162:9:26"},"scope":5485,"src":"5015:1282:26","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5319,"nodeType":"Block","src":"6508:778:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5243,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"6518:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":5244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6518:11:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5245,"nodeType":"ExpressionStatement","src":"6518:11:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5247,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"6548:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5248,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"6559:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5249,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6564:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"6559:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6573:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"6559:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6582:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"6559:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"6548:41:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6591:13:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5246,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6540:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6540:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5255,"nodeType":"ExpressionStatement","src":"6540:65:26"},{"assignments":[5257],"declarations":[{"constant":false,"id":5257,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"6624:16:26","nodeType":"VariableDeclaration","scope":5319,"src":"6616:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6616:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5263,"initialValue":{"arguments":[{"id":5259,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"6673:20:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5260,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"6707:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5261,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5238,"src":"6724:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5258,"name":"_commonTakeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"6643:16:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes32)"}},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6643:97:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6616:124:26"},{"assignments":[5265],"declarations":[{"constant":false,"id":5265,"mutability":"mutable","name":"currentDeposit","nameLocation":"6759:14:26","nodeType":"VariableDeclaration","scope":5319,"src":"6751:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5264,"name":"uint256","nodeType":"ElementaryTypeName","src":"6751:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5271,"initialValue":{"arguments":[{"id":5268,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"6796:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5269,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"6805:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5266,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"6776:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6784:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"6776:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6776:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6751:71:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5273,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"6840:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5274,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5232,"src":"6858:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6840:30:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f454e4f5547485f5354414b45","id":5276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6872:18:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_bce5c93b86a1c82e4c912864a93b831fa0d1cfe45a72342dea960488c01af669","typeString":"literal_string \"NOT_ENOUGH_STAKE\""},"value":"NOT_ENOUGH_STAKE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bce5c93b86a1c82e4c912864a93b831fa0d1cfe45a72342dea960488c01af669","typeString":"literal_string \"NOT_ENOUGH_STAKE\""}],"id":5272,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6832:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:59:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5278,"nodeType":"ExpressionStatement","src":"6832:59:26"},{"assignments":[5280],"declarations":[{"constant":false,"id":5280,"mutability":"mutable","name":"newBalance","nameLocation":"6910:10:26","nodeType":"VariableDeclaration","scope":5319,"src":"6902:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5279,"name":"uint256","nodeType":"ElementaryTypeName","src":"6902:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5287,"initialValue":{"arguments":[{"id":5282,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"6947:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5283,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"6968:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5284,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"6998:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5285,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5232,"src":"7015:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5281,"name":"_takeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"6923:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32,address,uint256) returns (uint256)"}},"id":5286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6923:114:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6902:135:26"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5288,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"7052:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5290,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"7082:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7101:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"7082:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5289,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7072:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7052:62:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5315,"nodeType":"Block","src":"7188:64:26","statements":[{"expression":{"id":5313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5305,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"7202:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7207:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"7202:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7216:6:26","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"7202:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7223:5:26","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"7202:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5312,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5280,"src":"7231:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7202:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5314,"nodeType":"ExpressionStatement","src":"7202:39:26"}]},"id":5316,"nodeType":"IfStatement","src":"7048:204:26","trueBody":{"id":5304,"nodeType":"Block","src":"7116:66:26","statements":[{"expression":{"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5294,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"7130:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7135:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"7130:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5299,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7144:6:26","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"7130:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7151:7:26","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"7130:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5301,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5280,"src":"7161:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7130:41:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5303,"nodeType":"ExpressionStatement","src":"7130:41:26"}]}},{"expression":{"id":5317,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5280,"src":"7269:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5242,"id":5318,"nodeType":"Return","src":"7262:17:26"}]},"functionSelector":"de5d7165","id":5320,"implemented":true,"kind":"function","modifiers":[],"name":"takeStake","nameLocation":"6312:9:26","nodeType":"FunctionDefinition","parameters":{"id":5239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5230,"mutability":"mutable","name":"tokenId","nameLocation":"6349:7:26","nodeType":"VariableDeclaration","scope":5320,"src":"6331:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5229,"nodeType":"UserDefinedTypeName","pathNode":{"id":5228,"name":"Structures.Tokens","nameLocations":["6331:10:26","6342:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"6331:17:26"},"referencedDeclaration":2377,"src":"6331:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5232,"mutability":"mutable","name":"amountToTake","nameLocation":"6374:12:26","nodeType":"VariableDeclaration","scope":5320,"src":"6366:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5231,"name":"uint256","nodeType":"ElementaryTypeName","src":"6366:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5234,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"6409:20:26","nodeType":"VariableDeclaration","scope":5320,"src":"6396:33:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5233,"name":"bytes","nodeType":"ElementaryTypeName","src":"6396:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5236,"mutability":"mutable","name":"_to","nameLocation":"6447:3:26","nodeType":"VariableDeclaration","scope":5320,"src":"6439:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5235,"name":"address","nodeType":"ElementaryTypeName","src":"6439:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5238,"mutability":"mutable","name":"_nonce","nameLocation":"6468:6:26","nodeType":"VariableDeclaration","scope":5320,"src":"6460:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6460:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6321:159:26"},"returnParameters":{"id":5242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5320,"src":"6499:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5240,"name":"uint256","nodeType":"ElementaryTypeName","src":"6499:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6498:9:26"},"scope":5485,"src":"6303:983:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5394,"nodeType":"Block","src":"7471:559:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5334,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"7481:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":5335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7481:11:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5336,"nodeType":"ExpressionStatement","src":"7481:11:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5338,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"7511:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5339,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"7522:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7527:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"7522:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7536:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"7522:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5342,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7545:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"7522:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"7511:41:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7554:13:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5337,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7503:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7503:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5346,"nodeType":"ExpressionStatement","src":"7503:65:26"},{"assignments":[5348],"declarations":[{"constant":false,"id":5348,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"7587:16:26","nodeType":"VariableDeclaration","scope":5394,"src":"7579:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7579:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5354,"initialValue":{"arguments":[{"id":5350,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"7636:20:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5351,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"7670:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5352,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5329,"src":"7687:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5349,"name":"_commonTakeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"7606:16:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes32)"}},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7606:97:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7579:124:26"},{"assignments":[5356],"declarations":[{"constant":false,"id":5356,"mutability":"mutable","name":"newBalance","nameLocation":"7722:10:26","nodeType":"VariableDeclaration","scope":5394,"src":"7714:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5355,"name":"uint256","nodeType":"ElementaryTypeName","src":"7714:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5362,"initialValue":{"arguments":[{"id":5358,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"7750:7:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5359,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"7759:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5360,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"7764:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5357,"name":"_takeFullStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"7735:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2377_$_t_address_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,bytes32) returns (uint256)"}},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7735:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7714:67:26"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5363,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5348,"src":"7796:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5365,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"7826:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7845:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"7826:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5364,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7816:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7816:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7796:62:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5390,"nodeType":"Block","src":"7932:64:26","statements":[{"expression":{"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5380,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"7946:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7951:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"7946:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7960:6:26","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"7946:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7967:5:26","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2484,"src":"7946:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5387,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"7975:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7946:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5389,"nodeType":"ExpressionStatement","src":"7946:39:26"}]},"id":5391,"nodeType":"IfStatement","src":"7792:204:26","trueBody":{"id":5379,"nodeType":"Block","src":"7860:66:26","statements":[{"expression":{"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5369,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"7874:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7879:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"7874:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7888:6:26","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2442,"src":"7874:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2491_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7895:7:26","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2486,"src":"7874:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5376,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"7905:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7874:41:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5378,"nodeType":"ExpressionStatement","src":"7874:41:26"}]}},{"expression":{"id":5392,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5356,"src":"8013:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5333,"id":5393,"nodeType":"Return","src":"8006:17:26"}]},"functionSelector":"4828000c","id":5395,"implemented":true,"kind":"function","modifiers":[],"name":"takeFullStake","nameLocation":"7301:13:26","nodeType":"FunctionDefinition","parameters":{"id":5330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5323,"mutability":"mutable","name":"tokenId","nameLocation":"7342:7:26","nodeType":"VariableDeclaration","scope":5395,"src":"7324:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5322,"nodeType":"UserDefinedTypeName","pathNode":{"id":5321,"name":"Structures.Tokens","nameLocations":["7324:10:26","7335:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"7324:17:26"},"referencedDeclaration":2377,"src":"7324:17:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5325,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"7372:20:26","nodeType":"VariableDeclaration","scope":5395,"src":"7359:33:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5324,"name":"bytes","nodeType":"ElementaryTypeName","src":"7359:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5327,"mutability":"mutable","name":"_to","nameLocation":"7410:3:26","nodeType":"VariableDeclaration","scope":5395,"src":"7402:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5326,"name":"address","nodeType":"ElementaryTypeName","src":"7402:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5329,"mutability":"mutable","name":"_nonce","nameLocation":"7431:6:26","nodeType":"VariableDeclaration","scope":5395,"src":"7423:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7423:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7314:129:26"},"returnParameters":{"id":5333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5395,"src":"7462:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5331,"name":"uint256","nodeType":"ElementaryTypeName","src":"7462:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7461:9:26"},"scope":5485,"src":"7292:738:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5416,"nodeType":"Block","src":"8101:229:26","statements":[{"expression":{"id":5412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5400,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"8134:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":5403,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"8176:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8181:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"8176:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8190:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"8176:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5406,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8199:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"8176:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":5408,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"8230:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5409,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8249:13:26","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"8230:32:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5407,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8220:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8220:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5401,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"8143:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8151:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"8143:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:130:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8134:139:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5413,"nodeType":"ExpressionStatement","src":"8134:139:26"},{"expression":{"id":5414,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"8317:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5399,"id":5415,"nodeType":"Return","src":"8310:13:26"}]},"functionSelector":"5c63ed69","id":5417,"implemented":true,"kind":"function","modifiers":[],"name":"getSellerStake","nameLocation":"8045:14:26","nodeType":"FunctionDefinition","parameters":{"id":5396,"nodeType":"ParameterList","parameters":[],"src":"8059:2:26"},"returnParameters":{"id":5399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5398,"mutability":"mutable","name":"amount","nameLocation":"8093:6:26","nodeType":"VariableDeclaration","scope":5417,"src":"8085:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5397,"name":"uint256","nodeType":"ElementaryTypeName","src":"8085:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8084:16:26"},"scope":5485,"src":"8036:294:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5438,"nodeType":"Block","src":"8400:228:26","statements":[{"expression":{"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5422,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"8433:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":5425,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"8475:4:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8480:8:26","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"8475:13:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8489:8:26","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"8475:22:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8498:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2468,"src":"8475:30:26","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"arguments":[{"expression":{"id":5430,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"8529:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8548:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"8529:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5429,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8519:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8519:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5423,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"8442:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$3932_$","typeString":"type(contract Deposit)"}},"id":5424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8450:11:26","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"8442:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,bytes32) view returns (uint256)"}},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:129:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8433:138:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5435,"nodeType":"ExpressionStatement","src":"8433:138:26"},{"expression":{"id":5436,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"8615:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5421,"id":5437,"nodeType":"Return","src":"8608:13:26"}]},"functionSelector":"4c38d877","id":5439,"implemented":true,"kind":"function","modifiers":[],"name":"getBuyerStake","nameLocation":"8345:13:26","nodeType":"FunctionDefinition","parameters":{"id":5418,"nodeType":"ParameterList","parameters":[],"src":"8358:2:26"},"returnParameters":{"id":5421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5420,"mutability":"mutable","name":"amount","nameLocation":"8392:6:26","nodeType":"VariableDeclaration","scope":5439,"src":"8384:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5419,"name":"uint256","nodeType":"ElementaryTypeName","src":"8384:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8383:16:26"},"scope":5485,"src":"8336:292:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5483,"nodeType":"Block","src":"8786:445:26","statements":[{"assignments":[5451,null,null,null],"declarations":[{"constant":false,"id":5451,"mutability":"mutable","name":"vaultId","nameLocation":"8810:7:26","nodeType":"VariableDeclaration","scope":5483,"src":"8797:20:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5450,"name":"bytes","nodeType":"ElementaryTypeName","src":"8797:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},null,null,null],"id":5457,"initialValue":{"arguments":[{"id":5453,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"8853:20:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5454,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"8887:3:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5455,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"8904:6:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5452,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"8827:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8827:93:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"8796:124:26"},{"assignments":[5459],"declarations":[{"constant":false,"id":5459,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"8938:16:26","nodeType":"VariableDeclaration","scope":5483,"src":"8930:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8930:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5463,"initialValue":{"arguments":[{"id":5461,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"8967:7:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5460,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8957:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8957:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8930:45:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5465,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"9007:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5467,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"9037:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9056:12:26","memberName":"vaultIdBuyer","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"9037:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5466,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9027:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9027:42:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9007:62:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5471,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"9089:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"id":5473,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"9119:18:26","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5474,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9138:13:26","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"9119:32:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5472,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9109:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9109:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9089:63:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9007:145:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"554e415554484f52495a4544","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9166:14:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528","typeString":"literal_string \"UNAUTHORIZED\""},"value":"UNAUTHORIZED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528","typeString":"literal_string \"UNAUTHORIZED\""}],"id":5464,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8986:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8986:204:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"ExpressionStatement","src":"8986:204:26"},{"expression":{"id":5481,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"9208:16:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5449,"id":5482,"nodeType":"Return","src":"9201:23:26"}]},"id":5484,"implemented":true,"kind":"function","modifiers":[],"name":"_commonTakeStake","nameLocation":"8643:16:26","nodeType":"FunctionDefinition","parameters":{"id":5446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5441,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"8682:20:26","nodeType":"VariableDeclaration","scope":5484,"src":"8669:33:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5440,"name":"bytes","nodeType":"ElementaryTypeName","src":"8669:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5443,"mutability":"mutable","name":"_to","nameLocation":"8720:3:26","nodeType":"VariableDeclaration","scope":5484,"src":"8712:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5442,"name":"address","nodeType":"ElementaryTypeName","src":"8712:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5445,"mutability":"mutable","name":"_nonce","nameLocation":"8741:6:26","nodeType":"VariableDeclaration","scope":5484,"src":"8733:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8733:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8659:94:26"},"returnParameters":{"id":5449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5484,"src":"8777:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8777:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8776:9:26"},"scope":5485,"src":"8634:597:26","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5486,"src":"417:8816:26","usedErrors":[]}],"src":"344:8890:26"},"id":26},"contracts/modules/Submission.sol":{"ast":{"absolutePath":"contracts/modules/Submission.sol","exportedSymbols":{"Data":[3740],"ECDSA":[672],"Events":[3973],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"Math":[1538],"SignedMath":[1955],"Strings":[306],"Structures":[2547],"Submission":[5739]},"id":5740,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5487,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"223:23:27"},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":5488,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5740,"sourceUnit":3974,"src":"250:22:27","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5489,"name":"Events","nameLocations":["308:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":3973,"src":"308:6:27"},"id":5490,"nodeType":"InheritanceSpecifier","src":"308:6:27"}],"canonicalName":"Submission","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5739,"linearizedBaseContracts":[5739,3973,3740],"name":"Submission","nameLocation":"294:10:27","nodeType":"ContractDefinition","nodes":[{"body":{"id":5620,"nodeType":"Block","src":"493:1195:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5501,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"504:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"504:11:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5503,"nodeType":"ExpressionStatement","src":"504:11:27"},{"assignments":[5508],"declarations":[{"constant":false,"id":5508,"mutability":"mutable","name":"currentStatus","nameLocation":"550:13:27","nodeType":"VariableDeclaration","scope":5620,"src":"528:35:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":5507,"nodeType":"UserDefinedTypeName","pathNode":{"id":5506,"name":"Structures.PostStatus","nameLocations":["528:10:27","539:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"528:21:27"},"referencedDeclaration":2373,"src":"528:21:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":5513,"initialValue":{"expression":{"expression":{"expression":{"id":5509,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"566:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"571:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"566:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5511,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"580:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"566:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"589:6:27","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"566:29:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"528:67:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5515,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"628:13:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":5520,"indexExpression":{"arguments":[{"id":5518,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5508,"src":"648:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":5517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"642:5:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5516,"name":"uint8","nodeType":"ElementaryTypeName","src":"642:5:27","typeDescriptions":{}}},"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"642:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"628:35:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":5525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5521,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5508,"src":"685:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5522,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"702:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"713:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"702:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"724:8:27","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"702:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"685:47:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5526,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5508,"src":"757:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5527,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"774:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"785:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"774:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"796:9:27","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"774:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"757:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"685:120:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5532,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"684:122:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"628:178:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f535441545553","id":5534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"821:14:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_799044dda81aa11039c3815f0baad81f925e59549ce2d526ba1961342a16a954","typeString":"literal_string \"WRONG_STATUS\""},"value":"WRONG_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_799044dda81aa11039c3815f0baad81f925e59549ce2d526ba1961342a16a954","typeString":"literal_string \"WRONG_STATUS\""}],"id":5514,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"606:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"606:240:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5536,"nodeType":"ExpressionStatement","src":"606:240:27"},{"assignments":[5538,null,null,null],"declarations":[{"constant":false,"id":5538,"mutability":"mutable","name":"vaultId","nameLocation":"873:7:27","nodeType":"VariableDeclaration","scope":5620,"src":"860:20:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5537,"name":"bytes","nodeType":"ElementaryTypeName","src":"860:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},null,null,null],"id":5544,"initialValue":{"arguments":[{"id":5540,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"917:20:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5541,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5496,"src":"952:3:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5542,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"970:6:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5539,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"890:12:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"890:97:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"859:128:27"},{"assignments":[5546],"declarations":[{"constant":false,"id":5546,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"1006:16:27","nodeType":"VariableDeclaration","scope":5620,"src":"998:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5545,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5550,"initialValue":{"arguments":[{"id":5548,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"1035:7:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5547,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1025:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1025:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"998:45:27"},{"expression":{"arguments":[{"arguments":[{"id":5557,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"1158:16:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[{"expression":{"id":5553,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1093:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5554,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1102:19:27","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2395,"src":"1093:28:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5552,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"1078:14:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2342_$","typeString":"type(contract IMecenateUsers)"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1078:44:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2342","typeString":"contract IMecenateUsers"}},"id":5556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1123:16:27","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":2314,"src":"1078:61:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view external returns (bool)"}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1078:111:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5573657220646f6573206e6f74206578697374","id":5559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1204:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1","typeString":"literal_string \"User does not exist\""},"value":"User does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1","typeString":"literal_string \"User does not exist\""}],"id":5551,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1056:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:180:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5561,"nodeType":"ExpressionStatement","src":"1056:180:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5563,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1255:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:7:27","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":2432,"src":"1255:12:27","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2494_storage","typeString":"struct Structures.User storage ref"}},"id":5565,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1268:7:27","memberName":"vaultId","nodeType":"MemberAccess","referencedDeclaration":2493,"src":"1255:20:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5566,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"1279:16:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1255:40:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c4552","id":5568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1297:12:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""},"value":"NOT_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""}],"id":5562,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1247:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1247:63:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5570,"nodeType":"ExpressionStatement","src":"1247:63:27"},{"expression":{"arguments":[{"expression":{"expression":{"id":5572,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1337:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1348:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1337:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1359:9:27","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"1337:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":5571,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"1323:13:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2373_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1323:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5576,"nodeType":"ExpressionStatement","src":"1323:46:27"},{"expression":{"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5577,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"1382:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5579,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1391:13:27","memberName":"encodedSymKey","nodeType":"MemberAccess","referencedDeclaration":2405,"src":"1382:22:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5580,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1407:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5581,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1412:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1407:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1421:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2445,"src":"1407:18:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_storage","typeString":"struct Structures.PostEncryptedData storage ref"}},"id":5583,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1426:12:27","memberName":"encryptedKey","nodeType":"MemberAccess","referencedDeclaration":2450,"src":"1407:31:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5584,"name":"encryptedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5492,"src":"1441:12:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1407:46:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"src":"1382:71:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5587,"nodeType":"ExpressionStatement","src":"1382:71:27"},{"expression":{"id":5598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5588,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1464:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1469:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1464:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5593,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1478:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1464:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5594,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1487:6:27","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"1464:29:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":5595,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1496:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1507:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"1496:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1518:9:27","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"1496:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"1464:63:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":5599,"nodeType":"ExpressionStatement","src":"1464:63:27"},{"expression":{"id":5614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5600,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1538:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1543:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1538:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5605,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1552:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1538:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5606,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1561:12:27","memberName":"endTimeStamp","nodeType":"MemberAccess","referencedDeclaration":2463,"src":"1538:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5607,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1589:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1595:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"1589:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"expression":{"expression":{"id":5609,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1620:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5610,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1625:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1620:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1634:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1620:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1643:8:27","memberName":"duration","nodeType":"MemberAccess","referencedDeclaration":2465,"src":"1620:31:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1589:62:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1538:113:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5615,"nodeType":"ExpressionStatement","src":"1538:113:27"},{"eventCall":{"arguments":[{"id":5617,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1675:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}],"id":5616,"name":"Valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"1669:5:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:11:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5619,"nodeType":"EmitStatement","src":"1664:16:27"}]},"functionSelector":"b43f4f75","id":5621,"implemented":true,"kind":"function","modifiers":[],"name":"submitHash","nameLocation":"331:10:27","nodeType":"FunctionDefinition","parameters":{"id":5499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5492,"mutability":"mutable","name":"encryptedKey","nameLocation":"365:12:27","nodeType":"VariableDeclaration","scope":5621,"src":"352:25:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5491,"name":"bytes","nodeType":"ElementaryTypeName","src":"352:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5494,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"401:20:27","nodeType":"VariableDeclaration","scope":5621,"src":"388:33:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5493,"name":"bytes","nodeType":"ElementaryTypeName","src":"388:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5496,"mutability":"mutable","name":"_to","nameLocation":"440:3:27","nodeType":"VariableDeclaration","scope":5621,"src":"432:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5495,"name":"address","nodeType":"ElementaryTypeName","src":"432:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5498,"mutability":"mutable","name":"_nonce","nameLocation":"462:6:27","nodeType":"VariableDeclaration","scope":5621,"src":"454:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"454:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"341:134:27"},"returnParameters":{"id":5500,"nodeType":"ParameterList","parameters":[],"src":"493:0:27"},"scope":5739,"src":"322:1366:27","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":5737,"nodeType":"Block","src":"1891:1100:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5634,"name":"onlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"1902:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":5635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1902:11:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5636,"nodeType":"ExpressionStatement","src":"1902:11:27"},{"assignments":[5641],"declarations":[{"constant":false,"id":5641,"mutability":"mutable","name":"currentStatus","nameLocation":"1948:13:27","nodeType":"VariableDeclaration","scope":5737,"src":"1926:35:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"typeName":{"id":5640,"nodeType":"UserDefinedTypeName","pathNode":{"id":5639,"name":"Structures.PostStatus","nameLocations":["1926:10:27","1937:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":2373,"src":"1926:21:27"},"referencedDeclaration":2373,"src":"1926:21:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":5646,"initialValue":{"expression":{"expression":{"expression":{"id":5642,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1964:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5643,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1969:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"1964:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1978:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"1964:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1987:6:27","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"1964:29:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"1926:67:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5648,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"2026:13:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":5653,"indexExpression":{"arguments":[{"id":5651,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5641,"src":"2046:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}],"id":5650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2040:5:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5649,"name":"uint8","nodeType":"ElementaryTypeName","src":"2040:5:27","typeDescriptions":{}}},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2040:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2026:35:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5654,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5641,"src":"2083:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5655,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2100:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2111:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2100:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2122:9:27","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2368,"src":"2100:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2083:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":5663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5659,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5641,"src":"2156:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5660,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2173:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2184:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2173:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2195:8:27","memberName":"Revealed","nodeType":"MemberAccess","referencedDeclaration":2371,"src":"2173:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2156:47:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2083:120:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":5669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5665,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5641,"src":"2228:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5666,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2245:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2256:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2245:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2267:9:27","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":2369,"src":"2245:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2228:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2083:193:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5671,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2082:195:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2026:251:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":5673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2292:16:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":5647,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2004:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2004:315:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5675,"nodeType":"ExpressionStatement","src":"2004:315:27"},{"assignments":[5677,null,null,null],"declarations":[{"constant":false,"id":5677,"mutability":"mutable","name":"vaultId","nameLocation":"2346:7:27","nodeType":"VariableDeclaration","scope":5737,"src":"2333:20:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5676,"name":"bytes","nodeType":"ElementaryTypeName","src":"2333:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},null,null,null],"id":5683,"initialValue":{"arguments":[{"id":5679,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"2390:20:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5680,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"2425:3:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5681,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5629,"src":"2443:6:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5678,"name":"_verifyNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"2363:12:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,address,bytes32) view returns (bytes memory,uint256,uint256,bytes memory)"}},"id":5682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2363:97:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(bytes memory,uint256,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2332:128:27"},{"assignments":[5685],"declarations":[{"constant":false,"id":5685,"mutability":"mutable","name":"encryptedVaultId","nameLocation":"2479:16:27","nodeType":"VariableDeclaration","scope":5737,"src":"2471:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5684,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2471:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5689,"initialValue":{"arguments":[{"id":5687,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"2508:7:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5686,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2498:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2498:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2471:45:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5691,"name":"encryptedVaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"2551:16:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"expression":{"id":5693,"name":"postSettingPrivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2581:18:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettingPrivate_$2482_storage","typeString":"struct Structures.PostSettingPrivate storage ref"}},"id":5694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2600:13:27","memberName":"vaultIdSeller","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"2581:32:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":5692,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2571:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2571:43:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2551:63:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"594f555f4152455f5448455f53454c4c4552","id":5697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2629:20:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""},"value":"YOU_ARE_THE_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""}],"id":5690,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2529:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2529:131:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5699,"nodeType":"ExpressionStatement","src":"2529:131:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"},"id":5705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5701,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5641,"src":"2693:13:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5702,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2710:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2721:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2710:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2732:9:27","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":2369,"src":"2710:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2693:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f46494e414c495a4544","id":5706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2756:15:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c52b4ebd065593469a3c7d1425274a5bc8f1f01ff55e53236e5ea4b4745c5e01","typeString":"literal_string \"NOT_FINALIZED\""},"value":"NOT_FINALIZED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c52b4ebd065593469a3c7d1425274a5bc8f1f01ff55e53236e5ea4b4745c5e01","typeString":"literal_string \"NOT_FINALIZED\""}],"id":5700,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2671:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2671:111:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5708,"nodeType":"ExpressionStatement","src":"2671:111:27"},{"expression":{"id":5717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5709,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2795:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2800:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2795:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5714,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2809:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2445,"src":"2795:18:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2453_storage","typeString":"struct Structures.PostEncryptedData storage ref"}},"id":5715,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2814:13:27","memberName":"decryptedData","nodeType":"MemberAccess","referencedDeclaration":2452,"src":"2795:32:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5716,"name":"decryptedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"2830:13:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2795:48:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5718,"nodeType":"ExpressionStatement","src":"2795:48:27"},{"expression":{"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5719,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2854:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}},"id":5723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2859:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"2854:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2446_storage","typeString":"struct Structures.PostData storage ref"}},"id":5724,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2868:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2439,"src":"2854:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2469_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2877:6:27","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2456,"src":"2854:29:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":5726,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2886:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2373,"src":"2886:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2373_$","typeString":"type(enum Structures.PostStatus)"}},"id":5728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2908:8:27","memberName":"Revealed","nodeType":"MemberAccess","referencedDeclaration":2371,"src":"2886:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"src":"2854:62:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2373","typeString":"enum Structures.PostStatus"}},"id":5730,"nodeType":"ExpressionStatement","src":"2854:62:27"},{"eventCall":{"arguments":[{"id":5732,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2945:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2436_storage","typeString":"struct Structures.Post storage ref"}],"id":5731,"name":"MadePublic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"2934:10:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2436_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2934:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5734,"nodeType":"EmitStatement","src":"2929:21:27"},{"expression":{"id":5735,"name":"decryptedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"2970:13:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5633,"id":5736,"nodeType":"Return","src":"2963:20:27"}]},"functionSelector":"30a0680c","id":5738,"implemented":true,"kind":"function","modifiers":[],"name":"revealData","nameLocation":"1705:10:27","nodeType":"FunctionDefinition","parameters":{"id":5630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5623,"mutability":"mutable","name":"decryptedData","nameLocation":"1739:13:27","nodeType":"VariableDeclaration","scope":5738,"src":"1726:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5622,"name":"bytes","nodeType":"ElementaryTypeName","src":"1726:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5625,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"1776:20:27","nodeType":"VariableDeclaration","scope":5738,"src":"1763:33:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5624,"name":"bytes","nodeType":"ElementaryTypeName","src":"1763:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5627,"mutability":"mutable","name":"_to","nameLocation":"1815:3:27","nodeType":"VariableDeclaration","scope":5738,"src":"1807:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5626,"name":"address","nodeType":"ElementaryTypeName","src":"1807:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5629,"mutability":"mutable","name":"_nonce","nameLocation":"1837:6:27","nodeType":"VariableDeclaration","scope":5738,"src":"1829:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1829:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1715:135:27"},"returnParameters":{"id":5633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5738,"src":"1877:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5631,"name":"bytes","nodeType":"ElementaryTypeName","src":"1877:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1876:14:27"},"scope":5739,"src":"1696:1295:27","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":5740,"src":"276:2718:27","usedErrors":[]}],"src":"223:2773:27"},"id":27},"contracts/modules/TokenManager.sol":{"ast":{"absolutePath":"contracts/modules/TokenManager.sol","exportedSymbols":{"BurnDAI":[2982],"BurnMUSE":[3068],"Data":[3740],"ECDSA":[672],"Events":[3973],"IERC20":[77],"IMUSE":[2158],"IMecenateFeed":[2223],"IMecenateFeedFactory":[2291],"IMecenateTreasury":[2304],"IMecenateUsers":[2342],"IMecenateVerifier":[2362],"ISwapRouter":[2069],"IUniswapV3SwapCallback":[1969],"Math":[1538],"SafeMath":[1850],"SignedMath":[1955],"Strings":[306],"Structures":[2547],"TokenManager":[6228]},"id":6229,"nodeType":"SourceUnit","nodes":[{"id":5741,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:28"},{"absolutePath":"contracts/modules/BurnDAI.sol","file":"./BurnDAI.sol","id":5742,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6229,"sourceUnit":2983,"src":"25:23:28","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5743,"name":"BurnDAI","nameLocations":["84:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":2982,"src":"84:7:28"},"id":5744,"nodeType":"InheritanceSpecifier","src":"84:7:28"}],"canonicalName":"TokenManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6228,"linearizedBaseContracts":[6228,2982,3068,3973,3740],"name":"TokenManager","nameLocation":"68:12:28","nodeType":"ContractDefinition","nodes":[{"body":{"id":5777,"nodeType":"Block","src":"197:208:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5752,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5747,"src":"211:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5753,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"222:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"233:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"222:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"240:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"222:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"211:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5761,"nodeType":"IfStatement","src":"207:70:28","trueBody":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5757,"name":"BurnDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"252:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnDAI_$2982_$","typeString":"type(contract BurnDAI)"}},"id":5758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"260:15:28","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":2887,"src":"252:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"252:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5751,"id":5760,"nodeType":"Return","src":"245:32:28"}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5762,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5747,"src":"291:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5763,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"302:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"313:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"302:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"320:4:28","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"302:22:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"291:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5771,"nodeType":"IfStatement","src":"287:84:28","trueBody":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5767,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"345:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"354:15:28","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"345:24:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"345:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5751,"id":5770,"nodeType":"Return","src":"338:33:28"}},{"expression":{"arguments":[{"hexValue":"30","id":5774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"396:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"388:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5772,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:28","typeDescriptions":{}}},"id":5775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"388:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5751,"id":5776,"nodeType":"Return","src":"381:17:28"}]},"id":5778,"implemented":true,"kind":"function","modifiers":[],"name":"_getTokenAddress","nameLocation":"107:16:28","nodeType":"FunctionDefinition","parameters":{"id":5748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5747,"mutability":"mutable","name":"tokenID","nameLocation":"151:7:28","nodeType":"VariableDeclaration","scope":5778,"src":"133:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5746,"nodeType":"UserDefinedTypeName","pathNode":{"id":5745,"name":"Structures.Tokens","nameLocations":["133:10:28","144:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"133:17:28"},"referencedDeclaration":2377,"src":"133:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"123:41:28"},"returnParameters":{"id":5751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5778,"src":"188:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5749,"name":"address","nodeType":"ElementaryTypeName","src":"188:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"187:9:28"},"scope":6228,"src":"98:307:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5809,"nodeType":"Block","src":"556:193:28","statements":[{"assignments":[5791],"declarations":[{"constant":false,"id":5791,"mutability":"mutable","name":"tokenAddress","nameLocation":"574:12:28","nodeType":"VariableDeclaration","scope":5809,"src":"566:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5790,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5795,"initialValue":{"arguments":[{"id":5793,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5781,"src":"606:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":5792,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"589:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"589:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"566:48:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5801,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"676:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5802,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5785,"src":"682:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":5798,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5791,"src":"652:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5797,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"645:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"645:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"666:9:28","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"645:30:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":5803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"645:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"689:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"645:49:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e53554646494349454e545f414c4c4f57414e4345","id":5806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"708:24:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_766e240ea71a1fa1f50bcdafcabfc952771c7bce143ed2fb6cc99408373684b8","typeString":"literal_string \"INSUFFICIENT_ALLOWANCE\""},"value":"INSUFFICIENT_ALLOWANCE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_766e240ea71a1fa1f50bcdafcabfc952771c7bce143ed2fb6cc99408373684b8","typeString":"literal_string \"INSUFFICIENT_ALLOWANCE\""}],"id":5796,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"624:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"624:118:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5808,"nodeType":"ExpressionStatement","src":"624:118:28"}]},"id":5810,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAllowance","nameLocation":"420:15:28","nodeType":"FunctionDefinition","parameters":{"id":5788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5781,"mutability":"mutable","name":"tokenID","nameLocation":"463:7:28","nodeType":"VariableDeclaration","scope":5810,"src":"445:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5780,"nodeType":"UserDefinedTypeName","pathNode":{"id":5779,"name":"Structures.Tokens","nameLocations":["445:10:28","456:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"445:17:28"},"referencedDeclaration":2377,"src":"445:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5783,"mutability":"mutable","name":"from","nameLocation":"488:4:28","nodeType":"VariableDeclaration","scope":5810,"src":"480:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5782,"name":"address","nodeType":"ElementaryTypeName","src":"480:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5785,"mutability":"mutable","name":"to","nameLocation":"510:2:28","nodeType":"VariableDeclaration","scope":5810,"src":"502:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5784,"name":"address","nodeType":"ElementaryTypeName","src":"502:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5787,"mutability":"mutable","name":"value","nameLocation":"530:5:28","nodeType":"VariableDeclaration","scope":5810,"src":"522:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5786,"name":"uint256","nodeType":"ElementaryTypeName","src":"522:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"435:106:28"},"returnParameters":{"id":5789,"nodeType":"ParameterList","parameters":[],"src":"556:0:28"},"scope":6228,"src":"411:338:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5837,"nodeType":"Block","src":"808:223:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5816,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"839:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5817,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"850:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"861:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"850:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"868:4:28","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"850:22:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"839:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5821,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"892:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5822,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"903:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"914:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"903:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"921:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"903:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"892:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"839:85:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5827,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"944:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5828,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"955:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"966:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"955:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"973:3:28","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"955:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"944:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"839:137:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"990:13:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5815,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"818:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"818:195:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5835,"nodeType":"ExpressionStatement","src":"818:195:28"},{"id":5836,"nodeType":"PlaceholderStatement","src":"1023:1:28"}]},"id":5838,"name":"onlyValidTokenID","nameLocation":"764:16:28","nodeType":"ModifierDefinition","parameters":{"id":5814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5813,"mutability":"mutable","name":"tokenID","nameLocation":"799:7:28","nodeType":"VariableDeclaration","scope":5838,"src":"781:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5812,"nodeType":"UserDefinedTypeName","pathNode":{"id":5811,"name":"Structures.Tokens","nameLocations":["781:10:28","792:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"781:17:28"},"referencedDeclaration":2377,"src":"781:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"780:27:28"},"src":"755:276:28","virtual":false,"visibility":"internal"},{"body":{"id":5858,"nodeType":"Block","src":"1140:117:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5846,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"1169:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5847,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1180:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1191:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"1180:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1198:4:28","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"1180:22:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"1169:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5851,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"1218:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5852,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"1229:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1240:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"1229:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1247:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"1229:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"1218:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1169:81:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5845,"id":5857,"nodeType":"Return","src":"1150:100:28"}]},"id":5859,"implemented":true,"kind":"function","modifiers":[],"name":"isValidTokenID","nameLocation":"1046:14:28","nodeType":"FunctionDefinition","parameters":{"id":5842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5841,"mutability":"mutable","name":"tokenID","nameLocation":"1088:7:28","nodeType":"VariableDeclaration","scope":5859,"src":"1070:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5840,"nodeType":"UserDefinedTypeName","pathNode":{"id":5839,"name":"Structures.Tokens","nameLocations":["1070:10:28","1081:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1070:17:28"},"referencedDeclaration":2377,"src":"1070:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"1060:41:28"},"returnParameters":{"id":5845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5844,"mutability":"mutable","name":"validity","nameLocation":"1130:8:28","nodeType":"VariableDeclaration","scope":5859,"src":"1125:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5843,"name":"bool","nodeType":"ElementaryTypeName","src":"1125:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1124:15:28"},"scope":6228,"src":"1037:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5885,"nodeType":"Block","src":"1401:132:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":5879,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5864,"src":"1475:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"1479:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":5875,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"1456:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":5874,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"1439:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1439:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5873,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1432:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1432:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1466:8:28","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":44,"src":"1432:42:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1432:53:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5452414e534645525f4641494c4544","id":5882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1499:17:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""},"value":"TRANSFER_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""}],"id":5872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1411:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1411:115:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5884,"nodeType":"ExpressionStatement","src":"1411:115:28"}]},"id":5886,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5869,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"1392:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":5870,"kind":"modifierInvocation","modifierName":{"id":5868,"name":"onlyValidTokenID","nameLocations":["1375:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"1375:16:28"},"nodeType":"ModifierInvocation","src":"1375:25:28"}],"name":"_transfer","nameLocation":"1272:9:28","nodeType":"FunctionDefinition","parameters":{"id":5867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5862,"mutability":"mutable","name":"tokenID","nameLocation":"1309:7:28","nodeType":"VariableDeclaration","scope":5886,"src":"1291:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5861,"nodeType":"UserDefinedTypeName","pathNode":{"id":5860,"name":"Structures.Tokens","nameLocations":["1291:10:28","1302:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1291:17:28"},"referencedDeclaration":2377,"src":"1291:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5864,"mutability":"mutable","name":"to","nameLocation":"1334:2:28","nodeType":"VariableDeclaration","scope":5886,"src":"1326:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5863,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5866,"mutability":"mutable","name":"value","nameLocation":"1354:5:28","nodeType":"VariableDeclaration","scope":5886,"src":"1346:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5865,"name":"uint256","nodeType":"ElementaryTypeName","src":"1346:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1281:84:28"},"returnParameters":{"id":5871,"nodeType":"ParameterList","parameters":[],"src":"1401:0:28"},"scope":6228,"src":"1263:270:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5926,"nodeType":"Block","src":"1703:238:28","statements":[{"assignments":[5902],"declarations":[{"constant":false,"id":5902,"mutability":"mutable","name":"tokenAddress","nameLocation":"1721:12:28","nodeType":"VariableDeclaration","scope":5926,"src":"1713:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5901,"name":"address","nodeType":"ElementaryTypeName","src":"1713:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5906,"initialValue":{"arguments":[{"id":5904,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"1753:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":5903,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"1736:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1736:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1713:48:28"},{"expression":{"arguments":[{"id":5908,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"1787:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},{"id":5909,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"1796:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5910,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"1802:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5895,"src":"1806:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5907,"name":"_checkAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5810,"src":"1771:15:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,address,uint256) view"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1771:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5913,"nodeType":"ExpressionStatement","src":"1771:41:28"},{"expression":{"arguments":[{"arguments":[{"id":5919,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"1877:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"1883:2:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5895,"src":"1887:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5916,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5902,"src":"1850:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5915,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1843:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1843:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1864:12:28","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"1843:33:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":5922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1843:50:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5452414e534645525f4641494c4544","id":5923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1907:17:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""},"value":"TRANSFER_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""}],"id":5914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1822:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:112:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5925,"nodeType":"ExpressionStatement","src":"1822:112:28"}]},"id":5927,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5898,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"1694:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":5899,"kind":"modifierInvocation","modifierName":{"id":5897,"name":"onlyValidTokenID","nameLocations":["1677:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"1677:16:28"},"nodeType":"ModifierInvocation","src":"1677:25:28"}],"name":"_transferFrom","nameLocation":"1548:13:28","nodeType":"FunctionDefinition","parameters":{"id":5896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5889,"mutability":"mutable","name":"tokenID","nameLocation":"1589:7:28","nodeType":"VariableDeclaration","scope":5927,"src":"1571:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5888,"nodeType":"UserDefinedTypeName","pathNode":{"id":5887,"name":"Structures.Tokens","nameLocations":["1571:10:28","1582:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1571:17:28"},"referencedDeclaration":2377,"src":"1571:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5891,"mutability":"mutable","name":"from","nameLocation":"1614:4:28","nodeType":"VariableDeclaration","scope":5927,"src":"1606:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5890,"name":"address","nodeType":"ElementaryTypeName","src":"1606:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5893,"mutability":"mutable","name":"to","nameLocation":"1636:2:28","nodeType":"VariableDeclaration","scope":5927,"src":"1628:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5892,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5895,"mutability":"mutable","name":"value","nameLocation":"1656:5:28","nodeType":"VariableDeclaration","scope":5927,"src":"1648:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1561:106:28"},"returnParameters":{"id":5900,"nodeType":"ParameterList","parameters":[],"src":"1703:0:28"},"scope":6228,"src":"1539:402:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6040,"nodeType":"Block","src":"2088:898:28","statements":[{"assignments":[5941],"declarations":[{"constant":false,"id":5941,"mutability":"mutable","name":"treasury","nameLocation":"2106:8:28","nodeType":"VariableDeclaration","scope":6040,"src":"2098:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5940,"name":"address","nodeType":"ElementaryTypeName","src":"2098:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5948,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5943,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2138:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5944,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2147:15:28","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"2138:24:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5942,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"2117:20:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2117:46:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":5946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2177:16:28","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":2235,"src":"2117:76:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_payable_$","typeString":"function () view external returns (address payable)"}},"id":5947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2117:78:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"2098:97:28"},{"assignments":[5951],"declarations":[{"constant":false,"id":5951,"mutability":"mutable","name":"factory","nameLocation":"2227:7:28","nodeType":"VariableDeclaration","scope":6040,"src":"2206:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"},"typeName":{"id":5950,"nodeType":"UserDefinedTypeName","pathNode":{"id":5949,"name":"IMecenateFeedFactory","nameLocations":["2206:20:28"],"nodeType":"IdentifierPath","referencedDeclaration":2291,"src":"2206:20:28"},"referencedDeclaration":2291,"src":"2206:20:28","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"visibility":"internal"}],"id":5956,"initialValue":{"arguments":[{"expression":{"id":5953,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"2271:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2412_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5954,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2280:15:28","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2397,"src":"2271:24:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5952,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"2237:20:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2291_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:68:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"nodeType":"VariableDeclarationStatement","src":"2206:99:28"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5957,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"2320:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5958,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2331:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2342:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"2331:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2349:3:28","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2374,"src":"2331:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"2320:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5981,"nodeType":"IfStatement","src":"2316:191:28","trueBody":{"id":5980,"nodeType":"Block","src":"2354:153:28","statements":[{"assignments":[5963,null],"declarations":[{"constant":false,"id":5963,"mutability":"mutable","name":"result","nameLocation":"2374:6:28","nodeType":"VariableDeclaration","scope":5980,"src":"2369:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5962,"name":"bool","nodeType":"ElementaryTypeName","src":"2369:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5973,"initialValue":{"arguments":[{"hexValue":"","id":5971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2424:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":5966,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5932,"src":"2394:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2386:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5964,"name":"address","nodeType":"ElementaryTypeName","src":"2386:8:28","stateMutability":"payable","typeDescriptions":{}}},"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2386:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2405:4:28","memberName":"call","nodeType":"MemberAccess","src":"2386:23:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5934,"src":"2417:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2386:37:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2386:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2368:59:28"},{"expression":{"arguments":[{"id":5975,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"2449:6:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c65642e","id":5976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2457:18:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c81948f77ae7b56f1759fc612b6b373d090eebe7124f74c528fff8e0a139fe69","typeString":"literal_string \"Transfer failed.\""},"value":"Transfer failed."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c81948f77ae7b56f1759fc612b6b373d090eebe7124f74c528fff8e0a139fe69","typeString":"literal_string \"Transfer failed.\""}],"id":5974,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2441:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2441:35:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5978,"nodeType":"ExpressionStatement","src":"2441:35:28"},{"functionReturnParameters":5939,"id":5979,"nodeType":"Return","src":"2490:7:28"}]}},{"assignments":[5983],"declarations":[{"constant":false,"id":5983,"mutability":"mutable","name":"tokenAddress","nameLocation":"2525:12:28","nodeType":"VariableDeclaration","scope":6040,"src":"2517:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5982,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5997,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":5988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5984,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"2541:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5985,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2552:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":5986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2563:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"2552:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":5987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2570:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"2552:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"2541:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5989,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2540:34:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5993,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2629:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":5994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2638:15:28","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"2629:24:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2629:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2540:115:28","trueExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5990,"name":"BurnDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2589:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnDAI_$2982_$","typeString":"type(contract BurnDAI)"}},"id":5991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2597:15:28","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":2887,"src":"2589:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2517:138:28"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5998,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5951,"src":"2670:7:28","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2291","typeString":"contract IMecenateFeedFactory"}},"id":5999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2678:11:28","memberName":"burnEnabled","nodeType":"MemberAccess","referencedDeclaration":2290,"src":"2670:19:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":6000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2670:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":6001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2695:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2670:30:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6013,"nodeType":"IfStatement","src":"2666:127:28","trueBody":{"id":6012,"nodeType":"Block","src":"2702:91:28","statements":[{"expression":{"arguments":[{"id":6007,"name":"treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5941,"src":"2746:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5934,"src":"2756:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6004,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5983,"src":"2723:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6003,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2716:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2716:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2737:8:28","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":44,"src":"2716:29:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2716:46:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6010,"nodeType":"ExpressionStatement","src":"2716:46:28"},{"functionReturnParameters":5939,"id":6011,"nodeType":"Return","src":"2776:7:28"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6014,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"2807:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":6015,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2818:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":6016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2829:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"2818:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":6017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2836:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"2818:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"2807:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6026,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"2899:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":6027,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"2910:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":6028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2921:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"2910:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":6029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2928:4:28","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"2910:22:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"2899:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6038,"nodeType":"IfStatement","src":"2895:85:28","trueBody":{"id":6037,"nodeType":"Block","src":"2934:46:28","statements":[{"expression":{"arguments":[{"id":6034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5934,"src":"2963:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6031,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2948:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":6033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2957:5:28","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":3010,"src":"2948:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2948:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6036,"nodeType":"ExpressionStatement","src":"2948:21:28"}]}},"id":6039,"nodeType":"IfStatement","src":"2803:177:28","trueBody":{"id":6025,"nodeType":"Block","src":"2841:48:28","statements":[{"expression":{"arguments":[{"id":6022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5934,"src":"2872:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6019,"name":"BurnDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2855:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnDAI_$2982_$","typeString":"type(contract BurnDAI)"}},"id":6021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2863:8:28","memberName":"_burnDai","nodeType":"MemberAccess","referencedDeclaration":2873,"src":"2855:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6024,"nodeType":"ExpressionStatement","src":"2855:23:28"}]}}]},"id":6041,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5937,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"2079:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":5938,"kind":"modifierInvocation","modifierName":{"id":5936,"name":"onlyValidTokenID","nameLocations":["2062:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"2062:16:28"},"nodeType":"ModifierInvocation","src":"2062:25:28"}],"name":"_burn","nameLocation":"1956:5:28","nodeType":"FunctionDefinition","parameters":{"id":5935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5930,"mutability":"mutable","name":"tokenID","nameLocation":"1989:7:28","nodeType":"VariableDeclaration","scope":6041,"src":"1971:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":5929,"nodeType":"UserDefinedTypeName","pathNode":{"id":5928,"name":"Structures.Tokens","nameLocations":["1971:10:28","1982:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1971:17:28"},"referencedDeclaration":2377,"src":"1971:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5932,"mutability":"mutable","name":"_receiver","nameLocation":"2014:9:28","nodeType":"VariableDeclaration","scope":6041,"src":"2006:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5931,"name":"address","nodeType":"ElementaryTypeName","src":"2006:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5934,"mutability":"mutable","name":"value","nameLocation":"2041:5:28","nodeType":"VariableDeclaration","scope":6041,"src":"2033:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5933,"name":"uint256","nodeType":"ElementaryTypeName","src":"2033:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1961:91:28"},"returnParameters":{"id":5939,"nodeType":"ParameterList","parameters":[],"src":"2088:0:28"},"scope":6228,"src":"1947:1039:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6082,"nodeType":"Block","src":"3132:210:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6054,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6044,"src":"3146:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":6055,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3157:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":6056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3168:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3157:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":6057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3175:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"3157:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3146:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":6071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6067,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6044,"src":"3245:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":6068,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3256:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3267:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3256:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":6070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3274:4:28","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"3256:22:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3245:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6080,"nodeType":"IfStatement","src":"3241:95:28","trueBody":{"id":6079,"nodeType":"Block","src":"3280:56:28","statements":[{"expression":{"arguments":[{"id":6075,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6046,"src":"3313:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6048,"src":"3319:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6072,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"3294:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":6074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3303:9:28","memberName":"_burnFrom","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"3294:18:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3294:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6078,"nodeType":"ExpressionStatement","src":"3294:31:28"}]}},"id":6081,"nodeType":"IfStatement","src":"3142:194:28","trueBody":{"id":6066,"nodeType":"Block","src":"3180:55:28","statements":[{"expression":{"arguments":[{"id":6062,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6046,"src":"3212:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6048,"src":"3218:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6059,"name":"BurnDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3194:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnDAI_$2982_$","typeString":"type(contract BurnDAI)"}},"id":6061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:28","memberName":"_burnFrom","nodeType":"MemberAccess","referencedDeclaration":2794,"src":"3194:17:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3194:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6065,"nodeType":"ExpressionStatement","src":"3194:30:28"}]}}]},"id":6083,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6051,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6044,"src":"3123:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":6052,"kind":"modifierInvocation","modifierName":{"id":6050,"name":"onlyValidTokenID","nameLocations":["3106:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"3106:16:28"},"nodeType":"ModifierInvocation","src":"3106:25:28"}],"name":"_burnFrom","nameLocation":"3001:9:28","nodeType":"FunctionDefinition","parameters":{"id":6049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6044,"mutability":"mutable","name":"tokenID","nameLocation":"3038:7:28","nodeType":"VariableDeclaration","scope":6083,"src":"3020:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":6043,"nodeType":"UserDefinedTypeName","pathNode":{"id":6042,"name":"Structures.Tokens","nameLocations":["3020:10:28","3031:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"3020:17:28"},"referencedDeclaration":2377,"src":"3020:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":6046,"mutability":"mutable","name":"from","nameLocation":"3063:4:28","nodeType":"VariableDeclaration","scope":6083,"src":"3055:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6045,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6048,"mutability":"mutable","name":"value","nameLocation":"3085:5:28","nodeType":"VariableDeclaration","scope":6083,"src":"3077:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6047,"name":"uint256","nodeType":"ElementaryTypeName","src":"3077:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3010:86:28"},"returnParameters":{"id":6053,"nodeType":"ParameterList","parameters":[],"src":"3132:0:28"},"scope":6228,"src":"2992:350:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6157,"nodeType":"Block","src":"3490:650:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6096,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"3504:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":6097,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3515:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":6098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3526:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3515:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":6099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3533:3:28","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"3515:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3504:32:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"id":6119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6115,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"3703:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":6116,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3714:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2547_$","typeString":"type(library Structures)"}},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3725:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2377,"src":"3714:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2377_$","typeString":"type(enum Structures.Tokens)"}},"id":6118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3732:4:28","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"3714:22:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"src":"3703:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6155,"nodeType":"IfStatement","src":"3699:435:28","trueBody":{"id":6154,"nodeType":"Block","src":"3738:396:28","statements":[{"assignments":[6121],"declarations":[{"constant":false,"id":6121,"mutability":"mutable","name":"MUSE","nameLocation":"3760:4:28","nodeType":"VariableDeclaration","scope":6154,"src":"3752:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6120,"name":"address","nodeType":"ElementaryTypeName","src":"3752:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6125,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6122,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"3767:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3068_$","typeString":"type(contract BurnMUSE)"}},"id":6123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3776:15:28","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"3767:24:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3767:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3752:41:28"},{"assignments":[6127],"declarations":[{"constant":false,"id":6127,"mutability":"mutable","name":"currentAllowance","nameLocation":"3815:16:28","nodeType":"VariableDeclaration","scope":6154,"src":"3807:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6126,"name":"uint256","nodeType":"ElementaryTypeName","src":"3807:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6136,"initialValue":{"arguments":[{"expression":{"id":6132,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3873:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3877:6:28","memberName":"sender","nodeType":"MemberAccess","src":"3873:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6134,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6088,"src":"3901:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":6129,"name":"MUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"3840:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6128,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3834:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2158_$","typeString":"type(contract IMUSE)"}},"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2158","typeString":"contract IMUSE"}},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3846:9:28","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"3834:21:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:88:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3807:115:28"},{"assignments":[6138],"declarations":[{"constant":false,"id":6138,"mutability":"mutable","name":"newAllowance","nameLocation":"3945:12:28","nodeType":"VariableDeclaration","scope":6154,"src":"3937:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6137,"name":"uint256","nodeType":"ElementaryTypeName","src":"3937:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6142,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6139,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6127,"src":"3960:16:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"3979:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3960:24:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3937:47:28"},{"expression":{"arguments":[{"arguments":[{"id":6148,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6088,"src":"4053:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6149,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6138,"src":"4062:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6145,"name":"MUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"4029:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6144,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4023:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2158_$","typeString":"type(contract IMUSE)"}},"id":6146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4023:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2158","typeString":"contract IMUSE"}},"id":6147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4035:17:28","memberName":"increaseAllowance","nodeType":"MemberAccess","referencedDeclaration":2134,"src":"4023:29:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4023:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"415050524f56455f4641494c4544","id":6151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4093:16:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""},"value":"APPROVE_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""}],"id":6143,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3998:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3998:125:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6153,"nodeType":"ExpressionStatement","src":"3998:125:28"}]}},"id":6156,"nodeType":"IfStatement","src":"3500:634:28","trueBody":{"id":6114,"nodeType":"Block","src":"3538:155:28","statements":[{"expression":{"arguments":[{"arguments":[{"id":6108,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6088,"src":"3619:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6109,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"3628:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6103,"name":"BurnDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3584:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnDAI_$2982_$","typeString":"type(contract BurnDAI)"}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3592:15:28","memberName":"getTokenAddress","nodeType":"MemberAccess","referencedDeclaration":2887,"src":"3584:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3584:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6102,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3577:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3577:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3611:7:28","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"3577:41:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3577:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"415050524f56455f4641494c4544","id":6111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3652:16:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""},"value":"APPROVE_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""}],"id":6101,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3552:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:130:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6113,"nodeType":"ExpressionStatement","src":"3552:130:28"}]}}]},"id":6158,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6093,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"3481:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":6094,"kind":"modifierInvocation","modifierName":{"id":6092,"name":"onlyValidTokenID","nameLocations":["3464:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"3464:16:28"},"nodeType":"ModifierInvocation","src":"3464:25:28"}],"name":"_approve","nameLocation":"3357:8:28","nodeType":"FunctionDefinition","parameters":{"id":6091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6086,"mutability":"mutable","name":"tokenID","nameLocation":"3393:7:28","nodeType":"VariableDeclaration","scope":6158,"src":"3375:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":6085,"nodeType":"UserDefinedTypeName","pathNode":{"id":6084,"name":"Structures.Tokens","nameLocations":["3375:10:28","3386:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"3375:17:28"},"referencedDeclaration":2377,"src":"3375:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":6088,"mutability":"mutable","name":"spender","nameLocation":"3418:7:28","nodeType":"VariableDeclaration","scope":6158,"src":"3410:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6087,"name":"address","nodeType":"ElementaryTypeName","src":"3410:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6090,"mutability":"mutable","name":"value","nameLocation":"3443:5:28","nodeType":"VariableDeclaration","scope":6158,"src":"3435:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6089,"name":"uint256","nodeType":"ElementaryTypeName","src":"3435:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3365:89:28"},"returnParameters":{"id":6095,"nodeType":"ParameterList","parameters":[],"src":"3490:0:28"},"scope":6228,"src":"3348:792:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6177,"nodeType":"Block","src":"4272:71:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[{"id":6171,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"4313:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":6170,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"4296:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4296:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6169,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"4289:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4289:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4323:11:28","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":26,"src":"4289:45:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4289:47:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6168,"id":6176,"nodeType":"Return","src":"4282:54:28"}]},"id":6178,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6164,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"4239:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":6165,"kind":"modifierInvocation","modifierName":{"id":6163,"name":"onlyValidTokenID","nameLocations":["4222:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"4222:16:28"},"nodeType":"ModifierInvocation","src":"4222:25:28"}],"name":"totalSupply","nameLocation":"4155:11:28","nodeType":"FunctionDefinition","parameters":{"id":6162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6161,"mutability":"mutable","name":"tokenID","nameLocation":"4194:7:28","nodeType":"VariableDeclaration","scope":6178,"src":"4176:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":6160,"nodeType":"UserDefinedTypeName","pathNode":{"id":6159,"name":"Structures.Tokens","nameLocations":["4176:10:28","4187:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4176:17:28"},"referencedDeclaration":2377,"src":"4176:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"4166:41:28"},"returnParameters":{"id":6168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6167,"mutability":"mutable","name":"value","nameLocation":"4265:5:28","nodeType":"VariableDeclaration","scope":6178,"src":"4257:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6166,"name":"uint256","nodeType":"ElementaryTypeName","src":"4257:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4256:15:28"},"scope":6228,"src":"4146:197:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6200,"nodeType":"Block","src":"4494:72:28","statements":[{"expression":{"arguments":[{"id":6197,"name":"who","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6183,"src":"4555:3:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":6193,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6181,"src":"4535:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":6192,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"4518:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":6194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4518:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6191,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"4511:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4511:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4545:9:28","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":34,"src":"4511:43:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4511:48:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6190,"id":6199,"nodeType":"Return","src":"4504:55:28"}]},"id":6201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6186,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6181,"src":"4461:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":6187,"kind":"modifierInvocation","modifierName":{"id":6185,"name":"onlyValidTokenID","nameLocations":["4444:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"4444:16:28"},"nodeType":"ModifierInvocation","src":"4444:25:28"}],"name":"balanceOf","nameLocation":"4358:9:28","nodeType":"FunctionDefinition","parameters":{"id":6184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6181,"mutability":"mutable","name":"tokenID","nameLocation":"4395:7:28","nodeType":"VariableDeclaration","scope":6201,"src":"4377:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":6180,"nodeType":"UserDefinedTypeName","pathNode":{"id":6179,"name":"Structures.Tokens","nameLocations":["4377:10:28","4388:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4377:17:28"},"referencedDeclaration":2377,"src":"4377:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":6183,"mutability":"mutable","name":"who","nameLocation":"4420:3:28","nodeType":"VariableDeclaration","scope":6201,"src":"4412:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6182,"name":"address","nodeType":"ElementaryTypeName","src":"4412:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4367:62:28"},"returnParameters":{"id":6190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6189,"mutability":"mutable","name":"value","nameLocation":"4487:5:28","nodeType":"VariableDeclaration","scope":6201,"src":"4479:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6188,"name":"uint256","nodeType":"ElementaryTypeName","src":"4479:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4478:15:28"},"scope":6228,"src":"4349:217:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6226,"nodeType":"Block","src":"4744:83:28","statements":[{"expression":{"arguments":[{"id":6222,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6206,"src":"4805:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6223,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6208,"src":"4812:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":6218,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"4785:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}],"id":6217,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"4768:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2377_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":6219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6216,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"4761:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4795:9:28","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"4761:43:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:59:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6215,"id":6225,"nodeType":"Return","src":"4754:66:28"}]},"id":6227,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6211,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"4711:7:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}}],"id":6212,"kind":"modifierInvocation","modifierName":{"id":6210,"name":"onlyValidTokenID","nameLocations":["4694:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":5838,"src":"4694:16:28"},"nodeType":"ModifierInvocation","src":"4694:25:28"}],"name":"allowance","nameLocation":"4581:9:28","nodeType":"FunctionDefinition","parameters":{"id":6209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6204,"mutability":"mutable","name":"tokenID","nameLocation":"4618:7:28","nodeType":"VariableDeclaration","scope":6227,"src":"4600:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"},"typeName":{"id":6203,"nodeType":"UserDefinedTypeName","pathNode":{"id":6202,"name":"Structures.Tokens","nameLocations":["4600:10:28","4611:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"4600:17:28"},"referencedDeclaration":2377,"src":"4600:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2377","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":6206,"mutability":"mutable","name":"owner","nameLocation":"4643:5:28","nodeType":"VariableDeclaration","scope":6227,"src":"4635:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6205,"name":"address","nodeType":"ElementaryTypeName","src":"4635:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6208,"mutability":"mutable","name":"spender","nameLocation":"4666:7:28","nodeType":"VariableDeclaration","scope":6227,"src":"4658:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6207,"name":"address","nodeType":"ElementaryTypeName","src":"4658:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4590:89:28"},"returnParameters":{"id":6215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6214,"mutability":"mutable","name":"value","nameLocation":"4737:5:28","nodeType":"VariableDeclaration","scope":6227,"src":"4729:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6213,"name":"uint256","nodeType":"ElementaryTypeName","src":"4729:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4728:15:28"},"scope":6228,"src":"4572:255:28","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":6229,"src":"50:4779:28","usedErrors":[]}],"src":"0:4830:28"},"id":28}},"contracts":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205861b80719bff2e58e229acf82d3f403428b54a36f9c2bf9b112b81e8e378f5464736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH2 0xB807 NOT 0xBF CALLCODE 0xE5 DUP15 0x22 SWAP11 0xCF DUP3 0xD3 DELEGATECALL SUB TIMESTAMP DUP12 SLOAD LOG3 PUSH16 0x9C2BF9B112B81E8E378F5464736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:1:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212205861b80719bff2e58e229acf82d3f403428b54a36f9c2bf9b112b81e8e378f5464736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH2 0xB807 NOT 0xBF CALLCODE 0xE5 DUP15 0x22 SWAP11 0xCF DUP3 0xD3 DELEGATECALL SUB TIMESTAMP DUP12 SLOAD LOG3 PUSH16 0x9C2BF9B112B81E8E378F5464736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:1:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122036c4b1a86b9698c8ae34f799d7e1c95bfc85c163ae096299e4367571e76f7b7f64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xC4 0xB1 0xA8 PUSH12 0x9698C8AE34F799D7E1C95BFC DUP6 0xC1 PUSH4 0xAE096299 0xE4 CALLDATASIZE PUSH22 0x71E76F7B7F64736F6C63430008130033000000000000 ","sourceMap":"369:8761:2:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122036c4b1a86b9698c8ae34f799d7e1c95bfc85c163ae096299e4367571e76f7b7f64736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xC4 0xB1 0xA8 PUSH12 0x9698C8AE34F799D7E1C95BFC DUP6 0xC1 PUSH4 0xAE096299 0xE4 CALLDATASIZE PUSH22 0x71E76F7B7F64736F6C63430008130033000000000000 ","sourceMap":"369:8761:2:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220ed3f7bc74a3dab7c8c1ffd586694fa4485216ceda772ca55c65563019bbe76f664736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED EXTCODEHASH PUSH28 0xC74A3DAB7C8C1FFD586694FA4485216CEDA772CA55C65563019BBE76 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:3:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220ed3f7bc74a3dab7c8c1ffd586694fa4485216ceda772ca55c65563019bbe76f664736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED EXTCODEHASH PUSH28 0xC74A3DAB7C8C1FFD586694FA4485216CEDA772CA55C65563019BBE76 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:3:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122056a4dc5dd7104f86b84e5a076e481bd9947e71fac7a3250a14400fbfc2f3c35264736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP LOG4 0xDC 0x5D 0xD7 LT 0x4F DUP7 0xB8 0x4E GAS SMOD PUSH15 0x481BD9947E71FAC7A3250A14400FBF 0xC2 RETURN 0xC3 MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"482:6210:4:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122056a4dc5dd7104f86b84e5a076e481bd9947e71fac7a3250a14400fbfc2f3c35264736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP LOG4 0xDC 0x5D 0xD7 LT 0x4F DUP7 0xB8 0x4E GAS SMOD PUSH15 0x481BD9947E71FAC7A3250A14400FBF 0xC2 RETURN 0xC3 MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"482:6210:4:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220c57a2aede0805c694470a947171facda4525578629e12fd5182d66c2b96f62b964736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 PUSH27 0x2AEDE0805C694470A947171FACDA4525578629E12FD5182D66C2B9 PUSH16 0x62B964736F6C63430008130033000000 ","sourceMap":"215:1047:5:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220c57a2aede0805c694470a947171facda4525578629e12fd5182d66c2b96f62b964736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 PUSH27 0x2AEDE0805C694470A947171FACDA4525578629E12FD5182D66C2B9 PUSH16 0x62B964736F6C63430008130033000000 ","sourceMap":"215:1047:5:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"IUniswapV3SwapCallback":{"abi":[{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Callback for IUniswapV3PoolActions#swap","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Any contract that calls IUniswapV3PoolActions#swap must implement this interface","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ISwapRouter":{"abi":[{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Router token swapping functionality","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exactInput((bytes,address,uint256,uint256,uint256))":"c04b8d59","exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"414bf389","exactOutput((bytes,address,uint256,uint256,uint256))":"f28c0498","exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"db3e2198","uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token"},"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Functions for swapping tokens via Uniswap V3","version":1}}},"contracts/features/MecenateFeed.sol":{"MecenateFeed":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_owner","type":"bytes32"},{"internalType":"address","name":"_usersModuleContract","type":"address"},{"internalType":"address","name":"_verifierContract","type":"address"},{"internalType":"address","name":"_vaultContract","type":"address"},{"internalType":"address","name":"_factoryContract","type":"address"},{"internalType":"string","name":"_version","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"_paymentAmount","type":"uint256"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedHash","type":"bytes"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"enum Structures.PostDuration","name":"postDuration","type":"uint8"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"createPost","outputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"finalizePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"getHashedVaultId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"getMessage","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"staker","type":"bytes32"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"getTelegramIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"getVaultIdSecret","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"renouncePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"decryptedData","type":"bytes"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"revealData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"submitHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToTake","type":"uint256"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodeMessage","type":"bytes"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"write","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":1717,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":1848,"id":null,"parameterSlots":2,"returnSlots":0},"copy_literal_to_memory_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4":{"entryPoint":1738,"id":null,"parameterSlots":0,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1787,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":1681,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE CALLVALUE PUSH3 0x676 JUMPI PUSH3 0x5D5A DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x22 DUP3 DUP6 PUSH3 0x691 JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD PUSH1 0xC0 DUP3 DUP3 SUB SLT PUSH3 0x676 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 PUSH3 0x43 DUP2 DUP4 ADD PUSH3 0x6B5 JUMP JUMPDEST PUSH3 0x50 DUP7 DUP5 ADD PUSH3 0x6B5 JUMP JUMPDEST PUSH3 0x5E PUSH1 0x60 DUP6 ADD PUSH3 0x6B5 JUMP JUMPDEST SWAP3 PUSH3 0x6D PUSH1 0x80 DUP7 ADD PUSH3 0x6B5 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP7 SWAP2 SWAP5 SWAP2 DUP8 DUP3 GT PUSH3 0x676 JUMPI ADD SWAP3 PUSH1 0x1F SWAP5 DUP9 DUP7 DUP7 ADD SLT ISZERO PUSH3 0x676 JUMPI DUP5 MLOAD DUP9 DUP2 GT PUSH3 0x67B JUMPI DUP12 MLOAD SWAP6 PUSH1 0x1F NOT SWAP11 PUSH3 0xB9 DUP8 DUP14 DUP12 DUP7 ADD AND ADD DUP10 PUSH3 0x691 JUMP JUMPDEST DUP3 DUP9 MSTORE DUP7 DUP4 DUP4 ADD ADD GT PUSH3 0x676 JUMPI DUP6 SWAP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH3 0x661 JUMPI POP POP PUSH1 0x0 SWAP2 DUP8 ADD ADD MSTORE PUSH8 0x16345785D8A0000 PUSH1 0x14 SSTORE PUSH1 0x0 PUSH1 0x15 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP8 DUP2 DUP1 SWAP5 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP8 AND DUP8 PUSH1 0x16 SLOAD AND OR PUSH1 0x16 SSTORE AND DUP6 PUSH1 0x18 SLOAD AND OR PUSH1 0x18 SSTORE AND DUP4 PUSH1 0x19 SLOAD AND OR PUSH1 0x19 SSTORE CALLER DUP4 PUSH1 0x17 SLOAD AND OR PUSH1 0x17 SSTORE DUP4 DUP12 MLOAD DUP1 SWAP3 PUSH4 0x3E21FA9 PUSH1 0xE6 SHL DUP3 MSTORE DUP2 PUSH1 0x4 SWAP11 DUP12 SWAP3 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH3 0x656 JUMPI PUSH1 0x0 SWAP2 PUSH3 0x616 JUMPI JUMPDEST POP AND SWAP1 PUSH1 0x1A SLOAD AND OR PUSH1 0x1A SSTORE PUSH3 0x16A PUSH3 0x6CA JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH3 0x4AD JUMPI DUP2 SWAP1 PUSH3 0x184 PUSH1 0x1B SLOAD PUSH3 0x6FB JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x5E3 JUMPI JUMPDEST POP DUP4 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x578 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x56C JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1B SSTORE JUMPDEST PUSH3 0x1C4 PUSH3 0x6CA JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH3 0x4AD JUMPI DUP2 SWAP1 PUSH3 0x1DE PUSH1 0x1C SLOAD PUSH3 0x6FB JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x539 JUMPI JUMPDEST POP DUP4 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x4CE JUMPI PUSH1 0x0 SWAP3 PUSH3 0x4C2 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1C SSTORE JUMPDEST PUSH3 0x21E PUSH3 0x6CA JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH3 0x4AD JUMPI DUP2 SWAP1 PUSH3 0x238 PUSH1 0x1D SLOAD PUSH3 0x6FB JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x47A JUMPI JUMPDEST POP DUP4 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x40F JUMPI PUSH1 0x0 SWAP3 PUSH3 0x403 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1D SSTORE JUMPDEST PUSH1 0xFF NOT SWAP4 DUP5 PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE PUSH1 0x0 DUP1 MSTORE DUP4 DUP3 MSTORE PUSH3 0x15180 DUP10 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 SWAP5 DUP6 PUSH1 0x0 MSTORE PUSH3 0x3F480 DUP11 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x2 PUSH1 0x0 MSTORE PUSH3 0x93A80 DUP11 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH3 0x127500 DUP11 PUSH1 0x0 KECCAK256 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH3 0x278D00 DUP11 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 MSTORE DUP3 DUP1 MSTORE DUP6 DUP11 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 MLOAD SWAP6 DUP7 GT PUSH3 0x3EE JUMPI POP PUSH3 0x2EE PUSH1 0x1E SLOAD PUSH3 0x6FB JUMP JUMPDEST DUP4 DUP2 GT PUSH3 0x3B0 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x345 JUMPI POP DUP4 SWAP5 POP SWAP1 DUP4 SWAP3 SWAP2 PUSH1 0x0 SWAP5 PUSH3 0x339 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1E SSTORE JUMPDEST PUSH1 0x0 SSTORE MLOAD PUSH2 0x5608 SWAP1 DUP2 PUSH3 0x752 DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH3 0x315 JUMP JUMPDEST SWAP3 SWAP5 DUP5 SWAP1 DUP2 AND PUSH1 0x1E PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x395 JUMPI POP POP POP LT PUSH3 0x37B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1E SSTORE PUSH3 0x328 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x36C JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x359 JUMP JUMPDEST PUSH3 0x3DD SWAP1 PUSH1 0x1E PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP10 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP6 DUP11 LT PUSH3 0x3E4 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x738 JUMP JUMPDEST CODESIZE PUSH3 0x2F7 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x3D1 JUMP JUMPDEST PUSH1 0x41 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x258 JUMP JUMPDEST SWAP2 DUP10 AND SWAP2 PUSH1 0x1D PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH3 0x463 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x449 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1D SSTORE PUSH3 0x26E JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x43A JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x420 JUMP JUMPDEST PUSH3 0x4A6 SWAP1 PUSH1 0x1D PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP9 DUP8 LT PUSH3 0x3E4 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x738 JUMP JUMPDEST CODESIZE PUSH3 0x241 JUMP JUMPDEST PUSH1 0x41 DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1FE JUMP JUMPDEST SWAP2 DUP10 AND SWAP2 PUSH1 0x1C PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH3 0x522 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x508 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1C SSTORE PUSH3 0x214 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x4F9 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x4DF JUMP JUMPDEST PUSH3 0x565 SWAP1 PUSH1 0x1C PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP9 DUP8 LT PUSH3 0x3E4 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x738 JUMP JUMPDEST CODESIZE PUSH3 0x1E7 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1A4 JUMP JUMPDEST SWAP2 DUP10 AND SWAP2 PUSH1 0x1B PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH3 0x5CC JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x5B2 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1B SSTORE PUSH3 0x1BA JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x5A3 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x589 JUMP JUMPDEST PUSH3 0x60F SWAP1 PUSH1 0x1B PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP9 DUP8 LT PUSH3 0x3E4 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x738 JUMP JUMPDEST CODESIZE PUSH3 0x18D JUMP JUMPDEST SWAP1 DUP5 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH3 0x64E JUMPI JUMPDEST PUSH3 0x62F DUP2 DUP4 PUSH3 0x691 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH3 0x64B JUMPI POP PUSH3 0x644 SWAP1 PUSH3 0x6B5 JUMP JUMPDEST CODESIZE PUSH3 0x155 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH3 0x623 JUMP JUMPDEST DUP12 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP10 DUP3 ADD DUP5 ADD MSTORE DUP8 SWAP3 ADD PUSH3 0xCC JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x67B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x676 JUMPI JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x67B JUMPI PUSH1 0x40 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH4 0x3078303 PUSH1 0xE4 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH3 0x72D JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH3 0x717 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH3 0x70B JUMP JUMPDEST DUP2 DUP2 LT PUSH3 0x744 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x738 JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x10A38F5 EQ PUSH2 0x30D0 JUMPI POP DUP1 PUSH4 0x5C1F502 EQ PUSH2 0x2DBE JUMPI DUP1 PUSH4 0x917E776 EQ PUSH2 0x2D5D JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x2D3F JUMPI DUP1 PUSH4 0x1B9F0A43 EQ PUSH2 0x2D13 JUMPI DUP1 PUSH4 0x200F852C EQ PUSH2 0x2830 JUMPI DUP1 PUSH4 0x30A0680C EQ PUSH2 0x25F3 JUMPI DUP1 PUSH4 0x3258D15C EQ PUSH2 0x24D5 JUMPI DUP1 PUSH4 0x3A4FB8B7 EQ PUSH2 0x1E44 JUMPI DUP1 PUSH4 0x402E3E0B EQ PUSH2 0x14DB JUMPI DUP1 PUSH4 0x4828000C EQ PUSH2 0x1435 JUMPI DUP1 PUSH4 0x4C38D877 EQ PUSH2 0x1409 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x13E1 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x1313 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0x12DA JUMPI DUP1 PUSH4 0x5C63ED69 EQ PUSH2 0x12A2 JUMPI DUP1 PUSH4 0x83DD1743 EQ PUSH2 0xFBA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF9C JUMPI DUP1 PUSH4 0x8F287DC2 EQ PUSH2 0x96A JUMPI DUP1 PUSH4 0x9D8CC89A EQ PUSH2 0x938 JUMPI DUP1 PUSH4 0x9F8B4359 EQ PUSH2 0x8E3 JUMPI DUP1 PUSH4 0xB43F4F75 EQ PUSH2 0x432 JUMPI DUP1 PUSH4 0xB52D2CE4 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0xDE5D7165 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xE02CFA4C EQ PUSH2 0x176 JUMPI PUSH4 0xFAEB5E17 EQ PUSH2 0x153 JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH2 0x189 CALLDATASIZE PUSH2 0x3559 JUMP JUMPDEST SWAP2 PUSH2 0x41CC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0xA0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1D7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP2 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP5 SUB PUSH2 0x171 JUMPI PUSH2 0x201 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x21F PUSH2 0x229 SWAP3 DUP5 EQ PUSH2 0x3B8E JUMP JUMPDEST DUP5 PUSH1 0x84 CALLDATALOAD SWAP2 PUSH2 0x5268 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x290 JUMPI PUSH1 0x20 SWAP4 DUP4 PUSH2 0x258 SWAP4 PUSH2 0x50B0 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x270 DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 SUB PUSH2 0x287 JUMPI DUP1 PUSH1 0x8 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 PUSH1 0x7 SSTORE PUSH2 0x18F JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F454E4F5547485F5354414B4500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x356 SWAP1 DUP4 EQ PUSH2 0x3B8E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH2 0x36E DUP4 PUSH2 0x367 DUP2 PUSH2 0x32B9 JUMP JUMPDEST SUB DUP5 PUSH2 0x3188 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 SWAP5 ADD KECCAK256 DUP3 EQ DUP1 ISZERO PUSH2 0x414 JUMPI JUMPDEST ISZERO PUSH2 0x3D0 JUMPI PUSH2 0x258 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x398 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP6 ADD KECCAK256 DUP4 SUB PUSH2 0x3C7 JUMPI CALLVALUE SWAP1 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND SWAP2 PUSH2 0x4485 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5641554C5449445F4D49534D4154434800000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x425 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP3 EQ PUSH2 0x37F JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x440 CALLDATASIZE PUSH2 0x34ED JUMP JUMPDEST SWAP3 PUSH2 0x449 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0x2 SWAP4 PUSH1 0xFF DUP6 SLOAD AND SWAP3 PUSH1 0x8 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP1 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x8D0 JUMPI JUMPDEST ISZERO PUSH2 0x88C JUMPI SWAP1 PUSH2 0x484 SWAP3 SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x24 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x16 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x38AAD32C00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP9 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x853 JUMPI JUMPDEST POP ISZERO PUSH2 0x80F JUMPI PUSH2 0x4FF PUSH1 0x1 SWAP4 DUP5 SLOAD EQ PUSH2 0x441A JUMP JUMPDEST PUSH1 0x0 MSTORE DUP3 DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0xFF NOT SWAP3 DUP4 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x3 SWAP4 DUP5 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE DUP5 DUP5 DUP8 SLOAD AND OR DUP7 SSTORE DUP3 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP2 GT PUSH2 0x758 JUMPI DUP1 PUSH1 0xC SWAP3 PUSH2 0x55C DUP3 PUSH2 0x557 DUP7 SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x37E9 JUMP JUMPDEST DUP5 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x792 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x787 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SWAP3 DUP10 SHL SHR NOT AND OR DUP2 SSTORE JUMPDEST PUSH2 0x58D DUP2 SLOAD PUSH2 0x31C1 JUMP JUMPDEST SWAP4 DUP5 GT PUSH2 0x758 JUMPI PUSH2 0x59F PUSH1 0x1B SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x6F1 JUMPI JUMPDEST POP PUSH1 0x0 SWAP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0x62B JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x61E JUMPI JUMPDEST POP POP PUSH1 0x0 NOT SWAP2 SWAP3 SHL SWAP3 DUP6 SHL SHR NOT AND OR PUSH1 0x1B SSTORE JUMPDEST DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x5E8 PUSH1 0x5 SLOAD TIMESTAMP PUSH2 0x3F6B JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH32 0x130BB2FE638478AB244A90FC4550E3D9F3401C2BD639012D7CB8D0CBE95266EF PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST ADD SLOAD SWAP2 POP PUSH1 0x0 NOT DUP9 PUSH2 0x5C3 JUMP JUMPDEST SWAP2 SWAP1 POP DUP4 PUSH1 0x1F NOT DUP2 SWAP5 SWAP6 AND PUSH1 0x1B PUSH1 0x0 MSTORE PUSH32 0x3AD8AA4F87544323A9D1E5DD902F40C356527A7955687113DB5F9A85AD579DC1 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP8 DUP4 DUP4 LT PUSH2 0x6B7 JUMPI POP POP POP LT PUSH2 0x67F JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x1B SSTORE PUSH2 0x5D6 JUMP JUMPDEST PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 ADD SLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP9 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 PUSH2 0x672 JUMP JUMPDEST PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 DUP7 ADD SLOAD DUP8 SSTORE SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 DUP7 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x661 JUMP JUMPDEST PUSH1 0x1B PUSH1 0x0 MSTORE PUSH32 0x3AD8AA4F87544323A9D1E5DD902F40C356527A7955687113DB5F9A85AD579DC1 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP5 DUP8 LT PUSH2 0x74E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP5 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x742 JUMPI POP POP PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH2 0x734 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x729 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP10 DUP1 PUSH2 0x571 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP8 SWAP5 AND SWAP2 DUP6 PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP3 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x7F9 JUMPI POP POP DUP5 GT PUSH2 0x7E1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP2 SSTORE PUSH2 0x583 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP13 SHL AND SHR NOT AND SWAP1 SSTORE DUP10 DUP1 DUP1 PUSH2 0x7D4 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x7C3 JUMP JUMPDEST PUSH1 0x64 DUP5 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x873 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x879 JUMPI JUMPDEST PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP7 PUSH2 0x4EB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x861 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP7 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57524F4E475F5354415455530000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP7 DUP6 EQ DUP1 PUSH2 0x474 JUMPI POP PUSH1 0x3 DUP6 EQ PUSH2 0x474 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x934 PUSH2 0x920 PUSH2 0x900 PUSH2 0x8FA CALLDATASIZE PUSH2 0x3559 JUMP JUMPDEST SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x91B PUSH2 0x916 DUP3 PUSH2 0x4189 JUMP JUMPDEST PUSH2 0x413E JUMP JUMPDEST PUSH2 0x42A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH2 0x957 PUSH2 0x916 PUSH1 0x4 CALLDATALOAD PUSH2 0x4189 JUMP JUMPDEST PUSH2 0x934 PUSH1 0x40 MLOAD PUSH2 0x920 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO SWAP1 DUP2 ISZERO DUP2 SUB PUSH2 0x171 JUMPI PUSH1 0x24 SWAP2 DUP3 CALLDATALOAD PUSH2 0x996 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SWAP4 DUP2 DUP6 SLOAD AND SWAP4 PUSH1 0x8 SWAP5 DUP6 DUP2 LT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x3 SUB PUSH2 0xF2A JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0x9CA DUP6 PUSH2 0x9C3 DUP2 PUSH2 0x32B9 JUMP JUMPDEST SUB DUP7 PUSH2 0x3188 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 SWAP6 DUP7 ADD KECCAK256 PUSH1 0x44 CALLDATALOAD SWAP1 SUB PUSH2 0xEE7 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 DUP7 DUP3 PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x18DA001100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xEB2 JUMPI JUMPDEST POP AND DUP7 SLOAD SWAP2 PUSH1 0x40 MLOAD PUSH32 0x808FC20600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP8 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xE83 JUMPI JUMPDEST POP PUSH2 0x2710 PUSH2 0xA86 PUSH2 0xA8E SWAP3 DUP7 PUSH2 0x3F4B JUMP JUMPDEST DIV DUP1 SWAP5 PUSH2 0x3F5E JUMP JUMPDEST SWAP4 PUSH1 0x4 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 0xE7C JUMPI JUMPDEST ISZERO PUSH2 0xC84 JUMPI POP POP PUSH2 0xAED PUSH2 0xACB DUP7 PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xABD DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP11 SLOAD SWAP2 PUSH2 0x407D JUMP JUMPDEST SWAP4 DUP7 PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xAE1 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x4000 JUMP JUMPDEST SWAP2 DUP6 PUSH1 0x6 SLOAD AND SWAP2 PUSH1 0x3 DUP4 LT ISZERO DUP1 PUSH2 0xC56 JUMPI PUSH1 0x1 DUP5 EQ SWAP1 DUP2 ISZERO PUSH2 0xC4A JUMPI JUMPDEST DUP2 ISZERO PUSH2 0xC0C JUMPI JUMPDEST POP SWAP3 PUSH2 0xB1F PUSH2 0xB24 SWAP5 PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0x5381 JUMP JUMPDEST PUSH1 0x7 SSTORE DUP5 SSTORE ISZERO PUSH2 0xC03 JUMPI DUP1 PUSH1 0x4 SWAP5 JUMPDEST SLOAD AND DUP4 DUP2 LT ISZERO PUSH2 0xBD5 JUMPI PUSH1 0x0 MSTORE DUP2 DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0xFF NOT SWAP4 DUP5 DUP2 SLOAD AND SWAP1 SSTORE DUP5 LT ISZERO PUSH2 0xBA7 JUMPI PUSH2 0xB79 SWAP5 POP DUP4 AND PUSH1 0x0 MSTORE DUP1 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x367C JUMP JUMPDEST PUSH32 0x130BB2FE638478AB244A90FC4550E3D9F3401C2BD639012D7CB8D0CBE95266EF PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST DUP5 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP6 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0x5 SWAP5 PUSH2 0xB33 JUMP JUMPDEST SWAP1 POP PUSH2 0xC1C JUMPI DUP3 ISZERO PUSH2 0xB1F PUSH2 0xB11 JUMP JUMPDEST DUP11 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP POP DUP3 DUP11 EQ PUSH1 0x0 PUSH2 0xB0A JUMP JUMPDEST DUP12 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST SWAP3 POP SWAP7 SWAP4 POP SWAP4 SWAP8 SWAP2 POP PUSH2 0xC93 JUMPI STOP JUMPDEST PUSH1 0x7 SLOAD DUP6 GT PUSH2 0xE39 JUMPI PUSH1 0x14 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 LT ISZERO PUSH2 0xDF6 JUMPI PUSH2 0xCBB SWAP1 DUP8 PUSH2 0x3F4B JUMP JUMPDEST DIV SWAP3 PUSH2 0xCC7 DUP7 DUP6 PUSH2 0x3F6B JUMP JUMPDEST SWAP2 DUP9 PUSH1 0x6 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO SWAP1 DUP2 PUSH2 0xDBC JUMPI PUSH1 0x1 DUP4 EQ SWAP2 DUP3 ISZERO PUSH2 0xDE9 JUMPI JUMPDEST DUP3 ISZERO PUSH2 0xDAA JUMPI JUMPDEST POP POP DUP8 SWAP4 PUSH1 0x5 SWAP10 SWAP11 SWAP4 PUSH2 0xD4D SWAP7 SWAP4 PUSH2 0xB1F PUSH2 0xD06 SWAP5 PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0xD2B DUP6 DUP4 PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xD1F DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x4770 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xD41 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x4770 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0xFF NOT SWAP3 DUP5 DUP5 DUP8 SLOAD AND OR DUP7 SSTORE PUSH1 0x9 SSTORE PUSH1 0xA SSTORE DUP3 PUSH1 0x0 MSTORE DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x1C9EE42116032EBAC99A31AE475140077588D76949471DFB40A21A14AD523B2D PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0xDBC JUMPI POP DUP1 ISZERO DUP4 PUSH1 0x5 PUSH2 0xCEC JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP DUP3 DUP11 EQ SWAP2 POP PUSH1 0x0 PUSH2 0xCE5 JUMP JUMPDEST PUSH1 0x64 DUP7 PUSH1 0x15 DUP6 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x50554E4953484D454E545F524154494F5F484947480000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 PUSH1 0x13 PUSH1 0x64 SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x50554E4953484D454E545F544F4F5F4849474800000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP6 PUSH2 0xA9B JUMP JUMPDEST SWAP1 POP DUP8 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xEAB JUMPI JUMPDEST PUSH2 0xE9A DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x171 JUMPI MLOAD PUSH2 0x2710 PUSH2 0xA75 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE90 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xEE0 JUMPI JUMPDEST PUSH2 0xEC9 DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x171 JUMPI PUSH2 0xEDA SWAP1 PUSH2 0x3C54 JUMP JUMPDEST DUP11 PUSH2 0xA33 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEBF JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0x11 DUP11 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5641554C5449445F4E4F545F4D41544348000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP8 PUSH1 0xD PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x4E4F545F5355424D495454454400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP8 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x171 JUMPI PUSH2 0xFEC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0xFF8 PUSH2 0x3F78 JUMP JUMPDEST PUSH2 0x1004 PUSH2 0x916 DUP3 PUSH2 0x4189 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x101C DUP3 PUSH2 0x1015 DUP2 PUSH2 0x3214 JUMP JUMPDEST SUB DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 SUB PUSH2 0x1164 JUMPI DUP3 MLOAD SWAP2 DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x103D PUSH1 0x1C SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1100 JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x107F JUMPI POP DUP2 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1074 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1C SSTORE STOP JUMPDEST ADD MLOAD SWAP1 POP DUP3 DUP1 PUSH2 0x105E JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP4 PUSH1 0x1C PUSH1 0x0 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP7 DUP3 LT PUSH2 0x10E8 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 LT PUSH2 0x10CF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1C SSTORE STOP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 PUSH2 0x10C4 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x1C PUSH1 0x0 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP4 DUP6 LT PUSH2 0x115A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x114E JUMPI POP PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST DUP3 MLOAD SWAP2 DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x1178 PUSH1 0x1D SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x123E JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x11BD JUMPI POP DUP2 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x11B2 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1D SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP DUP3 DUP1 PUSH2 0x1199 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP4 PUSH1 0x1D PUSH1 0x0 MSTORE PUSH32 0x6D4407E7BE21F808E6509AA9FA9143369579DD7D760FE20A2C09680FC146134F SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP7 DUP3 LT PUSH2 0x1226 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 LT PUSH2 0x120D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1D SSTORE STOP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 PUSH2 0x1202 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1D PUSH1 0x0 MSTORE PUSH32 0x6D4407E7BE21F808E6509AA9FA9143369579DD7D760FE20A2C09680FC146134F PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP4 DUP6 LT PUSH2 0x1298 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x128C JUMPI POP PUSH2 0x1181 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x127F JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1276 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0x12CE DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x3F25 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x12F5 PUSH2 0x3E23 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x1E SLOAD PUSH2 0x1335 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x13BA JUMPI POP PUSH1 0x1 EQ PUSH2 0x135F JUMPI JUMPDEST PUSH2 0x934 DUP5 PUSH2 0x920 DUP2 DUP7 SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST PUSH1 0x1E PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH32 0x50BB669A95C7B50B7E8A6F09454034B2B14CF2B85C730DCA9A539CA82CB6E350 JUMPDEST DUP3 DUP5 LT PUSH2 0x13A2 JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x920 DUP3 PUSH2 0x134F JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x138A JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x920 SWAP2 POP DUP4 SWAP1 POP PUSH2 0x134F JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH2 0x1407 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x3340 JUMP JUMPDEST RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0x12CE DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x80 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1472 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x171 JUMPI PUSH2 0x149B PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND SWAP3 PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x14C9 PUSH2 0x258 SWAP3 PUSH2 0x14BF PUSH1 0x20 SWAP7 DUP5 EQ PUSH2 0x3B8E JUMP JUMPDEST DUP5 PUSH1 0x64 CALLDATALOAD SWAP2 PUSH2 0x5268 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x14D5 DUP2 DUP5 PUSH2 0x3F25 JUMP JUMPDEST SWAP3 PUSH2 0x50B0 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1508 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x24 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x5 PUSH1 0x44 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x3 PUSH1 0xA4 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0xC4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1549 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xE4 CALLDATALOAD AND PUSH1 0xE4 CALLDATALOAD SUB PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1576 DUP2 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1582 DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP2 MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1597 DUP4 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A3 DUP2 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE DUP4 MSTORE PUSH1 0x40 MLOAD PUSH2 0x15D7 DUP2 PUSH2 0x3150 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP5 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x15FF DUP2 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x60 DUP4 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE ADD MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0xA4 CALLDATALOAD EQ SWAP1 DUP2 ISZERO PUSH2 0x1E35 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1E23 JUMPI JUMPDEST POP SWAP1 PUSH2 0x163C PUSH2 0x164A SWAP3 PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0x104 CALLDATALOAD SWAP1 PUSH1 0xE4 CALLDATALOAD SWAP1 PUSH2 0x3C75 JUMP JUMPDEST POP SWAP1 DUP3 SWAP4 SWAP3 MLOAD PUSH1 0x20 DUP6 ADD KECCAK256 SWAP3 PUSH1 0x0 SLOAD DUP5 SUB PUSH2 0x1DDF JUMPI PUSH1 0x24 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x16 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x38AAD32C00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP10 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1DC0 JUMPI JUMPDEST POP ISZERO PUSH2 0x1D7C JUMPI PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH2 0x16EA PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x35CE JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x16FD PUSH1 0x44 CALLDATALOAD PUSH2 0x31AB JUMP JUMPDEST PUSH1 0xFF PUSH1 0x44 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 PUSH2 0x173A PUSH1 0x84 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND DUP8 PUSH1 0xA4 CALLDATALOAD PUSH2 0x4485 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP6 PUSH2 0x178C DUP8 PUSH2 0x30FC JUMP JUMPDEST DUP7 MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH2 0x179B DUP5 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x1 DUP5 MSTORE PUSH2 0x17AA PUSH1 0x24 CALLDATALOAD PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP6 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x17D3 PUSH1 0xA4 CALLDATALOAD PUSH1 0xA0 DUP6 ADD PUSH2 0x31B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x17E0 DUP3 PUSH2 0x3150 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1800 PUSH2 0x3BD9 JUMP JUMPDEST PUSH2 0x1808 PUSH2 0x3BD9 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1816 DUP6 PUSH2 0x3118 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH2 0x182F DUP5 PUSH2 0x3118 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1848 DUP6 PUSH2 0x316C JUMP JUMPDEST DUP1 DUP6 MSTORE DUP2 PUSH1 0x20 DUP7 ADD MSTORE MLOAD PUSH1 0x1 SSTORE DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x186E PUSH1 0xA0 SWAP3 PUSH2 0x367C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x187C DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH2 0x1885 DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0xFF00 PUSH1 0x2 SLOAD SWAP3 PUSH1 0x8 SHL AND SWAP2 AND OR PUSH1 0x2 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x5 SSTORE ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x40 SWAP2 PUSH1 0xFF PUSH1 0xFF NOT PUSH1 0x6 SLOAD AND SWAP2 AND OR PUSH1 0x6 SSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MLOAD DUP1 MLOAD PUSH1 0x7 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x8 SSTORE DUP4 DUP2 ADD MLOAD PUSH1 0x9 SSTORE ADD MLOAD PUSH1 0xA SSTORE ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x1939 DUP3 PUSH2 0x1934 PUSH1 0xB SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x3778 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1CB3 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1CA8 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xB SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x198A DUP3 PUSH2 0x557 PUSH1 0xC SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1C1D JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x1C12 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xC SSTORE JUMPDEST ADD MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x19E5 DUP3 PUSH2 0x19E0 PUSH1 0xD SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x3707 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1B8D JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1B82 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xD SSTORE JUMPDEST PUSH1 0x15 SLOAD SWAP4 PUSH1 0x0 NOT SWAP5 DUP6 DUP2 EQ PUSH2 0x1B53 JUMPI PUSH1 0x1 ADD PUSH1 0x15 SSTORE DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x1A4B DUP3 PUSH2 0x1A46 PUSH1 0xE SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x385A JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1AC9 JUMPI SWAP6 DUP3 SWAP2 PUSH2 0x934 SWAP8 PUSH1 0x0 SWAP4 PUSH2 0x1ABE JUMPI JUMPDEST POP POP DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xE SSTORE JUMPDEST PUSH1 0xF SSTORE PUSH1 0x10 SSTORE PUSH32 0x5C0140B1F9412009D09B44A8920B411DE7A75EBE8C087005130524935E0E457F PUSH1 0x40 MLOAD DUP1 PUSH2 0x1AAF DUP5 DUP3 PUSH2 0x35AC JUMP JUMPDEST SUB SWAP1 LOG1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x35AC JUMP JUMPDEST ADD MLOAD SWAP2 POP DUP8 DUP1 PUSH2 0x1A68 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH1 0xE PUSH1 0x0 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1B3B JUMPI POP SWAP2 PUSH2 0x934 SWAP9 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP6 SWAP5 LT PUSH2 0x1B23 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD PUSH1 0xE SSTORE PUSH2 0x1A7A JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 DUP1 PUSH2 0x1B14 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1AFA JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0x19FB JUMP JUMPDEST SWAP2 PUSH1 0x1F NOT AND SWAP2 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1BFA JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x1BE1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xD SSTORE PUSH2 0x1A10 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0x1BD3 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1BBD JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x19A6 JUMP JUMPDEST SWAP1 PUSH1 0xC PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x1C90 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 DUP4 PUSH1 0x1F NOT PUSH1 0x40 SWAP9 SWAP8 AND LT PUSH2 0x1C77 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xC SSTORE PUSH2 0x19BB JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x1C69 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x1C48 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x194F JUMP JUMPDEST SWAP2 PUSH1 0x1F NOT AND SWAP2 PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1D20 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x1D07 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xB SSTORE PUSH2 0x1964 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x1CF9 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1CE3 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5354414B455F414D4F554E545F5A45524F000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555345525F4E4F545F4558495354000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x1DD9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP7 PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F4F574E45520000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x2D4 JUMPI PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0x163C PUSH2 0x162E JUMP JUMPDEST POP POP PUSH1 0xA4 CALLDATALOAD PUSH1 0x2 EQ PUSH1 0x0 PUSH2 0x1627 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x1E52 CALLDATASIZE PUSH2 0x3559 JUMP JUMPDEST PUSH2 0x1E5A PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x1EB6 SWAP3 PUSH2 0x1E91 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP1 MSTORE PUSH2 0x1E8C PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x35CE JUMP JUMPDEST PUSH2 0x3C75 JUMP JUMPDEST POP POP POP DUP3 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x1EAA DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 EQ PUSH2 0x441A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1EC3 DUP3 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1ED4 DUP3 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH1 0x0 DUP2 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1F07 DUP5 PUSH2 0x3150 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH1 0x0 DUP3 DUP6 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1F2C DUP3 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F38 DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP3 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1F4A DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP4 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x1F5E DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1F74 DUP6 PUSH2 0x3118 JUMP JUMPDEST DUP5 MSTORE DUP3 DUP5 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 DUP3 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1F91 DUP2 PUSH2 0x316C JUMP JUMPDEST DUP4 DUP2 MSTORE ADD MSTORE MLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 SSTORE MLOAD SWAP4 DUP5 MLOAD PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x1FB3 SWAP1 PUSH2 0x367C JUMP JUMPDEST DUP3 DUP6 ADD MLOAD PUSH2 0x1FC0 DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH2 0x1FC9 DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0xFF00 PUSH1 0x2 SLOAD SWAP3 PUSH1 0x8 SHL AND SWAP2 AND OR PUSH1 0x2 SSTORE PUSH1 0xA0 PUSH1 0x40 DUP7 ADD MLOAD SWAP6 PUSH1 0x3 SWAP7 DUP8 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x5 SSTORE ADD MLOAD SWAP1 DUP6 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x60 SWAP2 PUSH1 0xFF PUSH1 0xFF NOT PUSH1 0x6 SLOAD AND SWAP2 AND OR PUSH1 0x6 SSTORE MLOAD DUP1 MLOAD PUSH1 0x7 SSTORE DUP4 DUP2 ADD MLOAD PUSH1 0x8 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x9 SSTORE ADD MLOAD PUSH1 0xA SSTORE MLOAD SWAP1 DUP2 MLOAD SWAP2 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x2078 DUP3 PUSH2 0x1934 PUSH1 0xB SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP5 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2456 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x244B JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP8 SHL SWAP3 DUP9 SHL SHR NOT AND OR PUSH1 0xB SSTORE JUMPDEST DUP2 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 DUP5 DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x20BD DUP3 PUSH2 0x557 PUSH1 0xC SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x23C6 JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x23BB JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP9 SHL SWAP3 DUP10 SHL SHR NOT AND OR PUSH1 0xC SSTORE JUMPDEST ADD MLOAD DUP1 MLOAD SWAP1 DUP4 DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x2108 DUP3 PUSH2 0x19E0 PUSH1 0xD SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x233C JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2331 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SWAP3 DUP8 SHL SHR NOT AND OR PUSH1 0xD SSTORE JUMPDEST PUSH2 0x2138 PUSH2 0x3BD9 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP4 DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x2158 DUP3 PUSH2 0x2153 PUSH1 0x11 SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x3696 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x22B2 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x22A7 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SWAP3 DUP8 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH1 0x0 PUSH1 0x12 SSTORE PUSH1 0x0 PUSH1 0x13 SSTORE PUSH2 0x2192 PUSH2 0x3BD9 JUMP JUMPDEST DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x758 JUMPI PUSH2 0x21AA DUP4 PUSH2 0x1A46 PUSH1 0xE SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x221A JUMPI POP SWAP1 DUP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x220D JUMPI JUMPDEST POP POP DUP1 PUSH1 0x0 NOT SWAP3 SWAP4 SHL SWAP4 SHL SHR NOT AND OR PUSH1 0xE SSTORE JUMPDEST PUSH1 0x0 PUSH1 0xF SSTORE PUSH1 0x0 PUSH1 0x10 SSTORE PUSH32 0x496685ED89450883D7FF0E8E3B71EB9DCA092E7B9742B53ED4611B7522443E5E PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST ADD MLOAD SWAP2 POP DUP1 PUSH1 0x0 NOT PUSH2 0x21C2 JUMP JUMPDEST SWAP3 SWAP4 SWAP5 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND PUSH1 0xE PUSH1 0x0 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH2 0x228D JUMPI POP POP POP DUP2 GT PUSH2 0x2272 JUMPI JUMPDEST POP POP POP POP POP DUP2 SHL ADD PUSH1 0xE SSTORE PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x0 NOT SWAP3 PUSH1 0xF8 SWAP3 ADD MLOAD SWAP4 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 DUP1 DUP5 PUSH2 0x2262 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x2250 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0x216D JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP8 SWAP5 AND SWAP2 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP3 PUSH1 0x0 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x231B JUMPI POP POP DUP5 GT PUSH2 0x2303 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x2180 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP11 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0x22F5 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x22E4 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0x211D JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP8 SWAP5 AND SWAP2 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP3 PUSH1 0x0 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x23A5 JUMPI POP POP DUP5 GT PUSH2 0x238D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xD SSTORE PUSH2 0x2130 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP11 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0x237F JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x236E JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x20D8 JUMP JUMPDEST SWAP3 SWAP2 DUP7 SWAP2 PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0xC PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP2 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x2435 JUMPI POP POP SWAP6 DUP4 PUSH1 0x40 SWAP8 LT PUSH2 0x241D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xC SSTORE PUSH2 0x20EB JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP13 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x240F JUMP JUMPDEST DUP4 DUP10 ADD MLOAD DUP6 SSTORE DUP12 SWAP7 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x23FA JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x208D JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP9 SWAP5 AND SWAP2 PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP3 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x24BF JUMPI POP POP DUP5 GT PUSH2 0x24A7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xB SSTORE PUSH2 0x20A0 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP12 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x2499 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP12 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x2488 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x13 SLOAD PUSH1 0x4 CALLDATALOAD SWAP2 DUP2 ISZERO PUSH2 0x25AF JUMPI PUSH1 0x10 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x256B JUMPI PUSH2 0x2529 PUSH1 0x40 SWAP5 DUP6 MLOAD PUSH2 0x2513 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP5 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x254D JUMPI JUMPDEST POP PUSH2 0x413E JUMP JUMPDEST DUP4 MLOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP3 AND DUP5 MSTORE AND SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP DUP6 MLOAD PUSH2 0x255E DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP5 DUP2 MLOAD SWAP2 ADD KECCAK256 EQ DUP7 PUSH2 0x2523 JUMP JUMPDEST PUSH1 0x64 DUP3 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F5F54454C454752414D5F49445F464F525F53454C4C455200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F5F54454C454752414D5F49445F464F525F42555945520000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x2601 CALLDATASIZE PUSH2 0x34ED JUMP JUMPDEST SWAP1 PUSH2 0x260D SWAP4 SWAP3 SWAP4 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND SWAP2 PUSH1 0x8 DUP4 LT ISZERO SWAP2 DUP3 PUSH2 0x2D4 JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP6 DUP7 DUP1 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x27EB JUMPI JUMPDEST SWAP2 PUSH2 0x2670 SWAP4 SWAP2 PUSH2 0x1E8C PUSH2 0x264A SWAP5 PUSH2 0x35CE JUMP JUMPDEST POP POP POP DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x2663 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP7 DUP2 MLOAD SWAP2 ADD KECCAK256 EQ ISZERO PUSH2 0x3631 JUMP JUMPDEST PUSH2 0x2D4 JUMPI PUSH1 0x4 SUB PUSH2 0x27A7 JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x758 JUMPI PUSH2 0x269C DUP4 PUSH2 0x19E0 PUSH1 0xD SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP1 SWAP3 PUSH1 0x1F DUP2 GT PUSH1 0x1 EQ PUSH2 0x2726 JUMPI DUP1 SWAP2 SWAP3 SWAP4 PUSH1 0x0 SWAP2 PUSH2 0x271B JUMPI JUMPDEST POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xD SSTORE JUMPDEST PUSH1 0x6 PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x53D57D9D48DDA1C6E6D0FC0B92D00B750B752F21CC973929CE8B4B60B374505E PUSH1 0x40 MLOAD DUP1 PUSH2 0x2704 DUP2 PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x934 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD DUP5 PUSH2 0x26B5 JUMP JUMPDEST PUSH1 0x1F NOT DUP2 AND SWAP4 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT PUSH2 0x2790 JUMPI POP DUP3 PUSH1 0x1 SWAP5 SWAP6 SWAP7 LT PUSH2 0x2777 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0xD SSTORE PUSH2 0x26C9 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 PUSH2 0x276A JUMP JUMPDEST SWAP1 SWAP2 DUP5 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x2756 JUMP JUMPDEST PUSH1 0x64 DUP3 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F46494E414C495A454400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP3 POP SWAP1 PUSH1 0x0 SWAP3 PUSH1 0x3 DUP6 EQ DUP1 ISZERO PUSH2 0x2822 JUMPI JUMPDEST DUP5 DUP2 ISZERO PUSH2 0x280E JUMPI JUMPDEST POP SWAP2 SWAP3 SWAP2 PUSH2 0x2638 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 SWAP2 PUSH2 0x2D4 JUMPI SWAP1 PUSH1 0x4 DUP6 EQ DUP5 PUSH2 0x2805 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP PUSH1 0x6 DUP6 EQ PUSH2 0x27FD JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x285C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP4 SUB PUSH2 0x171 JUMPI PUSH1 0x3 PUSH1 0x64 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x84 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH2 0x28A8 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x35CE JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2CE5 JUMPI PUSH2 0x28C4 SWAP1 PUSH1 0x64 CALLDATALOAD EQ PUSH2 0x3B8E JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH2 0x2CDB JUMPI PUSH2 0x28F2 CALLVALUE SWAP4 JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28E1 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP6 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP SWAP5 SWAP2 SWAP6 SWAP1 SWAP4 DUP7 MLOAD PUSH1 0x20 DUP9 ADD KECCAK256 SWAP2 PUSH1 0x64 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x7 SLOAD GT PUSH2 0x2C97 JUMPI DUP5 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x16 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x38AAD32C00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP9 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2C78 JUMPI JUMPDEST POP ISZERO PUSH2 0x2C34 JUMPI PUSH2 0x2994 SWAP1 DUP4 EQ ISZERO PUSH2 0x3631 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2B95 JUMPI LT PUSH2 0x2B51 JUMPI SWAP1 PUSH2 0x29CB SWAP2 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND SWAP1 PUSH1 0x64 CALLDATALOAD PUSH2 0x4485 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND DUP3 OR DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH32 0x2C5F9A2E204D4DB70AD0F9037679E33061B4C51A386497019BEE969E16BE28D7 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x2B24 JUMPI POP PUSH2 0x2A33 DUP2 PUSH2 0x2153 PUSH1 0x11 SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x2AA0 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x2A95 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH1 0x12 SSTORE PUSH1 0x13 SSTORE PUSH32 0xF13F251F5172305EB93606C0071B9C48215D3EC6A6698A7FA987C18725488E7F PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP5 DUP1 PUSH2 0x2A4C JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2B0C JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x2AF3 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x2A61 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x2AD0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x12 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x4E4F545F454E4F5547485F5041594D454E540000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP CALLVALUE ISZERO PUSH2 0x2BF0 JUMPI ISZERO PUSH2 0x2BAC JUMPI SWAP1 PUSH2 0x29CB SWAP2 PUSH2 0x29A9 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH1 0xC PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5A45524F5F5041594D454E540000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP5 PUSH1 0xD PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5A45524F5F4D534756414C554500000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP6 PUSH1 0xF PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x55534552545F4E4F545F45584953540000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x2C91 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP10 PUSH2 0x2982 JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0xF PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5354414B455F494E434F52524543540000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x28F2 DUP3 SWAP4 PUSH2 0x28D1 JUMP JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH2 0x18F PUSH1 0x20 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x3F25 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH2 0x2DB8 PUSH2 0x2D9B PUSH1 0x40 MLOAD PUSH2 0x2D8F DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP4 PUSH2 0x3F25 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD PUSH2 0x2DAC DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x3F25 JUMP JUMPDEST SWAP1 PUSH2 0x3F6B JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH2 0x2DDB DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP3 MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2DEE DUP4 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2DFB DUP5 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0xFF SWAP2 DUP7 MSTORE PUSH1 0x8 SHR AND SWAP4 PUSH2 0x2E1F DUP6 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP6 DUP3 ADD MSTORE PUSH1 0x3 SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x2E50 PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0xA0 DUP4 ADD PUSH2 0x31B5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2E5E DUP2 PUSH2 0x3150 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x8 SLOAD DUP6 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH1 0x60 DUP3 ADD MSTORE DUP5 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x2E8A DUP2 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 DUP2 PUSH1 0x0 PUSH1 0xB SLOAD PUSH2 0x2E9D DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 DUP10 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x30B2 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3056 JUMPI JUMPDEST POP PUSH2 0x2EC1 SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD DUP6 DUP2 PUSH1 0x0 PUSH1 0xC SLOAD PUSH2 0x2ED6 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 DUP10 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3038 JUMPI POP PUSH1 0x1 EQ PUSH2 0x2FDC JUMPI JUMPDEST POP PUSH2 0x2EFA SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST DUP6 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP5 DUP7 PUSH1 0xD SLOAD SWAP2 PUSH2 0x2F12 DUP4 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP3 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x2FBB JUMPI POP PUSH1 0x1 EQ PUSH2 0x2F5D JUMPI JUMPDEST POP POP POP PUSH2 0x2F3C DUP2 PUSH2 0x934 SWAP6 SWAP7 SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 SWAP5 MLOAD DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x3395 JUMP JUMPDEST SWAP2 SWAP1 SWAP7 POP PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x2FA8 JUMPI POP POP POP DUP2 ADD SWAP1 SWAP5 ADD SWAP4 PUSH2 0x2F3C DUP7 PUSH2 0x934 PUSH2 0x2F29 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP6 ADD DUP11 ADD MSTORE SWAP3 DUP9 ADD SWAP3 DUP2 ADD PUSH2 0x2F8C JUMP JUMPDEST PUSH1 0xFF NOT AND DUP4 DUP7 ADD MSTORE POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 POP PUSH2 0x2F3C DUP7 PUSH2 0x934 PUSH2 0x2F29 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP DUP9 PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 JUMPDEST DUP3 DUP5 LT PUSH2 0x3021 JUMPI POP POP POP SWAP2 PUSH2 0x2EFA SWAP3 DUP3 ADD ADD DUP9 SWAP3 PUSH2 0x2EED JUMP JUMPDEST DUP1 SLOAD DUP8 DUP6 ADD DUP8 ADD MSTORE DUP7 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP11 SWAP2 ADD PUSH2 0x3008 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP7 ADD MSTORE POP DUP10 SWAP4 SWAP1 ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP PUSH2 0x2EFA PUSH2 0x2EED JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP DUP9 PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 JUMPDEST DUP3 DUP5 LT PUSH2 0x309B JUMPI POP POP POP SWAP2 PUSH2 0x2EC1 SWAP3 DUP3 ADD ADD DUP9 SWAP3 PUSH2 0x2EB4 JUMP JUMPDEST DUP1 SLOAD DUP8 DUP6 ADD DUP8 ADD MSTORE DUP7 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP11 SWAP2 ADD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP7 ADD MSTORE POP DUP10 SWAP4 SWAP1 ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP PUSH2 0x2EC1 PUSH2 0x2EB4 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI DUP1 PUSH2 0x1407 PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x6 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH1 0x1F NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x2D4 JUMPI JUMP JUMPDEST PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x320A JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x31DB JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x31D0 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x3224 DUP3 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x329B JUMPI POP PUSH1 0x1 EQ PUSH2 0x3242 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0xE PUSH1 0x0 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3283 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP5 SWAP6 POP PUSH1 0xFF NOT SWAP2 POP SWAP3 SWAP2 SWAP3 AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x32C9 DUP3 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x329B JUMPI POP PUSH1 0x1 EQ PUSH2 0x32E7 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3328 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3316 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x3360 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3350 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x338E DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x334D JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x3487 SWAP3 PUSH2 0x33E9 PUSH1 0xA0 DUP3 MLOAD PUSH2 0x33AE DUP7 DUP3 MLOAD PUSH2 0x3340 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x33BC DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x30EF JUMP JUMPDEST PUSH1 0x60 PUSH1 0x20 DUP3 ADD MLOAD DUP1 MLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xE0 DUP7 ADD MSTORE DUP4 DUP2 ADD MLOAD PUSH2 0x100 DUP7 ADD MSTORE ADD MLOAD PUSH2 0x120 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH2 0x3436 PUSH2 0x160 DUP1 PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x60 DUP5 MLOAD SWAP2 DUP5 ADD MSTORE PUSH2 0x1C0 DUP4 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SWAP1 PUSH2 0x1A0 PUSH1 0x40 PUSH2 0x3477 PUSH1 0x20 DUP7 ADD MLOAD SWAP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA0 SWAP6 DUP7 DUP7 DUP4 SUB ADD PUSH2 0x180 DUP8 ADD MSTORE PUSH2 0x3370 JUMP JUMPDEST SWAP5 ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x3370 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x758 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x171 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x34BD DUP3 PUSH2 0x348A JUMP JUMPDEST SWAP3 PUSH2 0x34CB PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x3188 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x171 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x171 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x171 JUMPI DUP4 PUSH2 0x351A SWAP2 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x171 JUMPI PUSH2 0x3531 SWAP2 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x171 JUMPI SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x171 JUMPI PUSH2 0x3584 SWAP2 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x171 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x20 PUSH2 0x3487 SWAP4 DUP2 DUP5 MSTORE DUP1 MLOAD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD SWAP2 PUSH1 0x40 DUP1 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x3395 JUMP JUMPDEST ISZERO PUSH2 0x35D5 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F535441545553000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x171 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x171 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3638 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x594F555F4152455F5448455F53454C4C45520000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0xFF PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND SWAP2 AND OR PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x36A2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x11 DUP3 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x36FD JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x36F2 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x36E6 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x36DD JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3713 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xD DUP3 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x376E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x3763 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3757 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x374E JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3784 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xB DUP3 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x37DF JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x37D4 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x37C8 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x37F5 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xC DUP3 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x3850 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x3845 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3839 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3866 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xE DUP3 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x38C1 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x38B6 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x38AA JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x38A1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1 DUP1 SLOAD DUP3 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MSTORE PUSH1 0xFF PUSH1 0x2 SLOAD PUSH2 0x38F2 PUSH1 0x60 DUP7 ADD DUP4 DUP4 AND PUSH2 0x3340 JUMP JUMPDEST PUSH1 0x8 SHR AND PUSH2 0x38FF DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x3 SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x3930 PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH2 0x100 DUP6 ADD SWAP1 PUSH2 0x30EF JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x160 SWAP1 DUP2 DUP6 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x180 DUP6 ADD MSTORE PUSH2 0x1A0 DUP5 ADD MSTORE PUSH1 0x60 PUSH2 0x1C0 DUP5 ADD MSTORE PUSH1 0x0 SWAP3 PUSH1 0xB SLOAD PUSH2 0x3973 DUP2 PUSH2 0x31C1 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x220 DUP5 ADD MSTORE DUP4 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x3B6F JUMPI POP PUSH1 0x1 EQ PUSH2 0x3B11 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE40 DUP1 DUP3 DUP7 SUB ADD PUSH2 0x1E0 DUP4 ADD MSTORE PUSH1 0x0 SWAP5 PUSH1 0xC SLOAD SWAP1 PUSH2 0x39CD DUP3 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 DUP6 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3AF4 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3A96 JUMPI JUMPDEST POP POP PUSH2 0x200 SWAP1 DUP3 DUP7 SUB ADD SWAP2 ADD MSTORE PUSH1 0x0 SWAP3 PUSH1 0xD SLOAD SWAP2 PUSH2 0x3A01 DUP4 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3A79 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3A1F JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST SWAP3 SWAP4 POP SWAP1 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0x3A65 JUMPI POP POP POP POP ADD ADD CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3A18 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0x3A4F JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 DUP5 ADD MSTORE POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3A18 JUMP JUMPDEST DUP6 SWAP2 SWAP3 SWAP7 POP PUSH1 0xC PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP1 DUP6 PUSH1 0x0 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x3ADE JUMPI POP POP ADD ADD SWAP5 SWAP1 POP PUSH2 0x200 CODESIZE PUSH2 0x39E4 JUMP JUMPDEST DUP1 SLOAD DUP4 DUP6 ADD DUP7 ADD MSTORE DUP9 SWAP5 SWAP1 SWAP4 ADD SWAP3 DUP8 SWAP2 ADD PUSH2 0x3AC7 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP3 DUP9 ADD MSTORE POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD DUP5 ADD SWAP5 POP PUSH2 0x200 CODESIZE PUSH2 0x39E4 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 DUP4 DUP4 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3B59 JUMPI POP POP POP PUSH2 0x240 SWAP2 POP DUP5 ADD ADD SWAP3 CODESIZE PUSH2 0x3990 JUMP JUMPDEST DUP1 SLOAD PUSH2 0x240 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 DUP4 DUP6 SWAP2 PUSH2 0x3B40 JUMP JUMPDEST SWAP3 SWAP6 POP POP PUSH1 0xFF NOT PUSH2 0x240 SWAP3 AND DUP3 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP3 CODESIZE PUSH2 0x3990 JUMP JUMPDEST ISZERO PUSH2 0x3B95 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57524F4E475F544F4B454E000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3BE6 DUP3 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH32 0x3078303000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x171 JUMPI DUP1 MLOAD PUSH2 0x3C28 DUP2 PUSH2 0x348A JUMP JUMPDEST SWAP3 PUSH2 0x3C36 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x3188 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x171 JUMPI PUSH2 0x3487 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x334D JUMP JUMPDEST MLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x171 JUMPI JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x3CD5 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 PUSH1 0x18 SLOAD AND SWAP4 PUSH1 0x40 SWAP5 DUP6 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 PUSH32 0x7276069D00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x60 PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SWAP4 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 PUSH1 0x44 DUP4 ADD MSTORE DUP2 PUSH1 0x0 SWAP9 DUP10 SWAP5 SUB SWAP2 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x3DEE JUMPI DUP6 SWAP2 DUP7 DUP1 SWAP7 DUP2 SWAP7 PUSH2 0x3D70 JUMPI JUMPDEST POP DUP3 DUP7 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP PUSH2 0x3D19 PUSH1 0x20 DUP7 ADD PUSH2 0x3C54 JUMP JUMPDEST POP DUP2 DUP6 ADD MLOAD SUB PUSH2 0x3D2A JUMPI POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x64 SWAP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57524F4E475F4E4F4E4345000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP8 POP SWAP5 POP SWAP2 POP SWAP4 POP RETURNDATASIZE DUP1 DUP5 DUP8 RETURNDATACOPY PUSH2 0x3D87 DUP2 DUP8 PUSH2 0x3188 JUMP JUMPDEST DUP6 ADD SWAP4 PUSH1 0x80 DUP7 DUP7 SUB SLT PUSH2 0x3DEA JUMPI DUP6 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x3DE6 JUMPI DUP7 PUSH2 0x3DB4 SWAP2 DUP10 ADD PUSH2 0x3C12 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP9 ADD MLOAD SWAP4 DUP4 DUP10 ADD MLOAD SWAP9 PUSH1 0x60 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x3DE2 JUMPI PUSH2 0x3DD7 SWAP3 SWAP2 ADD PUSH2 0x3C12 JUMP JUMPDEST SWAP6 SWAP3 SWAP7 SWAP6 SWAP5 CODESIZE PUSH2 0x3CFF JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x171 JUMPI MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x171 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0x3EBE JUMPI POP PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x3487 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3EB7 JUMPI JUMPDEST PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3DF7 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3EA5 JUMP JUMPDEST PUSH1 0x2 SUB PUSH2 0x3F20 JUMPI PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1B53 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1B53 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1B53 JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND CALLER SUB PUSH2 0x3F99 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F5641554C5400000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 PUSH1 0x60 SWAP3 PUSH2 0x3FF2 DUP4 PUSH1 0x80 DUP2 ADD SWAP9 PUSH2 0x30EF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x40 SWAP3 PUSH2 0x4077 PUSH32 0xFC75911105C5435503D8CE6E41BF92051ED6DA32A2077C1A8F73E1D251F64CDE SWAP4 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE DUP7 DUP3 KECCAK256 DUP6 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x4054 DUP2 DUP9 DUP5 KECCAK256 SLOAD PUSH2 0x3F6B JUMP JUMPDEST DUP1 SWAP8 DUP4 DUP7 DUP4 SWAP6 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 DUP9 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3FDD JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP3 KECCAK256 DUP5 DUP4 MSTORE PUSH1 0x20 MSTORE DUP5 DUP3 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x40FB JUMPI SWAP2 DUP2 DUP7 PUSH2 0x40DA PUSH2 0x4077 SWAP5 PUSH32 0x77008762CA31A384E88F2217752CDEF978440C9AD826B7B891C59A8E61281A31 SWAP9 SWAP8 SWAP7 PUSH2 0x3F5E JUMP JUMPDEST DUP1 SWAP9 DUP5 DUP8 DUP4 SWAP7 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 DUP10 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3FDD JUMP JUMPDEST PUSH1 0x64 DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E53554646494349454E545F4445504F534954000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x4145 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F5448455F53454C4C45525F4F525F4255594552000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4199 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x41B0 DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 DUP3 EQ SWAP2 DUP3 ISZERO PUSH2 0x41C6 JUMPI POP POP SWAP1 JUMP JUMPDEST EQ SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 PUSH2 0x41D7 SWAP3 SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD KECCAK256 PUSH1 0x40 SWAP1 DUP2 MLOAD PUSH2 0x41F4 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ DUP1 ISZERO PUSH2 0x428B JUMPI JUMPDEST ISZERO PUSH2 0x4248 JUMPI DUP2 MLOAD PUSH2 0x4217 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 SUB PUSH2 0x4239 JUMPI MLOAD SWAP1 PUSH2 0x4231 DUP3 PUSH2 0x1015 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x4231 DUP3 PUSH2 0x1015 DUP2 PUSH2 0x32B9 JUMP JUMPDEST PUSH1 0x64 DUP4 DUP4 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F53454C4C45525F4F525F425559455200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP2 MLOAD PUSH2 0x429B DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ PUSH2 0x4203 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x42B9 DUP3 PUSH2 0x1015 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 SUB PUSH2 0x4381 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 PUSH1 0x0 PUSH1 0x1C SLOAD PUSH2 0x42D9 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x4360 JUMPI POP PUSH1 0x1 EQ PUSH2 0x4301 JUMPI JUMPDEST POP POP PUSH2 0x3487 SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x1C PUSH1 0x0 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x4348 JUMPI POP POP PUSH2 0x3487 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x42F3 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x4330 JUMP JUMPDEST SWAP1 POP PUSH2 0x3487 SWAP6 SWAP4 POP PUSH1 0xFF NOT SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x42F3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 PUSH1 0x0 PUSH1 0x1D SLOAD PUSH2 0x4394 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x4360 JUMPI POP PUSH1 0x1 EQ PUSH2 0x43BB JUMPI POP POP PUSH2 0x3487 SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x1D PUSH1 0x0 MSTORE PUSH32 0x6D4407E7BE21F808E6509AA9FA9143369579DD7D760FE20A2C09680FC146134F SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x4402 JUMPI POP POP PUSH2 0x3487 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x42F3 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x43EA JUMP JUMPDEST ISZERO PUSH2 0x4421 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F53454C4C455200000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x4483 SWAP4 SWAP6 SWAP5 SWAP3 SWAP6 PUSH1 0x60 DUP3 ADD SWAP7 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x30EF JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 PUSH1 0x2 PUSH2 0x44AC SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4734 JUMPI JUMPDEST POP PUSH2 0x35CE JUMP JUMPDEST DUP2 ISZERO PUSH2 0x46F0 JUMPI PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI DUP4 ISZERO DUP1 ISZERO PUSH2 0x4503 JUMPI JUMPDEST POP PUSH32 0x7D53254B9393EC490C848E90ED920CF3B18C2151DAA4B322875F24DD6301206C SWAP3 POP PUSH2 0x4077 PUSH2 0x44F6 DUP4 DUP4 DUP8 PUSH2 0x4000 JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH2 0x4465 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x46E5 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x46D5 JUMPI JUMPDEST POP PUSH2 0x4522 SWAP2 POP PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0x452B DUP5 PUSH2 0x5353 JUMP JUMPDEST SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH2 0x454B DUP8 PUSH2 0x5353 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 SWAP5 SWAP3 SWAP1 SWAP2 DUP6 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x880 JUMPI DUP7 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x46A5 JUMPI JUMPDEST POP LT PUSH2 0x4661 JUMPI SWAP1 PUSH1 0x64 DUP4 SWAP3 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP6 DUP7 SWAP5 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE DUP10 PUSH1 0x44 DUP6 ADD MSTORE AND GAS CALL DUP1 ISZERO PUSH2 0x880 JUMPI PUSH32 0x7D53254B9393EC490C848E90ED920CF3B18C2151DAA4B322875F24DD6301206C SWAP5 PUSH2 0x463E SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x4644 JUMPI JUMPDEST POP POP PUSH2 0x5308 JUMP JUMPDEST CODESIZE PUSH2 0x44C4 JUMP JUMPDEST PUSH2 0x465A SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x4637 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E53554646494349454E545F414C4C4F57414E434500000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 POP DUP5 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x46CE JUMPI JUMPDEST PUSH2 0x46BC DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP DUP6 SWAP1 MLOAD CODESIZE PUSH2 0x45B5 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x46B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D4 JUMPI PUSH2 0x4522 SWAP1 CODESIZE PUSH2 0x4517 JUMP JUMPDEST PUSH1 0x2 DUP8 EQ SWAP2 POP PUSH2 0x4510 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5354414B455F5245515549524544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x3 SWAP2 POP EQ ISZERO CODESIZE PUSH2 0x44A6 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x476B JUMPI RETURNDATASIZE SWAP1 PUSH2 0x4751 DUP3 PUSH2 0x348A JUMP JUMPDEST SWAP2 PUSH2 0x475F PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x3188 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x477C DUP2 DUP4 DUP6 PUSH2 0x407D JUMP JUMPDEST SWAP3 PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 PUSH2 0x48BF JUMPI POP PUSH1 0x4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP2 PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH32 0x18DA001100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x880 JUMPI DUP4 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x4878 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 SWAP4 DUP2 SWAP4 DUP3 SWAP4 AND GAS CALL PUSH2 0x47FA PUSH2 0x4740 JUMP JUMPDEST POP ISZERO PUSH2 0x4834 JUMPI PUSH32 0x44E7D684DF94A05F40AE4EA3F03CBD42CE0647BD9D92E4105E296C10088F41AA SWAP2 PUSH1 0x40 SWAP2 JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43414C4C5F4641494C4544000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP3 POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x48B7 JUMPI JUMPDEST DUP2 PUSH2 0x4893 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP PUSH1 0x0 DUP1 DUP5 DUP2 SWAP5 PUSH2 0x48AC DUP4 SWAP6 PUSH2 0x3C54 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP PUSH2 0x47E6 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4886 JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP2 DUP4 PUSH1 0x2 PUSH32 0x44E7D684DF94A05F40AE4EA3F03CBD42CE0647BD9D92E4105E296C10088F41AA SWAP6 EQ PUSH1 0x0 EQ PUSH2 0x48FF JUMPI POP PUSH2 0x48FA DUP2 PUSH2 0x490F JUMP JUMPDEST PUSH2 0x4826 JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x4826 JUMPI PUSH2 0x48FA DUP2 PUSH2 0x4F23 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x17 SLOAD AND PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 DUP4 DUP1 SWAP4 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 SWAP6 DUP7 SWAP2 PUSH1 0x4 SWAP7 DUP8 SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4BED JUMPI DUP4 PUSH2 0x49D7 SWAP3 DUP8 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x4BF8 JUMPI JUMPDEST POP DUP9 PUSH1 0x1A SLOAD AND PUSH1 0x0 DUP11 DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP7 DUP3 SWAP6 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP5 MSTORE DUP14 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0x4BED JUMPI PUSH2 0x4BD0 JUMPI JUMPDEST POP PUSH2 0x49F0 PUSH2 0x4C15 JUMP JUMPDEST SWAP4 DUP6 PUSH1 0x17 SLOAD AND SWAP4 DUP3 MLOAD SWAP4 PUSH32 0x4B57B0BE00000000000000000000000000000000000000000000000000000000 SWAP7 DUP8 DUP7 MSTORE DUP4 DUP7 DUP5 DUP2 DUP11 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x4BC5 JUMPI PUSH1 0x0 SWAP7 PUSH2 0x4BA6 JUMPI JUMPDEST POP DUP5 MLOAD SWAP6 DUP5 DUP8 PUSH1 0x24 DUP2 PUSH32 0xD223A56400000000000000000000000000000000000000000000000000000000 SWAP12 DUP13 DUP3 MSTORE PUSH1 0x0 DUP10 DUP4 ADD MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x4B9B JUMPI PUSH1 0x0 SWAP8 PUSH2 0x4B6A JUMPI JUMPDEST POP SWAP1 PUSH2 0x4A8E SWAP3 SWAP2 PUSH3 0xFFFFFF DUP1 SWAP9 AND SWAP2 PUSH2 0x4C70 JUMP JUMPDEST SWAP7 PUSH1 0x17 SLOAD AND SWAP5 DUP4 MLOAD SWAP7 DUP8 MSTORE DUP3 DUP8 DUP4 DUP2 DUP10 GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x4B5F JUMPI PUSH1 0x0 SWAP8 PUSH2 0x4B33 JUMPI JUMPDEST POP SWAP2 DUP1 SWAP2 PUSH1 0x24 PUSH1 0x1 SWAP5 PUSH2 0x4AC0 PUSH2 0x5055 JUMP JUMPDEST SWAP9 DUP8 MLOAD SWAP7 DUP8 SWAP5 DUP6 SWAP4 DUP5 MSTORE DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4B29 JUMPI POP PUSH1 0x0 SWAP3 PUSH2 0x4AF8 JUMPI JUMPDEST POP POP SWAP2 PUSH2 0x4AF3 SWAP4 SWAP2 PUSH2 0x4483 SWAP6 SWAP4 AND SWAP2 PUSH2 0x4C70 JUMP JUMPDEST PUSH2 0x4F23 JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP4 RETURNDATASIZE DUP4 GT PUSH2 0x4B22 JUMPI JUMPDEST PUSH2 0x4B0F DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP MLOAD DUP2 PUSH2 0x4483 PUSH2 0x4ADF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4B05 JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 SWAP3 SWAP1 DUP4 SWAP3 SWAP9 POP PUSH2 0x4B54 PUSH1 0x24 SWAP2 PUSH1 0x1 SWAP7 RETURNDATASIZE DUP7 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP9 SWAP3 POP POP SWAP2 SWAP3 PUSH2 0x4AAF JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP7 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4B94 JUMPI JUMPDEST PUSH2 0x4B81 DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP MLOAD SWAP6 PUSH2 0x4A8E PUSH2 0x4A7A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4B77 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4BBE SWAP2 SWAP7 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x4A35 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4BE6 SWAP1 DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST POP CODESIZE PUSH2 0x49E7 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4C0F SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x4978 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0x880 JUMPI DUP7 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4EEE JUMPI JUMPDEST POP LT PUSH2 0x4E85 JUMPI JUMPDEST POP PUSH1 0xF TIMESTAMP ADD SWAP1 DUP2 TIMESTAMP GT PUSH2 0x1B53 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1A SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x100 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE PUSH1 0x40 DUP3 ADD SWAP5 PUSH3 0xFFFFFF AND DUP6 MSTORE PUSH1 0x60 DUP3 ADD SWAP6 ADDRESS DUP8 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0xA0 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0xC0 DUP4 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0xE0 DUP5 ADD PUSH1 0x0 SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP8 PUSH32 0x414BF38900000000000000000000000000000000000000000000000000000000 DUP10 MSTORE DUP7 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 DUP11 ADD MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x24 DUP10 ADD MSTORE MLOAD PUSH3 0xFFFFFF AND PUSH1 0x44 DUP9 ADD MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x64 DUP8 ADD MSTORE MLOAD PUSH1 0x84 DUP7 ADD MSTORE MLOAD PUSH1 0xA4 DUP6 ADD MSTORE MLOAD PUSH1 0xC4 DUP5 ADD MSTORE PUSH1 0xE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE4 DUP4 ADD MSTORE GAS SWAP3 PUSH1 0x0 PUSH2 0x104 SWAP3 PUSH1 0x20 SWAP6 CALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4E56 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4E7D JUMPI JUMPDEST DUP2 PUSH2 0x4E70 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E63 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP7 GAS CALL DUP1 ISZERO PUSH2 0x880 JUMPI ISZERO PUSH2 0x4CE4 JUMPI PUSH2 0x4EE7 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST POP CODESIZE PUSH2 0x4CE4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4F1B JUMPI JUMPDEST DUP2 PUSH2 0x4F09 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP DUP6 SWAP1 MLOAD CODESIZE PUSH2 0x4CDD JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4EFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 PUSH1 0x20 SWAP7 DUP8 SWAP4 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI DUP5 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x5033 JUMPI JUMPDEST POP PUSH1 0x24 SWAP1 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x42966C6800000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5016 JUMPI JUMPDEST POP ISZERO PUSH2 0x4FD2 JUMPI POP JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D757365206275726E206661696C656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x502D SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x4FC9 JUMP JUMPDEST PUSH1 0x24 SWAP2 SWAP3 POP PUSH2 0x504E SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x4F81 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 PUSH1 0x2 PUSH2 0x50D7 SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4734 JUMPI POP PUSH2 0x35CE JUMP JUMPDEST PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI DUP4 PUSH2 0x514D JUMPI PUSH1 0x0 DUP1 DUP1 DUP5 DUP2 SWAP5 DUP3 SWAP1 DUP3 ISZERO PUSH2 0x5143 JUMPI JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 CALL ISZERO PUSH2 0x880 JUMPI PUSH32 0xF710AED018092BD38AB8D98FE9AA682F6B3AA552004E37CB2E0D6E3E669582EE SWAP2 JUMPDEST PUSH2 0x4077 PUSH2 0x44F6 DUP4 DUP4 DUP8 PUSH2 0x407D JUMP JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0x50F5 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP5 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x525D JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x524F JUMPI JUMPDEST POP DUP3 PUSH2 0x51ED SWAP5 PUSH2 0x5173 PUSH1 0x20 SWAP4 PUSH2 0x3B8E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x5191 DUP9 PUSH2 0x5353 JUMP JUMPDEST AND SWAP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP9 DUP2 SWAP6 DUP3 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x880 JUMPI PUSH32 0xF710AED018092BD38AB8D98FE9AA682F6B3AA552004E37CB2E0D6E3E669582EE SWAP4 PUSH2 0x522C SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x5231 JUMPI JUMPDEST POP PUSH2 0x5308 JUMP JUMPDEST PUSH2 0x5135 JUMP JUMPDEST PUSH2 0x5249 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x5226 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP3 PUSH2 0x5162 JUMP JUMPDEST PUSH1 0x2 DUP7 EQ SWAP2 POP PUSH2 0x515B JUMP JUMPDEST SWAP1 PUSH2 0x5273 SWAP3 SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x528D DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ DUP1 ISZERO PUSH2 0x52E9 JUMPI JUMPDEST ISZERO PUSH2 0x52A5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E415554484F52495A45440000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x52FA DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ PUSH2 0x529D JUMP JUMPDEST ISZERO PUSH2 0x530F JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5378 JUMPI PUSH1 0x1 EQ PUSH2 0x5370 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3487 PUSH2 0x5055 JUMP JUMPDEST POP PUSH2 0x3487 PUSH2 0x4C15 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x17 SLOAD AND PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP4 PUSH32 0x18DA001100000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP7 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x4B5F JUMPI PUSH1 0x0 SWAP7 PUSH2 0x559B JUMPI JUMPDEST POP PUSH1 0x3 DUP8 LT ISZERO PUSH2 0x2D4 JUMPI DUP7 ISZERO PUSH2 0x5533 JUMPI POP PUSH1 0x2 DUP7 EQ SWAP5 DUP6 ISZERO PUSH2 0x5522 JUMPI PUSH1 0x4 DUP6 PUSH2 0x5407 PUSH2 0x4C15 JUMP JUMPDEST SWAP5 JUMPDEST DUP7 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x5DC96D1600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4BC5 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5505 JUMPI JUMPDEST POP ISZERO PUSH2 0x5473 JUMPI POP POP POP POP POP PUSH1 0x0 EQ PUSH2 0x545F JUMPI POP PUSH2 0x4483 SWAP1 PUSH2 0x490F JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x546A JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x4483 SWAP1 PUSH2 0x4F23 JUMP JUMPDEST PUSH2 0x54DA SWAP7 POP DUP4 SWAP6 POP DUP2 PUSH1 0x0 SWAP2 DUP7 SWAP10 SWAP6 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP4 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP4 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x4B29 JUMPI POP PUSH2 0x54EF JUMPI POP POP JUMP JUMPDEST DUP2 PUSH2 0x5467 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST PUSH2 0x551C SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x5443 JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH2 0x552D PUSH2 0x5055 JUMP JUMPDEST SWAP5 PUSH2 0x5409 JUMP JUMPDEST PUSH1 0x0 SWAP6 POP DUP6 SWAP5 SWAP8 SWAP2 SWAP1 DUP6 SWAP5 SWAP8 POP DUP5 SWAP4 POP AND GAS CALL PUSH2 0x554E PUSH2 0x4740 JUMP JUMPDEST POP ISZERO PUSH2 0x5558 JUMPI POP POP JUMP JUMPDEST PUSH1 0x64 SWAP3 POP MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206661696C65642E00000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP6 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x55CB JUMPI JUMPDEST PUSH2 0x55B2 DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP PUSH2 0x55C4 SWAP1 PUSH2 0x3C54 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x53E0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x55A8 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xFFA273DCFE8B2548C8BFACC405 0xDB 0x2B SGT PUSH5 0xECADECC753 SUB 0xC5 CREATE2 0xC2 0xE8 0xED 0x4C 0x4C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"828:578:8:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;-1:-1:-1;828:578:8;;;;;1236:18:20;1209:8;828:578:8;-1:-1:-1;1283:18:20;828:578:8;;;;;;;;;;;;;;;;;;;;;1345:28:20;828:578:8;;;1345:28:20;828:578:8;;;1407:25:20;828:578:8;;;1407:25:20;828:578:8;;;1463:22:20;828:578:8;;;1463:22:20;828:578:8;1540:10:20;828:578:8;1513:24:20;828:578:8;;;1513:24:20;828:578:8;;;;;;;;;1579:47:20;;1407:25;;828:578:8;;;;1579:47:20;;;;;;;-1:-1:-1;1579:47:20;;;828:578:8;;;;1561:15:20;828:578:8;;;1561:15:20;828:578:8;;;:::i;:::-;576:6:20;;;;;;;;;;;1637:22;576:6;;:::i;:::-;;;;;;828:578:8;576:6:20;;;;;;;828:578:8;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;1637:22;576:6;;828:578:8;;:::i;:::-;576:6:20;;;;;;;;;;;1681:28;576:6;;:::i;:::-;;;;;;;;;;;;;;828:578:8;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;1681:28;576:6;;828:578:8;;:::i;:::-;576:6:20;;;;;;;;;;;1731:29;576:6;;:::i;:::-;;;;;;;;;;;;;;828:578:8;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;1731:29;576:6;;;;;;1345:28;576:6;;1345:28;576:6;-1:-1:-1;576:6:20;;;;;1916;576;-1:-1:-1;576:6:20;828:578:8;;576:6:20;;-1:-1:-1;576:6:20;1996;576;-1:-1:-1;576:6:20;828:578:8;1345:28:20;-1:-1:-1;576:6:20;2074;576;-1:-1:-1;576:6:20;828:578:8;1513:24:20;-1:-1:-1;576:6:20;2153:7;576:6;-1:-1:-1;576:6:20;828:578:8;576:6:20;-1:-1:-1;576:6:20;2233:7;576:6;-1:-1:-1;576:6:20;828:578:8;-1:-1:-1;576:6:20;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;2322:16;576:6;;:::i;:::-;;;;;;;;;;;;;828:578:8;;;576:6:20;;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;;;1513:24;576:6;;;;;2322:16;576:6;;-1:-1:-1;828:578:8;;;;;;;;;576:6:20;;;;-1:-1:-1;576:6:20;;;;;;;;;;;2322:16;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;2322:16;576:6;;;;;;;;;;1513:24;576:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;2322:16;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;828:578:8;;;;;-1:-1:-1;828:578:8;;;-1:-1:-1;828:578:8;576:6:20;;;;-1:-1:-1;576:6:20;;;;;;;;;1731:29;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;828:578:8;576:6:20;;;;;;;;;;;;;;1731:29;576:6;;;;;;;;;;;;;;;;;;;;;;;;828:578:8;576:6:20;;;;;;;;;;;;;;;;;;;;1731:29;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;828:578:8;;;;;-1:-1:-1;828:578:8;;;-1:-1:-1;828:578:8;576:6:20;;;;-1:-1:-1;576:6:20;;;;;;;;;1681:28;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;828:578:8;576:6:20;;;;;;;;;;;;;;1681:28;576:6;;;;;;;;;;;;;;;;;;;;;;;;828:578:8;576:6:20;;;;;;;;;;;;;;;;;;;;1681:28;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;1637:22;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;828:578:8;576:6:20;;;;;;;;;;;;;;1637:22;576:6;;;;;;;;;;;;;;;;;;;;;;;;828:578:8;576:6:20;;;;;;;;;;;;;;;;;;;;1637:22;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1579:47;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;;;;:::i;:::-;1579:47:20;;;828:578:8;;;1579:47:20;;;;;;828:578:8;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;828:578:8;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;-1:-1:-1;;;;;828:578:8;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;828:578:8;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;828:578:8;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;:::o;576:6:20:-;;;;;;;;;;;;;;;;;;;:::o;:::-;828:578:8;;;576:6:20;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":15863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_address_payable_fromMemory":{"entryPoint":15444,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":13849,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":13478,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":15378,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytest_addresst_bytes32":{"entryPoint":13657,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_bytest_bytest_addresst_bytes32":{"entryPoint":13549,"id":null,"parameterSlots":1,"returnSlots":4},"abi_encode_address_address":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes":{"entryPoint":13168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes32_uint256_enum_Tokens":{"entryPoint":17509,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_bytes_storage":{"entryPoint":12985,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_storage_47128":{"entryPoint":12820,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_enum_PostStatus":{"entryPoint":13120,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_Tokens":{"entryPoint":12527,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_Tokens_bytes32_uint256_uint256":{"entryPoint":16349,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_struct_Post":{"entryPoint":13740,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_PostData":{"entryPoint":13205,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_Post_storage":{"entryPoint":14539,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":13450,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":16235,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":16203,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":16222,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":14087,"id":null,"parameterSlots":2,"returnSlots":0},"clean_up_bytearray_end_slots_bytes_storage_47134":{"entryPoint":13974,"id":null,"parameterSlots":2,"returnSlots":0},"clean_up_bytearray_end_slots_bytes_storage_47156":{"entryPoint":14200,"id":null,"parameterSlots":2,"returnSlots":0},"clean_up_bytearray_end_slots_bytes_storage_47157":{"entryPoint":14313,"id":null,"parameterSlots":2,"returnSlots":0},"clean_up_bytearray_end_slots_bytes_storage_47160":{"entryPoint":14426,"id":null,"parameterSlots":2,"returnSlots":0},"copy_literal_to_memory_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4":{"entryPoint":15321,"id":null,"parameterSlots":0,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":13133,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":12737,"id":null,"parameterSlots":1,"returnSlots":1},"extract_returndata":{"entryPoint":18240,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":12680,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_47120":{"entryPoint":12540,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_47121":{"entryPoint":12568,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_47122":{"entryPoint":12596,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_47123":{"entryPoint":12624,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_47154":{"entryPoint":12652,"id":null,"parameterSlots":1,"returnSlots":0},"fun_addStake":{"entryPoint":17541,"id":4848,"parameterSlots":4,"returnSlots":1},"fun_burn":{"entryPoint":20259,"id":3010,"parameterSlots":1,"returnSlots":0},"fun_burnDai":{"entryPoint":18703,"id":2873,"parameterSlots":1,"returnSlots":0},"fun_burnStake":{"entryPoint":18288,"id":5045,"parameterSlots":3,"returnSlots":1},"fun_burn_inner":{"entryPoint":21377,"id":null,"parameterSlots":3,"returnSlots":0},"fun_commonTakeStake":{"entryPoint":21096,"id":5484,"parameterSlots":3,"returnSlots":1},"fun_decreaseDeposit":{"entryPoint":16509,"id":3881,"parameterSlots":3,"returnSlots":1},"fun_getDeposit":{"entryPoint":16165,"id":3931,"parameterSlots":2,"returnSlots":1},"fun_getHashedVaultId":{"entryPoint":16844,"id":4446,"parameterSlots":3,"returnSlots":1},"fun_getMessage":{"entryPoint":17064,"id":4552,"parameterSlots":1,"returnSlots":1},"fun_getTokenAddress":{"entryPoint":21331,"id":5778,"parameterSlots":1,"returnSlots":1},"fun_getTokenAddress_2887":{"entryPoint":19477,"id":2887,"parameterSlots":0,"returnSlots":1},"fun_getTokenAddress_3052":{"entryPoint":20565,"id":3052,"parameterSlots":0,"returnSlots":1},"fun_getTokenIdAddress":{"entryPoint":15907,"id":3687,"parameterSlots":0,"returnSlots":1},"fun_increaseDeposit":{"entryPoint":16384,"id":3823,"parameterSlots":3,"returnSlots":1},"fun_isSellerOrBuyer":{"entryPoint":16777,"id":4311,"parameterSlots":1,"returnSlots":1},"fun_onlyVault":{"entryPoint":16248,"id":3304,"parameterSlots":0,"returnSlots":0},"fun_swapTokensForToken":{"entryPoint":19568,"id":2981,"parameterSlots":4,"returnSlots":1},"fun_takeStake":{"entryPoint":20656,"id":4929,"parameterSlots":4,"returnSlots":1},"fun_verifyNonce":{"entryPoint":15477,"id":3575,"parameterSlots":3,"returnSlots":4},"require_helper_stringliteral":{"entryPoint":16702,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_0e19":{"entryPoint":13873,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_5da6":{"entryPoint":17434,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_8bf8":{"entryPoint":21256,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_c2a5":{"entryPoint":15246,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_e7ad":{"entryPoint":13774,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_enum_PostStatus_to_enum_PostStatus":{"entryPoint":13948,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_enum_PostType":{"entryPoint":12715,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_enum_Tokens":{"entryPoint":12725,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x10A38F5 EQ PUSH2 0x30D0 JUMPI POP DUP1 PUSH4 0x5C1F502 EQ PUSH2 0x2DBE JUMPI DUP1 PUSH4 0x917E776 EQ PUSH2 0x2D5D JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x2D3F JUMPI DUP1 PUSH4 0x1B9F0A43 EQ PUSH2 0x2D13 JUMPI DUP1 PUSH4 0x200F852C EQ PUSH2 0x2830 JUMPI DUP1 PUSH4 0x30A0680C EQ PUSH2 0x25F3 JUMPI DUP1 PUSH4 0x3258D15C EQ PUSH2 0x24D5 JUMPI DUP1 PUSH4 0x3A4FB8B7 EQ PUSH2 0x1E44 JUMPI DUP1 PUSH4 0x402E3E0B EQ PUSH2 0x14DB JUMPI DUP1 PUSH4 0x4828000C EQ PUSH2 0x1435 JUMPI DUP1 PUSH4 0x4C38D877 EQ PUSH2 0x1409 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x13E1 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x1313 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0x12DA JUMPI DUP1 PUSH4 0x5C63ED69 EQ PUSH2 0x12A2 JUMPI DUP1 PUSH4 0x83DD1743 EQ PUSH2 0xFBA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF9C JUMPI DUP1 PUSH4 0x8F287DC2 EQ PUSH2 0x96A JUMPI DUP1 PUSH4 0x9D8CC89A EQ PUSH2 0x938 JUMPI DUP1 PUSH4 0x9F8B4359 EQ PUSH2 0x8E3 JUMPI DUP1 PUSH4 0xB43F4F75 EQ PUSH2 0x432 JUMPI DUP1 PUSH4 0xB52D2CE4 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0xDE5D7165 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xE02CFA4C EQ PUSH2 0x176 JUMPI PUSH4 0xFAEB5E17 EQ PUSH2 0x153 JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH2 0x189 CALLDATASIZE PUSH2 0x3559 JUMP JUMPDEST SWAP2 PUSH2 0x41CC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0xA0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1D7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP2 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP5 SUB PUSH2 0x171 JUMPI PUSH2 0x201 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x21F PUSH2 0x229 SWAP3 DUP5 EQ PUSH2 0x3B8E JUMP JUMPDEST DUP5 PUSH1 0x84 CALLDATALOAD SWAP2 PUSH2 0x5268 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x290 JUMPI PUSH1 0x20 SWAP4 DUP4 PUSH2 0x258 SWAP4 PUSH2 0x50B0 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x270 DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 SUB PUSH2 0x287 JUMPI DUP1 PUSH1 0x8 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 PUSH1 0x7 SSTORE PUSH2 0x18F JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F454E4F5547485F5354414B4500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x356 SWAP1 DUP4 EQ PUSH2 0x3B8E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH2 0x36E DUP4 PUSH2 0x367 DUP2 PUSH2 0x32B9 JUMP JUMPDEST SUB DUP5 PUSH2 0x3188 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 SWAP5 ADD KECCAK256 DUP3 EQ DUP1 ISZERO PUSH2 0x414 JUMPI JUMPDEST ISZERO PUSH2 0x3D0 JUMPI PUSH2 0x258 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x398 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP6 ADD KECCAK256 DUP4 SUB PUSH2 0x3C7 JUMPI CALLVALUE SWAP1 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND SWAP2 PUSH2 0x4485 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5641554C5449445F4D49534D4154434800000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x425 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP3 EQ PUSH2 0x37F JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x440 CALLDATASIZE PUSH2 0x34ED JUMP JUMPDEST SWAP3 PUSH2 0x449 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0x2 SWAP4 PUSH1 0xFF DUP6 SLOAD AND SWAP3 PUSH1 0x8 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP1 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x8D0 JUMPI JUMPDEST ISZERO PUSH2 0x88C JUMPI SWAP1 PUSH2 0x484 SWAP3 SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x24 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x16 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x38AAD32C00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP9 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x853 JUMPI JUMPDEST POP ISZERO PUSH2 0x80F JUMPI PUSH2 0x4FF PUSH1 0x1 SWAP4 DUP5 SLOAD EQ PUSH2 0x441A JUMP JUMPDEST PUSH1 0x0 MSTORE DUP3 DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0xFF NOT SWAP3 DUP4 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x3 SWAP4 DUP5 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE DUP5 DUP5 DUP8 SLOAD AND OR DUP7 SSTORE DUP3 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP2 GT PUSH2 0x758 JUMPI DUP1 PUSH1 0xC SWAP3 PUSH2 0x55C DUP3 PUSH2 0x557 DUP7 SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x37E9 JUMP JUMPDEST DUP5 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x792 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x787 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SWAP3 DUP10 SHL SHR NOT AND OR DUP2 SSTORE JUMPDEST PUSH2 0x58D DUP2 SLOAD PUSH2 0x31C1 JUMP JUMPDEST SWAP4 DUP5 GT PUSH2 0x758 JUMPI PUSH2 0x59F PUSH1 0x1B SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x6F1 JUMPI JUMPDEST POP PUSH1 0x0 SWAP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0x62B JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x61E JUMPI JUMPDEST POP POP PUSH1 0x0 NOT SWAP2 SWAP3 SHL SWAP3 DUP6 SHL SHR NOT AND OR PUSH1 0x1B SSTORE JUMPDEST DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x5E8 PUSH1 0x5 SLOAD TIMESTAMP PUSH2 0x3F6B JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH32 0x130BB2FE638478AB244A90FC4550E3D9F3401C2BD639012D7CB8D0CBE95266EF PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST ADD SLOAD SWAP2 POP PUSH1 0x0 NOT DUP9 PUSH2 0x5C3 JUMP JUMPDEST SWAP2 SWAP1 POP DUP4 PUSH1 0x1F NOT DUP2 SWAP5 SWAP6 AND PUSH1 0x1B PUSH1 0x0 MSTORE PUSH32 0x3AD8AA4F87544323A9D1E5DD902F40C356527A7955687113DB5F9A85AD579DC1 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP8 DUP4 DUP4 LT PUSH2 0x6B7 JUMPI POP POP POP LT PUSH2 0x67F JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x1B SSTORE PUSH2 0x5D6 JUMP JUMPDEST PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 ADD SLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP9 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 PUSH2 0x672 JUMP JUMPDEST PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 DUP7 ADD SLOAD DUP8 SSTORE SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 DUP7 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x661 JUMP JUMPDEST PUSH1 0x1B PUSH1 0x0 MSTORE PUSH32 0x3AD8AA4F87544323A9D1E5DD902F40C356527A7955687113DB5F9A85AD579DC1 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP5 DUP8 LT PUSH2 0x74E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP5 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x742 JUMPI POP POP PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH2 0x734 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x729 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP10 DUP1 PUSH2 0x571 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP8 SWAP5 AND SWAP2 DUP6 PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP3 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x7F9 JUMPI POP POP DUP5 GT PUSH2 0x7E1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP2 SSTORE PUSH2 0x583 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP13 SHL AND SHR NOT AND SWAP1 SSTORE DUP10 DUP1 DUP1 PUSH2 0x7D4 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x7C3 JUMP JUMPDEST PUSH1 0x64 DUP5 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x873 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x879 JUMPI JUMPDEST PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3619 JUMP JUMPDEST DUP7 PUSH2 0x4EB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x861 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP7 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57524F4E475F5354415455530000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP7 DUP6 EQ DUP1 PUSH2 0x474 JUMPI POP PUSH1 0x3 DUP6 EQ PUSH2 0x474 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x934 PUSH2 0x920 PUSH2 0x900 PUSH2 0x8FA CALLDATASIZE PUSH2 0x3559 JUMP JUMPDEST SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x91B PUSH2 0x916 DUP3 PUSH2 0x4189 JUMP JUMPDEST PUSH2 0x413E JUMP JUMPDEST PUSH2 0x42A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH2 0x957 PUSH2 0x916 PUSH1 0x4 CALLDATALOAD PUSH2 0x4189 JUMP JUMPDEST PUSH2 0x934 PUSH1 0x40 MLOAD PUSH2 0x920 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO SWAP1 DUP2 ISZERO DUP2 SUB PUSH2 0x171 JUMPI PUSH1 0x24 SWAP2 DUP3 CALLDATALOAD PUSH2 0x996 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SWAP4 DUP2 DUP6 SLOAD AND SWAP4 PUSH1 0x8 SWAP5 DUP6 DUP2 LT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x3 SUB PUSH2 0xF2A JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0x9CA DUP6 PUSH2 0x9C3 DUP2 PUSH2 0x32B9 JUMP JUMPDEST SUB DUP7 PUSH2 0x3188 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 SWAP6 DUP7 ADD KECCAK256 PUSH1 0x44 CALLDATALOAD SWAP1 SUB PUSH2 0xEE7 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 DUP7 DUP3 PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x18DA001100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xEB2 JUMPI JUMPDEST POP AND DUP7 SLOAD SWAP2 PUSH1 0x40 MLOAD PUSH32 0x808FC20600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP8 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xE83 JUMPI JUMPDEST POP PUSH2 0x2710 PUSH2 0xA86 PUSH2 0xA8E SWAP3 DUP7 PUSH2 0x3F4B JUMP JUMPDEST DIV DUP1 SWAP5 PUSH2 0x3F5E JUMP JUMPDEST SWAP4 PUSH1 0x4 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 0xE7C JUMPI JUMPDEST ISZERO PUSH2 0xC84 JUMPI POP POP PUSH2 0xAED PUSH2 0xACB DUP7 PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xABD DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP11 SLOAD SWAP2 PUSH2 0x407D JUMP JUMPDEST SWAP4 DUP7 PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xAE1 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x4000 JUMP JUMPDEST SWAP2 DUP6 PUSH1 0x6 SLOAD AND SWAP2 PUSH1 0x3 DUP4 LT ISZERO DUP1 PUSH2 0xC56 JUMPI PUSH1 0x1 DUP5 EQ SWAP1 DUP2 ISZERO PUSH2 0xC4A JUMPI JUMPDEST DUP2 ISZERO PUSH2 0xC0C JUMPI JUMPDEST POP SWAP3 PUSH2 0xB1F PUSH2 0xB24 SWAP5 PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0x5381 JUMP JUMPDEST PUSH1 0x7 SSTORE DUP5 SSTORE ISZERO PUSH2 0xC03 JUMPI DUP1 PUSH1 0x4 SWAP5 JUMPDEST SLOAD AND DUP4 DUP2 LT ISZERO PUSH2 0xBD5 JUMPI PUSH1 0x0 MSTORE DUP2 DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0xFF NOT SWAP4 DUP5 DUP2 SLOAD AND SWAP1 SSTORE DUP5 LT ISZERO PUSH2 0xBA7 JUMPI PUSH2 0xB79 SWAP5 POP DUP4 AND PUSH1 0x0 MSTORE DUP1 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x367C JUMP JUMPDEST PUSH32 0x130BB2FE638478AB244A90FC4550E3D9F3401C2BD639012D7CB8D0CBE95266EF PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST DUP5 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP6 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0x5 SWAP5 PUSH2 0xB33 JUMP JUMPDEST SWAP1 POP PUSH2 0xC1C JUMPI DUP3 ISZERO PUSH2 0xB1F PUSH2 0xB11 JUMP JUMPDEST DUP11 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP POP DUP3 DUP11 EQ PUSH1 0x0 PUSH2 0xB0A JUMP JUMPDEST DUP12 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST SWAP3 POP SWAP7 SWAP4 POP SWAP4 SWAP8 SWAP2 POP PUSH2 0xC93 JUMPI STOP JUMPDEST PUSH1 0x7 SLOAD DUP6 GT PUSH2 0xE39 JUMPI PUSH1 0x14 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 LT ISZERO PUSH2 0xDF6 JUMPI PUSH2 0xCBB SWAP1 DUP8 PUSH2 0x3F4B JUMP JUMPDEST DIV SWAP3 PUSH2 0xCC7 DUP7 DUP6 PUSH2 0x3F6B JUMP JUMPDEST SWAP2 DUP9 PUSH1 0x6 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO SWAP1 DUP2 PUSH2 0xDBC JUMPI PUSH1 0x1 DUP4 EQ SWAP2 DUP3 ISZERO PUSH2 0xDE9 JUMPI JUMPDEST DUP3 ISZERO PUSH2 0xDAA JUMPI JUMPDEST POP POP DUP8 SWAP4 PUSH1 0x5 SWAP10 SWAP11 SWAP4 PUSH2 0xD4D SWAP7 SWAP4 PUSH2 0xB1F PUSH2 0xD06 SWAP5 PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0xD2B DUP6 DUP4 PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xD1F DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP10 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x4770 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0xD41 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x4770 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0xFF NOT SWAP3 DUP5 DUP5 DUP8 SLOAD AND OR DUP7 SSTORE PUSH1 0x9 SSTORE PUSH1 0xA SSTORE DUP3 PUSH1 0x0 MSTORE DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x1C9EE42116032EBAC99A31AE475140077588D76949471DFB40A21A14AD523B2D PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0xDBC JUMPI POP DUP1 ISZERO DUP4 PUSH1 0x5 PUSH2 0xCEC JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP DUP3 DUP11 EQ SWAP2 POP PUSH1 0x0 PUSH2 0xCE5 JUMP JUMPDEST PUSH1 0x64 DUP7 PUSH1 0x15 DUP6 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x50554E4953484D454E545F524154494F5F484947480000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 PUSH1 0x13 PUSH1 0x64 SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x50554E4953484D454E545F544F4F5F4849474800000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP6 PUSH2 0xA9B JUMP JUMPDEST SWAP1 POP DUP8 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xEAB JUMPI JUMPDEST PUSH2 0xE9A DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x171 JUMPI MLOAD PUSH2 0x2710 PUSH2 0xA75 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE90 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xEE0 JUMPI JUMPDEST PUSH2 0xEC9 DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x171 JUMPI PUSH2 0xEDA SWAP1 PUSH2 0x3C54 JUMP JUMPDEST DUP11 PUSH2 0xA33 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEBF JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0x11 DUP11 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5641554C5449445F4E4F545F4D41544348000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP8 PUSH1 0xD PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x4E4F545F5355424D495454454400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP8 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x171 JUMPI PUSH2 0xFEC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0xFF8 PUSH2 0x3F78 JUMP JUMPDEST PUSH2 0x1004 PUSH2 0x916 DUP3 PUSH2 0x4189 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x101C DUP3 PUSH2 0x1015 DUP2 PUSH2 0x3214 JUMP JUMPDEST SUB DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 SUB PUSH2 0x1164 JUMPI DUP3 MLOAD SWAP2 DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x103D PUSH1 0x1C SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1100 JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x107F JUMPI POP DUP2 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1074 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1C SSTORE STOP JUMPDEST ADD MLOAD SWAP1 POP DUP3 DUP1 PUSH2 0x105E JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP4 PUSH1 0x1C PUSH1 0x0 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP7 DUP3 LT PUSH2 0x10E8 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 LT PUSH2 0x10CF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1C SSTORE STOP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 PUSH2 0x10C4 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x1C PUSH1 0x0 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP4 DUP6 LT PUSH2 0x115A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x114E JUMPI POP PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1138 JUMP JUMPDEST DUP3 MLOAD SWAP2 DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x1178 PUSH1 0x1D SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x123E JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x11BD JUMPI POP DUP2 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x11B2 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1D SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP DUP3 DUP1 PUSH2 0x1199 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP4 PUSH1 0x1D PUSH1 0x0 MSTORE PUSH32 0x6D4407E7BE21F808E6509AA9FA9143369579DD7D760FE20A2C09680FC146134F SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP7 DUP3 LT PUSH2 0x1226 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 LT PUSH2 0x120D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1D SSTORE STOP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 PUSH2 0x1202 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1D PUSH1 0x0 MSTORE PUSH32 0x6D4407E7BE21F808E6509AA9FA9143369579DD7D760FE20A2C09680FC146134F PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP4 DUP6 LT PUSH2 0x1298 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x128C JUMPI POP PUSH2 0x1181 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x127F JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1276 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0x12CE DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x3F25 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x12F5 PUSH2 0x3E23 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x1E SLOAD PUSH2 0x1335 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x13BA JUMPI POP PUSH1 0x1 EQ PUSH2 0x135F JUMPI JUMPDEST PUSH2 0x934 DUP5 PUSH2 0x920 DUP2 DUP7 SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST PUSH1 0x1E PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH32 0x50BB669A95C7B50B7E8A6F09454034B2B14CF2B85C730DCA9A539CA82CB6E350 JUMPDEST DUP3 DUP5 LT PUSH2 0x13A2 JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x920 DUP3 PUSH2 0x134F JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x138A JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x920 SWAP2 POP DUP4 SWAP1 POP PUSH2 0x134F JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH2 0x1407 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x3340 JUMP JUMPDEST RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD PUSH2 0x12CE DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x80 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1472 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x171 JUMPI PUSH2 0x149B PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND SWAP3 PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x14C9 PUSH2 0x258 SWAP3 PUSH2 0x14BF PUSH1 0x20 SWAP7 DUP5 EQ PUSH2 0x3B8E JUMP JUMPDEST DUP5 PUSH1 0x64 CALLDATALOAD SWAP2 PUSH2 0x5268 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x14D5 DUP2 DUP5 PUSH2 0x3F25 JUMP JUMPDEST SWAP3 PUSH2 0x50B0 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1508 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x24 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x5 PUSH1 0x44 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x3 PUSH1 0xA4 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0xC4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x1549 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xE4 CALLDATALOAD AND PUSH1 0xE4 CALLDATALOAD SUB PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1576 DUP2 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1582 DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP2 MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1597 DUP4 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A3 DUP2 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE DUP4 MSTORE PUSH1 0x40 MLOAD PUSH2 0x15D7 DUP2 PUSH2 0x3150 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP5 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x15FF DUP2 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x60 DUP4 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE ADD MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0xA4 CALLDATALOAD EQ SWAP1 DUP2 ISZERO PUSH2 0x1E35 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1E23 JUMPI JUMPDEST POP SWAP1 PUSH2 0x163C PUSH2 0x164A SWAP3 PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0x104 CALLDATALOAD SWAP1 PUSH1 0xE4 CALLDATALOAD SWAP1 PUSH2 0x3C75 JUMP JUMPDEST POP SWAP1 DUP3 SWAP4 SWAP3 MLOAD PUSH1 0x20 DUP6 ADD KECCAK256 SWAP3 PUSH1 0x0 SLOAD DUP5 SUB PUSH2 0x1DDF JUMPI PUSH1 0x24 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x16 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x38AAD32C00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP10 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1DC0 JUMPI JUMPDEST POP ISZERO PUSH2 0x1D7C JUMPI PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH2 0x16EA PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x35CE JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x16FD PUSH1 0x44 CALLDATALOAD PUSH2 0x31AB JUMP JUMPDEST PUSH1 0xFF PUSH1 0x44 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 PUSH2 0x173A PUSH1 0x84 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND DUP8 PUSH1 0xA4 CALLDATALOAD PUSH2 0x4485 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP6 PUSH2 0x178C DUP8 PUSH2 0x30FC JUMP JUMPDEST DUP7 MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH2 0x179B DUP5 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x1 DUP5 MSTORE PUSH2 0x17AA PUSH1 0x24 CALLDATALOAD PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP6 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x17D3 PUSH1 0xA4 CALLDATALOAD PUSH1 0xA0 DUP6 ADD PUSH2 0x31B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x17E0 DUP3 PUSH2 0x3150 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1800 PUSH2 0x3BD9 JUMP JUMPDEST PUSH2 0x1808 PUSH2 0x3BD9 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1816 DUP6 PUSH2 0x3118 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH2 0x182F DUP5 PUSH2 0x3118 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1848 DUP6 PUSH2 0x316C JUMP JUMPDEST DUP1 DUP6 MSTORE DUP2 PUSH1 0x20 DUP7 ADD MSTORE MLOAD PUSH1 0x1 SSTORE DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x186E PUSH1 0xA0 SWAP3 PUSH2 0x367C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x187C DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH2 0x1885 DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0xFF00 PUSH1 0x2 SLOAD SWAP3 PUSH1 0x8 SHL AND SWAP2 AND OR PUSH1 0x2 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x3 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x5 SSTORE ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x40 SWAP2 PUSH1 0xFF PUSH1 0xFF NOT PUSH1 0x6 SLOAD AND SWAP2 AND OR PUSH1 0x6 SSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MLOAD DUP1 MLOAD PUSH1 0x7 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x8 SSTORE DUP4 DUP2 ADD MLOAD PUSH1 0x9 SSTORE ADD MLOAD PUSH1 0xA SSTORE ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x1939 DUP3 PUSH2 0x1934 PUSH1 0xB SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x3778 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1CB3 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1CA8 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xB SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x198A DUP3 PUSH2 0x557 PUSH1 0xC SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1C1D JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x1C12 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xC SSTORE JUMPDEST ADD MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x19E5 DUP3 PUSH2 0x19E0 PUSH1 0xD SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x3707 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1B8D JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1B82 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xD SSTORE JUMPDEST PUSH1 0x15 SLOAD SWAP4 PUSH1 0x0 NOT SWAP5 DUP6 DUP2 EQ PUSH2 0x1B53 JUMPI PUSH1 0x1 ADD PUSH1 0x15 SSTORE DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x1A4B DUP3 PUSH2 0x1A46 PUSH1 0xE SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x385A JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1AC9 JUMPI SWAP6 DUP3 SWAP2 PUSH2 0x934 SWAP8 PUSH1 0x0 SWAP4 PUSH2 0x1ABE JUMPI JUMPDEST POP POP DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xE SSTORE JUMPDEST PUSH1 0xF SSTORE PUSH1 0x10 SSTORE PUSH32 0x5C0140B1F9412009D09B44A8920B411DE7A75EBE8C087005130524935E0E457F PUSH1 0x40 MLOAD DUP1 PUSH2 0x1AAF DUP5 DUP3 PUSH2 0x35AC JUMP JUMPDEST SUB SWAP1 LOG1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x35AC JUMP JUMPDEST ADD MLOAD SWAP2 POP DUP8 DUP1 PUSH2 0x1A68 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH1 0xE PUSH1 0x0 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1B3B JUMPI POP SWAP2 PUSH2 0x934 SWAP9 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP6 SWAP5 LT PUSH2 0x1B23 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD PUSH1 0xE SSTORE PUSH2 0x1A7A JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 DUP1 PUSH2 0x1B14 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1AFA JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0x19FB JUMP JUMPDEST SWAP2 PUSH1 0x1F NOT AND SWAP2 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1BFA JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x1BE1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xD SSTORE PUSH2 0x1A10 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0x1BD3 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1BBD JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x19A6 JUMP JUMPDEST SWAP1 PUSH1 0xC PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x1C90 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 DUP4 PUSH1 0x1F NOT PUSH1 0x40 SWAP9 SWAP8 AND LT PUSH2 0x1C77 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xC SSTORE PUSH2 0x19BB JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x1C69 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x1C48 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x194F JUMP JUMPDEST SWAP2 PUSH1 0x1F NOT AND SWAP2 PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1D20 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x1D07 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xB SSTORE PUSH2 0x1964 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x1CF9 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1CE3 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5354414B455F414D4F554E545F5A45524F000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555345525F4E4F545F4558495354000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x1DD9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP7 PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F4F574E45520000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x2D4 JUMPI PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0x163C PUSH2 0x162E JUMP JUMPDEST POP POP PUSH1 0xA4 CALLDATALOAD PUSH1 0x2 EQ PUSH1 0x0 PUSH2 0x1627 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x1E52 CALLDATASIZE PUSH2 0x3559 JUMP JUMPDEST PUSH2 0x1E5A PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x1EB6 SWAP3 PUSH2 0x1E91 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP1 MSTORE PUSH2 0x1E8C PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x35CE JUMP JUMPDEST PUSH2 0x3C75 JUMP JUMPDEST POP POP POP DUP3 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x1EAA DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 EQ PUSH2 0x441A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1EC3 DUP3 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1ED4 DUP3 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH1 0x0 DUP2 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1F07 DUP5 PUSH2 0x3150 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE PUSH1 0x0 DUP3 DUP6 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1F2C DUP3 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F38 DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP3 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1F4A DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP4 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x1F5E DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1F74 DUP6 PUSH2 0x3118 JUMP JUMPDEST DUP5 MSTORE DUP3 DUP5 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 DUP3 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1F91 DUP2 PUSH2 0x316C JUMP JUMPDEST DUP4 DUP2 MSTORE ADD MSTORE MLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 SSTORE MLOAD SWAP4 DUP5 MLOAD PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x1FB3 SWAP1 PUSH2 0x367C JUMP JUMPDEST DUP3 DUP6 ADD MLOAD PUSH2 0x1FC0 DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH2 0x1FC9 DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH2 0xFF00 PUSH1 0x2 SLOAD SWAP3 PUSH1 0x8 SHL AND SWAP2 AND OR PUSH1 0x2 SSTORE PUSH1 0xA0 PUSH1 0x40 DUP7 ADD MLOAD SWAP6 PUSH1 0x3 SWAP7 DUP8 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x4 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x5 SSTORE ADD MLOAD SWAP1 DUP6 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x60 SWAP2 PUSH1 0xFF PUSH1 0xFF NOT PUSH1 0x6 SLOAD AND SWAP2 AND OR PUSH1 0x6 SSTORE MLOAD DUP1 MLOAD PUSH1 0x7 SSTORE DUP4 DUP2 ADD MLOAD PUSH1 0x8 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x9 SSTORE ADD MLOAD PUSH1 0xA SSTORE MLOAD SWAP1 DUP2 MLOAD SWAP2 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x2078 DUP3 PUSH2 0x1934 PUSH1 0xB SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP5 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2456 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x244B JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP8 SHL SWAP3 DUP9 SHL SHR NOT AND OR PUSH1 0xB SSTORE JUMPDEST DUP2 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 DUP5 DUP3 GT PUSH2 0x758 JUMPI PUSH2 0x20BD DUP3 PUSH2 0x557 PUSH1 0xC SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x23C6 JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x23BB JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP9 SHL SWAP3 DUP10 SHL SHR NOT AND OR PUSH1 0xC SSTORE JUMPDEST ADD MLOAD DUP1 MLOAD SWAP1 DUP4 DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x2108 DUP3 PUSH2 0x19E0 PUSH1 0xD SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x233C JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2331 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SWAP3 DUP8 SHL SHR NOT AND OR PUSH1 0xD SSTORE JUMPDEST PUSH2 0x2138 PUSH2 0x3BD9 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP4 DUP3 GT PUSH2 0x758 JUMPI DUP2 SWAP1 PUSH2 0x2158 DUP3 PUSH2 0x2153 PUSH1 0x11 SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH2 0x3696 JUMP JUMPDEST DUP4 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x22B2 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x22A7 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SWAP3 DUP8 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH1 0x0 PUSH1 0x12 SSTORE PUSH1 0x0 PUSH1 0x13 SSTORE PUSH2 0x2192 PUSH2 0x3BD9 JUMP JUMPDEST DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x758 JUMPI PUSH2 0x21AA DUP4 PUSH2 0x1A46 PUSH1 0xE SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x221A JUMPI POP SWAP1 DUP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x220D JUMPI JUMPDEST POP POP DUP1 PUSH1 0x0 NOT SWAP3 SWAP4 SHL SWAP4 SHL SHR NOT AND OR PUSH1 0xE SSTORE JUMPDEST PUSH1 0x0 PUSH1 0xF SSTORE PUSH1 0x0 PUSH1 0x10 SSTORE PUSH32 0x496685ED89450883D7FF0E8E3B71EB9DCA092E7B9742B53ED4611B7522443E5E PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST ADD MLOAD SWAP2 POP DUP1 PUSH1 0x0 NOT PUSH2 0x21C2 JUMP JUMPDEST SWAP3 SWAP4 SWAP5 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND PUSH1 0xE PUSH1 0x0 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH2 0x228D JUMPI POP POP POP DUP2 GT PUSH2 0x2272 JUMPI JUMPDEST POP POP POP POP POP DUP2 SHL ADD PUSH1 0xE SSTORE PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x0 NOT SWAP3 PUSH1 0xF8 SWAP3 ADD MLOAD SWAP4 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 DUP1 DUP5 PUSH2 0x2262 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x2250 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0x216D JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP8 SWAP5 AND SWAP2 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP3 PUSH1 0x0 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x231B JUMPI POP POP DUP5 GT PUSH2 0x2303 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x2180 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP11 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0x22F5 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x22E4 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0x211D JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP8 SWAP5 AND SWAP2 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP3 PUSH1 0x0 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x23A5 JUMPI POP POP DUP5 GT PUSH2 0x238D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xD SSTORE PUSH2 0x2130 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP11 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0x237F JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x236E JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x20D8 JUMP JUMPDEST SWAP3 SWAP2 DUP7 SWAP2 PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0xC PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP2 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x2435 JUMPI POP POP SWAP6 DUP4 PUSH1 0x40 SWAP8 LT PUSH2 0x241D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xC SSTORE PUSH2 0x20EB JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP13 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x240F JUMP JUMPDEST DUP4 DUP10 ADD MLOAD DUP6 SSTORE DUP12 SWAP7 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x23FA JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x208D JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP9 SWAP5 AND SWAP2 PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP3 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x24BF JUMPI POP POP DUP5 GT PUSH2 0x24A7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xB SSTORE PUSH2 0x20A0 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 DUP12 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x2499 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP12 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x2488 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x13 SLOAD PUSH1 0x4 CALLDATALOAD SWAP2 DUP2 ISZERO PUSH2 0x25AF JUMPI PUSH1 0x10 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x256B JUMPI PUSH2 0x2529 PUSH1 0x40 SWAP5 DUP6 MLOAD PUSH2 0x2513 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP5 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x254D JUMPI JUMPDEST POP PUSH2 0x413E JUMP JUMPDEST DUP4 MLOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP3 AND DUP5 MSTORE AND SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP DUP6 MLOAD PUSH2 0x255E DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP5 DUP2 MLOAD SWAP2 ADD KECCAK256 EQ DUP7 PUSH2 0x2523 JUMP JUMPDEST PUSH1 0x64 DUP3 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F5F54454C454752414D5F49445F464F525F53454C4C455200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F5F54454C454752414D5F49445F464F525F42555945520000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH2 0x2601 CALLDATASIZE PUSH2 0x34ED JUMP JUMPDEST SWAP1 PUSH2 0x260D SWAP4 SWAP3 SWAP4 PUSH2 0x3F78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND SWAP2 PUSH1 0x8 DUP4 LT ISZERO SWAP2 DUP3 PUSH2 0x2D4 JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP6 DUP7 DUP1 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x27EB JUMPI JUMPDEST SWAP2 PUSH2 0x2670 SWAP4 SWAP2 PUSH2 0x1E8C PUSH2 0x264A SWAP5 PUSH2 0x35CE JUMP JUMPDEST POP POP POP DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x2663 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP7 DUP2 MLOAD SWAP2 ADD KECCAK256 EQ ISZERO PUSH2 0x3631 JUMP JUMPDEST PUSH2 0x2D4 JUMPI PUSH1 0x4 SUB PUSH2 0x27A7 JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x758 JUMPI PUSH2 0x269C DUP4 PUSH2 0x19E0 PUSH1 0xD SLOAD PUSH2 0x31C1 JUMP JUMPDEST DUP1 SWAP3 PUSH1 0x1F DUP2 GT PUSH1 0x1 EQ PUSH2 0x2726 JUMPI DUP1 SWAP2 SWAP3 SWAP4 PUSH1 0x0 SWAP2 PUSH2 0x271B JUMPI JUMPDEST POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xD SSTORE JUMPDEST PUSH1 0x6 PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x53D57D9D48DDA1C6E6D0FC0B92D00B750B752F21CC973929CE8B4B60B374505E PUSH1 0x40 MLOAD DUP1 PUSH2 0x2704 DUP2 PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x934 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD DUP5 PUSH2 0x26B5 JUMP JUMPDEST PUSH1 0x1F NOT DUP2 AND SWAP4 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT PUSH2 0x2790 JUMPI POP DUP3 PUSH1 0x1 SWAP5 SWAP6 SWAP7 LT PUSH2 0x2777 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0xD SSTORE PUSH2 0x26C9 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 PUSH2 0x276A JUMP JUMPDEST SWAP1 SWAP2 DUP5 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x2756 JUMP JUMPDEST PUSH1 0x64 DUP3 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F46494E414C495A454400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP SWAP3 POP SWAP1 PUSH1 0x0 SWAP3 PUSH1 0x3 DUP6 EQ DUP1 ISZERO PUSH2 0x2822 JUMPI JUMPDEST DUP5 DUP2 ISZERO PUSH2 0x280E JUMPI JUMPDEST POP SWAP2 SWAP3 SWAP2 PUSH2 0x2638 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 SWAP2 PUSH2 0x2D4 JUMPI SWAP1 PUSH1 0x4 DUP6 EQ DUP5 PUSH2 0x2805 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP PUSH1 0x6 DUP6 EQ PUSH2 0x27FD JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x171 JUMPI PUSH2 0x285C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP4 SUB PUSH2 0x171 JUMPI PUSH1 0x3 PUSH1 0x64 CALLDATALOAD LT ISZERO PUSH2 0x171 JUMPI PUSH1 0x84 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH2 0x28A8 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x35CE JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2CE5 JUMPI PUSH2 0x28C4 SWAP1 PUSH1 0x64 CALLDATALOAD EQ PUSH2 0x3B8E JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH2 0x2CDB JUMPI PUSH2 0x28F2 CALLVALUE SWAP4 JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28E1 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP6 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP SWAP5 SWAP2 SWAP6 SWAP1 SWAP4 DUP7 MLOAD PUSH1 0x20 DUP9 ADD KECCAK256 SWAP2 PUSH1 0x64 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x7 SLOAD GT PUSH2 0x2C97 JUMPI DUP5 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x16 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x38AAD32C00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP9 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2C78 JUMPI JUMPDEST POP ISZERO PUSH2 0x2C34 JUMPI PUSH2 0x2994 SWAP1 DUP4 EQ ISZERO PUSH2 0x3631 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2B95 JUMPI LT PUSH2 0x2B51 JUMPI SWAP1 PUSH2 0x29CB SWAP2 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND SWAP1 PUSH1 0x64 CALLDATALOAD PUSH2 0x4485 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND DUP3 OR DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH32 0x2C5F9A2E204D4DB70AD0F9037679E33061B4C51A386497019BEE969E16BE28D7 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x2B24 JUMPI POP PUSH2 0x2A33 DUP2 PUSH2 0x2153 PUSH1 0x11 SLOAD PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x2AA0 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x2A95 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH1 0x12 SSTORE PUSH1 0x13 SSTORE PUSH32 0xF13F251F5172305EB93606C0071B9C48215D3EC6A6698A7FA987C18725488E7F PUSH1 0x40 MLOAD DUP1 PUSH2 0x619 DUP2 PUSH2 0x38CB JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP5 DUP1 PUSH2 0x2A4C JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2B0C JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x2AF3 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x2A61 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x2AD0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x12 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x4E4F545F454E4F5547485F5041594D454E540000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP CALLVALUE ISZERO PUSH2 0x2BF0 JUMPI ISZERO PUSH2 0x2BAC JUMPI SWAP1 PUSH2 0x29CB SWAP2 PUSH2 0x29A9 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH1 0xC PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5A45524F5F5041594D454E540000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP5 PUSH1 0xD PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5A45524F5F4D534756414C554500000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP6 PUSH1 0xF PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x55534552545F4E4F545F45584953540000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x2C91 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP10 PUSH2 0x2982 JUMP JUMPDEST PUSH1 0x64 DUP6 PUSH1 0xF PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x5354414B455F494E434F52524543540000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x28F2 DUP3 SWAP4 PUSH2 0x28D1 JUMP JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x171 JUMPI PUSH2 0x18F PUSH1 0x20 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x3F25 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x20 PUSH2 0x18F PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH2 0x2DB8 PUSH2 0x2D9B PUSH1 0x40 MLOAD PUSH2 0x2D8F DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP4 PUSH2 0x3F25 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD PUSH2 0x2DAC DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP6 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 PUSH2 0x3F25 JUMP JUMPDEST SWAP1 PUSH2 0x3F6B JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH2 0x2DDB DUP2 PUSH2 0x30FC JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP3 MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2DEE DUP4 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2DFB DUP5 PUSH2 0x3134 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0xFF SWAP2 DUP7 MSTORE PUSH1 0x8 SHR AND SWAP4 PUSH2 0x2E1F DUP6 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP6 DUP3 ADD MSTORE PUSH1 0x3 SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x2E50 PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0xA0 DUP4 ADD PUSH2 0x31B5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2E5E DUP2 PUSH2 0x3150 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x8 SLOAD DUP6 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA SLOAD PUSH1 0x60 DUP3 ADD MSTORE DUP5 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x2E8A DUP2 PUSH2 0x3118 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 DUP2 PUSH1 0x0 PUSH1 0xB SLOAD PUSH2 0x2E9D DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 DUP10 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x30B2 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3056 JUMPI JUMPDEST POP PUSH2 0x2EC1 SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD DUP6 DUP2 PUSH1 0x0 PUSH1 0xC SLOAD PUSH2 0x2ED6 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 DUP10 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3038 JUMPI POP PUSH1 0x1 EQ PUSH2 0x2FDC JUMPI JUMPDEST POP PUSH2 0x2EFA SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST DUP6 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP5 DUP7 PUSH1 0xD SLOAD SWAP2 PUSH2 0x2F12 DUP4 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP3 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x2FBB JUMPI POP PUSH1 0x1 EQ PUSH2 0x2F5D JUMPI JUMPDEST POP POP POP PUSH2 0x2F3C DUP2 PUSH2 0x934 SWAP6 SWAP7 SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 SWAP5 MLOAD DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x3395 JUMP JUMPDEST SWAP2 SWAP1 SWAP7 POP PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x2FA8 JUMPI POP POP POP DUP2 ADD SWAP1 SWAP5 ADD SWAP4 PUSH2 0x2F3C DUP7 PUSH2 0x934 PUSH2 0x2F29 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP6 ADD DUP11 ADD MSTORE SWAP3 DUP9 ADD SWAP3 DUP2 ADD PUSH2 0x2F8C JUMP JUMPDEST PUSH1 0xFF NOT AND DUP4 DUP7 ADD MSTORE POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 POP PUSH2 0x2F3C DUP7 PUSH2 0x934 PUSH2 0x2F29 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP DUP9 PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 JUMPDEST DUP3 DUP5 LT PUSH2 0x3021 JUMPI POP POP POP SWAP2 PUSH2 0x2EFA SWAP3 DUP3 ADD ADD DUP9 SWAP3 PUSH2 0x2EED JUMP JUMPDEST DUP1 SLOAD DUP8 DUP6 ADD DUP8 ADD MSTORE DUP7 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP11 SWAP2 ADD PUSH2 0x3008 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP7 ADD MSTORE POP DUP10 SWAP4 SWAP1 ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP PUSH2 0x2EFA PUSH2 0x2EED JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP DUP9 PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 JUMPDEST DUP3 DUP5 LT PUSH2 0x309B JUMPI POP POP POP SWAP2 PUSH2 0x2EC1 SWAP3 DUP3 ADD ADD DUP9 SWAP3 PUSH2 0x2EB4 JUMP JUMPDEST DUP1 SLOAD DUP8 DUP6 ADD DUP8 ADD MSTORE DUP7 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP11 SWAP2 ADD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP7 ADD MSTORE POP DUP10 SWAP4 SWAP1 ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP PUSH2 0x2EC1 PUSH2 0x2EB4 JUMP JUMPDEST CALLVALUE PUSH2 0x171 JUMPI PUSH1 0x0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x171 JUMPI DUP1 PUSH2 0x1407 PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x6 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH1 0x1F NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x2D4 JUMPI JUMP JUMPDEST PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x320A JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x31DB JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x31D0 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x3224 DUP3 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x329B JUMPI POP PUSH1 0x1 EQ PUSH2 0x3242 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0xE PUSH1 0x0 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3283 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP5 SWAP6 POP PUSH1 0xFF NOT SWAP2 POP SWAP3 SWAP2 SWAP3 AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x32C9 DUP3 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x329B JUMPI POP PUSH1 0x1 EQ PUSH2 0x32E7 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3328 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3316 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x2D4 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x3360 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3350 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x338E DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x334D JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x3487 SWAP3 PUSH2 0x33E9 PUSH1 0xA0 DUP3 MLOAD PUSH2 0x33AE DUP7 DUP3 MLOAD PUSH2 0x3340 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x33BC DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x30EF JUMP JUMPDEST PUSH1 0x60 PUSH1 0x20 DUP3 ADD MLOAD DUP1 MLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xE0 DUP7 ADD MSTORE DUP4 DUP2 ADD MLOAD PUSH2 0x100 DUP7 ADD MSTORE ADD MLOAD PUSH2 0x120 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH2 0x3436 PUSH2 0x160 DUP1 PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x60 DUP5 MLOAD SWAP2 DUP5 ADD MSTORE PUSH2 0x1C0 DUP4 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SWAP1 PUSH2 0x1A0 PUSH1 0x40 PUSH2 0x3477 PUSH1 0x20 DUP7 ADD MLOAD SWAP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA0 SWAP6 DUP7 DUP7 DUP4 SUB ADD PUSH2 0x180 DUP8 ADD MSTORE PUSH2 0x3370 JUMP JUMPDEST SWAP5 ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x3370 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x758 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x171 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x34BD DUP3 PUSH2 0x348A JUMP JUMPDEST SWAP3 PUSH2 0x34CB PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x3188 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x171 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x171 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x171 JUMPI DUP4 PUSH2 0x351A SWAP2 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x171 JUMPI PUSH2 0x3531 SWAP2 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x171 JUMPI SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x171 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x171 JUMPI PUSH2 0x3584 SWAP2 PUSH1 0x4 ADD PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x171 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x20 PUSH2 0x3487 SWAP4 DUP2 DUP5 MSTORE DUP1 MLOAD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD SWAP2 PUSH1 0x40 DUP1 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x3395 JUMP JUMPDEST ISZERO PUSH2 0x35D5 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F535441545553000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x171 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x171 JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3638 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x594F555F4152455F5448455F53454C4C45520000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0xFF PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND SWAP2 AND OR PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x36A2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x11 DUP3 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x36FD JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x36F2 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x36E6 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x36DD JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3713 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xD DUP3 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x376E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x3763 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3757 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x374E JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3784 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xB DUP3 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x37DF JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x37D4 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x37C8 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x37BF JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x37F5 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xC DUP3 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x3850 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x3845 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3839 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3866 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0xE DUP3 MSTORE PUSH32 0xBB7B4A454DC3493923482F07822329ED19E8244EFF582CC204F8554C3620C3FD SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x38C1 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x38B6 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x38AA JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x38A1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1 DUP1 SLOAD DUP3 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MSTORE PUSH1 0xFF PUSH1 0x2 SLOAD PUSH2 0x38F2 PUSH1 0x60 DUP7 ADD DUP4 DUP4 AND PUSH2 0x3340 JUMP JUMPDEST PUSH1 0x8 SHR AND PUSH2 0x38FF DUP2 PUSH2 0x31AB JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x3 SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x4 SLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x3930 PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH2 0x100 DUP6 ADD SWAP1 PUSH2 0x30EF JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0x8 SLOAD PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x9 SLOAD PUSH2 0x160 SWAP1 DUP2 DUP6 ADD MSTORE PUSH1 0xA SLOAD PUSH2 0x180 DUP6 ADD MSTORE PUSH2 0x1A0 DUP5 ADD MSTORE PUSH1 0x60 PUSH2 0x1C0 DUP5 ADD MSTORE PUSH1 0x0 SWAP3 PUSH1 0xB SLOAD PUSH2 0x3973 DUP2 PUSH2 0x31C1 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x220 DUP5 ADD MSTORE DUP4 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x3B6F JUMPI POP PUSH1 0x1 EQ PUSH2 0x3B11 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE40 DUP1 DUP3 DUP7 SUB ADD PUSH2 0x1E0 DUP4 ADD MSTORE PUSH1 0x0 SWAP5 PUSH1 0xC SLOAD SWAP1 PUSH2 0x39CD DUP3 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 DUP6 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3AF4 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3A96 JUMPI JUMPDEST POP POP PUSH2 0x200 SWAP1 DUP3 DUP7 SUB ADD SWAP2 ADD MSTORE PUSH1 0x0 SWAP3 PUSH1 0xD SLOAD SWAP2 PUSH2 0x3A01 DUP4 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x3A79 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3A1F JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST SWAP3 SWAP4 POP SWAP1 PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0x3A65 JUMPI POP POP POP POP ADD ADD CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3A18 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0x3A4F JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 DUP5 ADD MSTORE POP POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3A18 JUMP JUMPDEST DUP6 SWAP2 SWAP3 SWAP7 POP PUSH1 0xC PUSH1 0x0 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 SWAP1 DUP6 PUSH1 0x0 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x3ADE JUMPI POP POP ADD ADD SWAP5 SWAP1 POP PUSH2 0x200 CODESIZE PUSH2 0x39E4 JUMP JUMPDEST DUP1 SLOAD DUP4 DUP6 ADD DUP7 ADD MSTORE DUP9 SWAP5 SWAP1 SWAP4 ADD SWAP3 DUP8 SWAP2 ADD PUSH2 0x3AC7 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP3 DUP9 ADD MSTORE POP SWAP1 ISZERO ISZERO PUSH1 0x5 SHL ADD DUP5 ADD SWAP5 POP PUSH2 0x200 CODESIZE PUSH2 0x39E4 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 DUP4 DUP4 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3B59 JUMPI POP POP POP PUSH2 0x240 SWAP2 POP DUP5 ADD ADD SWAP3 CODESIZE PUSH2 0x3990 JUMP JUMPDEST DUP1 SLOAD PUSH2 0x240 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 DUP4 DUP6 SWAP2 PUSH2 0x3B40 JUMP JUMPDEST SWAP3 SWAP6 POP POP PUSH1 0xFF NOT PUSH2 0x240 SWAP3 AND DUP3 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP3 CODESIZE PUSH2 0x3990 JUMP JUMPDEST ISZERO PUSH2 0x3B95 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57524F4E475F544F4B454E000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3BE6 DUP3 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH32 0x3078303000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x171 JUMPI DUP1 MLOAD PUSH2 0x3C28 DUP2 PUSH2 0x348A JUMP JUMPDEST SWAP3 PUSH2 0x3C36 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x3188 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x171 JUMPI PUSH2 0x3487 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x334D JUMP JUMPDEST MLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x171 JUMPI JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x3CD5 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 PUSH1 0x18 SLOAD AND SWAP4 PUSH1 0x40 SWAP5 DUP6 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 PUSH32 0x7276069D00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x60 PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD SWAP1 PUSH2 0x3370 JUMP JUMPDEST SWAP4 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 PUSH1 0x44 DUP4 ADD MSTORE DUP2 PUSH1 0x0 SWAP9 DUP10 SWAP5 SUB SWAP2 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x3DEE JUMPI DUP6 SWAP2 DUP7 DUP1 SWAP7 DUP2 SWAP7 PUSH2 0x3D70 JUMPI JUMPDEST POP DUP3 DUP7 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP PUSH2 0x3D19 PUSH1 0x20 DUP7 ADD PUSH2 0x3C54 JUMP JUMPDEST POP DUP2 DUP6 ADD MLOAD SUB PUSH2 0x3D2A JUMPI POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x64 SWAP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57524F4E475F4E4F4E4345000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP8 POP SWAP5 POP SWAP2 POP SWAP4 POP RETURNDATASIZE DUP1 DUP5 DUP8 RETURNDATACOPY PUSH2 0x3D87 DUP2 DUP8 PUSH2 0x3188 JUMP JUMPDEST DUP6 ADD SWAP4 PUSH1 0x80 DUP7 DUP7 SUB SLT PUSH2 0x3DEA JUMPI DUP6 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x3DE6 JUMPI DUP7 PUSH2 0x3DB4 SWAP2 DUP10 ADD PUSH2 0x3C12 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP9 ADD MLOAD SWAP4 DUP4 DUP10 ADD MLOAD SWAP9 PUSH1 0x60 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x3DE2 JUMPI PUSH2 0x3DD7 SWAP3 SWAP2 ADD PUSH2 0x3C12 JUMP JUMPDEST SWAP6 SWAP3 SWAP7 SWAP6 SWAP5 CODESIZE PUSH2 0x3CFF JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x171 JUMPI MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x171 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0x3EBE JUMPI POP PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x3487 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3EB7 JUMPI JUMPDEST PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3DF7 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3EA5 JUMP JUMPDEST PUSH1 0x2 SUB PUSH2 0x3F20 JUMPI PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1B53 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1B53 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1B53 JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x19 SLOAD AND CALLER SUB PUSH2 0x3F99 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F5641554C5400000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 PUSH1 0x60 SWAP3 PUSH2 0x3FF2 DUP4 PUSH1 0x80 DUP2 ADD SWAP9 PUSH2 0x30EF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x40 SWAP3 PUSH2 0x4077 PUSH32 0xFC75911105C5435503D8CE6E41BF92051ED6DA32A2077C1A8F73E1D251F64CDE SWAP4 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE DUP7 DUP3 KECCAK256 DUP6 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x4054 DUP2 DUP9 DUP5 KECCAK256 SLOAD PUSH2 0x3F6B JUMP JUMPDEST DUP1 SWAP8 DUP4 DUP7 DUP4 SWAP6 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 DUP9 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3FDD JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP3 KECCAK256 DUP5 DUP4 MSTORE PUSH1 0x20 MSTORE DUP5 DUP3 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x40FB JUMPI SWAP2 DUP2 DUP7 PUSH2 0x40DA PUSH2 0x4077 SWAP5 PUSH32 0x77008762CA31A384E88F2217752CDEF978440C9AD826B7B891C59A8E61281A31 SWAP9 SWAP8 SWAP7 PUSH2 0x3F5E JUMP JUMPDEST DUP1 SWAP9 DUP5 DUP8 DUP4 SWAP7 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 DUP10 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3FDD JUMP JUMPDEST PUSH1 0x64 DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E53554646494349454E545F4445504F534954000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x4145 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F5448455F53454C4C45525F4F525F4255594552000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4199 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x41B0 DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 DUP3 EQ SWAP2 DUP3 ISZERO PUSH2 0x41C6 JUMPI POP POP SWAP1 JUMP JUMPDEST EQ SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 PUSH2 0x41D7 SWAP3 SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD KECCAK256 PUSH1 0x40 SWAP1 DUP2 MLOAD PUSH2 0x41F4 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ DUP1 ISZERO PUSH2 0x428B JUMPI JUMPDEST ISZERO PUSH2 0x4248 JUMPI DUP2 MLOAD PUSH2 0x4217 DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 SUB PUSH2 0x4239 JUMPI MLOAD SWAP1 PUSH2 0x4231 DUP3 PUSH2 0x1015 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x4231 DUP3 PUSH2 0x1015 DUP2 PUSH2 0x32B9 JUMP JUMPDEST PUSH1 0x64 DUP4 DUP4 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F53454C4C45525F4F525F425559455200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP2 MLOAD PUSH2 0x429B DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ PUSH2 0x4203 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x42B9 DUP3 PUSH2 0x1015 DUP2 PUSH2 0x3214 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 SUB PUSH2 0x4381 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 PUSH1 0x0 PUSH1 0x1C SLOAD PUSH2 0x42D9 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x4360 JUMPI POP PUSH1 0x1 EQ PUSH2 0x4301 JUMPI JUMPDEST POP POP PUSH2 0x3487 SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x1C PUSH1 0x0 MSTORE PUSH32 0xE4562A10381DEC21B205ED72637E6B1B523BDD0E4D4D50AF5CD23DD4500A211 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x4348 JUMPI POP POP PUSH2 0x3487 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x42F3 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x4330 JUMP JUMPDEST SWAP1 POP PUSH2 0x3487 SWAP6 SWAP4 POP PUSH1 0xFF NOT SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x42F3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 PUSH1 0x0 PUSH1 0x1D SLOAD PUSH2 0x4394 DUP2 PUSH2 0x31C1 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x4360 JUMPI POP PUSH1 0x1 EQ PUSH2 0x43BB JUMPI POP POP PUSH2 0x3487 SWAP3 POP SUB DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x1D PUSH1 0x0 MSTORE PUSH32 0x6D4407E7BE21F808E6509AA9FA9143369579DD7D760FE20A2C09680FC146134F SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x4402 JUMPI POP POP PUSH2 0x3487 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x42F3 JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x43EA JUMP JUMPDEST ISZERO PUSH2 0x4421 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E4F545F53454C4C455200000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x4483 SWAP4 SWAP6 SWAP5 SWAP3 SWAP6 PUSH1 0x60 DUP3 ADD SWAP7 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x30EF JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 PUSH1 0x2 PUSH2 0x44AC SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4734 JUMPI JUMPDEST POP PUSH2 0x35CE JUMP JUMPDEST DUP2 ISZERO PUSH2 0x46F0 JUMPI PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI DUP4 ISZERO DUP1 ISZERO PUSH2 0x4503 JUMPI JUMPDEST POP PUSH32 0x7D53254B9393EC490C848E90ED920CF3B18C2151DAA4B322875F24DD6301206C SWAP3 POP PUSH2 0x4077 PUSH2 0x44F6 DUP4 DUP4 DUP8 PUSH2 0x4000 JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH2 0x4465 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x46E5 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x46D5 JUMPI JUMPDEST POP PUSH2 0x4522 SWAP2 POP PUSH2 0x3B8E JUMP JUMPDEST PUSH2 0x452B DUP5 PUSH2 0x5353 JUMP JUMPDEST SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH2 0x454B DUP8 PUSH2 0x5353 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 SWAP5 SWAP3 SWAP1 SWAP2 DUP6 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x880 JUMPI DUP7 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x46A5 JUMPI JUMPDEST POP LT PUSH2 0x4661 JUMPI SWAP1 PUSH1 0x64 DUP4 SWAP3 PUSH1 0x0 DUP4 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP6 DUP7 SWAP5 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE DUP10 PUSH1 0x44 DUP6 ADD MSTORE AND GAS CALL DUP1 ISZERO PUSH2 0x880 JUMPI PUSH32 0x7D53254B9393EC490C848E90ED920CF3B18C2151DAA4B322875F24DD6301206C SWAP5 PUSH2 0x463E SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x4644 JUMPI JUMPDEST POP POP PUSH2 0x5308 JUMP JUMPDEST CODESIZE PUSH2 0x44C4 JUMP JUMPDEST PUSH2 0x465A SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x4637 JUMP JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x494E53554646494349454E545F414C4C4F57414E434500000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 POP DUP5 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x46CE JUMPI JUMPDEST PUSH2 0x46BC DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP DUP6 SWAP1 MLOAD CODESIZE PUSH2 0x45B5 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x46B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D4 JUMPI PUSH2 0x4522 SWAP1 CODESIZE PUSH2 0x4517 JUMP JUMPDEST PUSH1 0x2 DUP8 EQ SWAP2 POP PUSH2 0x4510 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5354414B455F5245515549524544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x3 SWAP2 POP EQ ISZERO CODESIZE PUSH2 0x44A6 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x476B JUMPI RETURNDATASIZE SWAP1 PUSH2 0x4751 DUP3 PUSH2 0x348A JUMP JUMPDEST SWAP2 PUSH2 0x475F PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x3188 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x477C DUP2 DUP4 DUP6 PUSH2 0x407D JUMP JUMPDEST SWAP3 PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 PUSH2 0x48BF JUMPI POP PUSH1 0x4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP2 PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH32 0x18DA001100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x880 JUMPI DUP4 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x4878 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 SWAP4 DUP2 SWAP4 DUP3 SWAP4 AND GAS CALL PUSH2 0x47FA PUSH2 0x4740 JUMP JUMPDEST POP ISZERO PUSH2 0x4834 JUMPI PUSH32 0x44E7D684DF94A05F40AE4EA3F03CBD42CE0647BD9D92E4105E296C10088F41AA SWAP2 PUSH1 0x40 SWAP2 JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43414C4C5F4641494C4544000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP3 POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x48B7 JUMPI JUMPDEST DUP2 PUSH2 0x4893 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP PUSH1 0x0 DUP1 DUP5 DUP2 SWAP5 PUSH2 0x48AC DUP4 SWAP6 PUSH2 0x3C54 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP PUSH2 0x47E6 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4886 JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP2 DUP4 PUSH1 0x2 PUSH32 0x44E7D684DF94A05F40AE4EA3F03CBD42CE0647BD9D92E4105E296C10088F41AA SWAP6 EQ PUSH1 0x0 EQ PUSH2 0x48FF JUMPI POP PUSH2 0x48FA DUP2 PUSH2 0x490F JUMP JUMPDEST PUSH2 0x4826 JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x4826 JUMPI PUSH2 0x48FA DUP2 PUSH2 0x4F23 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x17 SLOAD AND PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 DUP4 DUP1 SWAP4 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 SWAP6 DUP7 SWAP2 PUSH1 0x4 SWAP7 DUP8 SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4BED JUMPI DUP4 PUSH2 0x49D7 SWAP3 DUP8 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x4BF8 JUMPI JUMPDEST POP DUP9 PUSH1 0x1A SLOAD AND PUSH1 0x0 DUP11 DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP7 DUP3 SWAP6 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP5 MSTORE DUP14 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0x4BED JUMPI PUSH2 0x4BD0 JUMPI JUMPDEST POP PUSH2 0x49F0 PUSH2 0x4C15 JUMP JUMPDEST SWAP4 DUP6 PUSH1 0x17 SLOAD AND SWAP4 DUP3 MLOAD SWAP4 PUSH32 0x4B57B0BE00000000000000000000000000000000000000000000000000000000 SWAP7 DUP8 DUP7 MSTORE DUP4 DUP7 DUP5 DUP2 DUP11 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x4BC5 JUMPI PUSH1 0x0 SWAP7 PUSH2 0x4BA6 JUMPI JUMPDEST POP DUP5 MLOAD SWAP6 DUP5 DUP8 PUSH1 0x24 DUP2 PUSH32 0xD223A56400000000000000000000000000000000000000000000000000000000 SWAP12 DUP13 DUP3 MSTORE PUSH1 0x0 DUP10 DUP4 ADD MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x4B9B JUMPI PUSH1 0x0 SWAP8 PUSH2 0x4B6A JUMPI JUMPDEST POP SWAP1 PUSH2 0x4A8E SWAP3 SWAP2 PUSH3 0xFFFFFF DUP1 SWAP9 AND SWAP2 PUSH2 0x4C70 JUMP JUMPDEST SWAP7 PUSH1 0x17 SLOAD AND SWAP5 DUP4 MLOAD SWAP7 DUP8 MSTORE DUP3 DUP8 DUP4 DUP2 DUP10 GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x4B5F JUMPI PUSH1 0x0 SWAP8 PUSH2 0x4B33 JUMPI JUMPDEST POP SWAP2 DUP1 SWAP2 PUSH1 0x24 PUSH1 0x1 SWAP5 PUSH2 0x4AC0 PUSH2 0x5055 JUMP JUMPDEST SWAP9 DUP8 MLOAD SWAP7 DUP8 SWAP5 DUP6 SWAP4 DUP5 MSTORE DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4B29 JUMPI POP PUSH1 0x0 SWAP3 PUSH2 0x4AF8 JUMPI JUMPDEST POP POP SWAP2 PUSH2 0x4AF3 SWAP4 SWAP2 PUSH2 0x4483 SWAP6 SWAP4 AND SWAP2 PUSH2 0x4C70 JUMP JUMPDEST PUSH2 0x4F23 JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP4 RETURNDATASIZE DUP4 GT PUSH2 0x4B22 JUMPI JUMPDEST PUSH2 0x4B0F DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP MLOAD DUP2 PUSH2 0x4483 PUSH2 0x4ADF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4B05 JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 SWAP3 SWAP1 DUP4 SWAP3 SWAP9 POP PUSH2 0x4B54 PUSH1 0x24 SWAP2 PUSH1 0x1 SWAP7 RETURNDATASIZE DUP7 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP9 SWAP3 POP POP SWAP2 SWAP3 PUSH2 0x4AAF JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP7 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4B94 JUMPI JUMPDEST PUSH2 0x4B81 DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP MLOAD SWAP6 PUSH2 0x4A8E PUSH2 0x4A7A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4B77 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4BBE SWAP2 SWAP7 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x4A35 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4BE6 SWAP1 DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST POP CODESIZE PUSH2 0x49E7 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4C0F SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x4978 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0x880 JUMPI DUP7 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4EEE JUMPI JUMPDEST POP LT PUSH2 0x4E85 JUMPI JUMPDEST POP PUSH1 0xF TIMESTAMP ADD SWAP1 DUP2 TIMESTAMP GT PUSH2 0x1B53 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1A SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x100 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x758 JUMPI PUSH1 0x40 MSTORE DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE PUSH1 0x40 DUP3 ADD SWAP5 PUSH3 0xFFFFFF AND DUP6 MSTORE PUSH1 0x60 DUP3 ADD SWAP6 ADDRESS DUP8 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0xA0 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0xC0 DUP4 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0xE0 DUP5 ADD PUSH1 0x0 SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP8 PUSH32 0x414BF38900000000000000000000000000000000000000000000000000000000 DUP10 MSTORE DUP7 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 DUP11 ADD MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x24 DUP10 ADD MSTORE MLOAD PUSH3 0xFFFFFF AND PUSH1 0x44 DUP9 ADD MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x64 DUP8 ADD MSTORE MLOAD PUSH1 0x84 DUP7 ADD MSTORE MLOAD PUSH1 0xA4 DUP6 ADD MSTORE MLOAD PUSH1 0xC4 DUP5 ADD MSTORE PUSH1 0xE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE4 DUP4 ADD MSTORE GAS SWAP3 PUSH1 0x0 PUSH2 0x104 SWAP3 PUSH1 0x20 SWAP6 CALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4E56 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4E7D JUMPI JUMPDEST DUP2 PUSH2 0x4E70 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E63 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP7 GAS CALL DUP1 ISZERO PUSH2 0x880 JUMPI ISZERO PUSH2 0x4CE4 JUMPI PUSH2 0x4EE7 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST POP CODESIZE PUSH2 0x4CE4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4F1B JUMPI JUMPDEST DUP2 PUSH2 0x4F09 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP DUP6 SWAP1 MLOAD CODESIZE PUSH2 0x4CDD JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4EFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 PUSH1 0x20 SWAP7 DUP8 SWAP4 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI DUP5 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x5033 JUMPI JUMPDEST POP PUSH1 0x24 SWAP1 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x42966C6800000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5016 JUMPI JUMPDEST POP ISZERO PUSH2 0x4FD2 JUMPI POP JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D757365206275726E206661696C656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x502D SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x4FC9 JUMP JUMPDEST PUSH1 0x24 SWAP2 SWAP3 POP PUSH2 0x504E SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3EB7 JUMPI PUSH2 0x3EAF DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x4F81 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E96 JUMPI POP SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 PUSH1 0x2 PUSH2 0x50D7 SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4734 JUMPI POP PUSH2 0x35CE JUMP JUMPDEST PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x2D4 JUMPI DUP4 PUSH2 0x514D JUMPI PUSH1 0x0 DUP1 DUP1 DUP5 DUP2 SWAP5 DUP3 SWAP1 DUP3 ISZERO PUSH2 0x5143 JUMPI JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 CALL ISZERO PUSH2 0x880 JUMPI PUSH32 0xF710AED018092BD38AB8D98FE9AA682F6B3AA552004E37CB2E0D6E3E669582EE SWAP2 JUMPDEST PUSH2 0x4077 PUSH2 0x44F6 DUP4 DUP4 DUP8 PUSH2 0x407D JUMP JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0x50F5 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP5 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x525D JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x524F JUMPI JUMPDEST POP DUP3 PUSH2 0x51ED SWAP5 PUSH2 0x5173 PUSH1 0x20 SWAP4 PUSH2 0x3B8E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x5191 DUP9 PUSH2 0x5353 JUMP JUMPDEST AND SWAP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP9 DUP2 SWAP6 DUP3 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x880 JUMPI PUSH32 0xF710AED018092BD38AB8D98FE9AA682F6B3AA552004E37CB2E0D6E3E669582EE SWAP4 PUSH2 0x522C SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x5231 JUMPI JUMPDEST POP PUSH2 0x5308 JUMP JUMPDEST PUSH2 0x5135 JUMP JUMPDEST PUSH2 0x5249 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x5226 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP3 PUSH2 0x5162 JUMP JUMPDEST PUSH1 0x2 DUP7 EQ SWAP2 POP PUSH2 0x515B JUMP JUMPDEST SWAP1 PUSH2 0x5273 SWAP3 SWAP2 PUSH2 0x3C75 JUMP JUMPDEST POP POP POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x528D DUP2 PUSH2 0x269 DUP2 PUSH2 0x32B9 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ DUP1 ISZERO PUSH2 0x52E9 JUMPI JUMPDEST ISZERO PUSH2 0x52A5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x554E415554484F52495A45440000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x52FA DUP2 PUSH2 0x269 DUP2 PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP2 EQ PUSH2 0x529D JUMP JUMPDEST ISZERO PUSH2 0x530F JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5378 JUMPI PUSH1 0x1 EQ PUSH2 0x5370 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3487 PUSH2 0x5055 JUMP JUMPDEST POP PUSH2 0x3487 PUSH2 0x4C15 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x17 SLOAD AND PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP4 PUSH32 0x18DA001100000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP7 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x4B5F JUMPI PUSH1 0x0 SWAP7 PUSH2 0x559B JUMPI JUMPDEST POP PUSH1 0x3 DUP8 LT ISZERO PUSH2 0x2D4 JUMPI DUP7 ISZERO PUSH2 0x5533 JUMPI POP PUSH1 0x2 DUP7 EQ SWAP5 DUP6 ISZERO PUSH2 0x5522 JUMPI PUSH1 0x4 DUP6 PUSH2 0x5407 PUSH2 0x4C15 JUMP JUMPDEST SWAP5 JUMPDEST DUP7 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x5DC96D1600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4BC5 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5505 JUMPI JUMPDEST POP ISZERO PUSH2 0x5473 JUMPI POP POP POP POP POP PUSH1 0x0 EQ PUSH2 0x545F JUMPI POP PUSH2 0x4483 SWAP1 PUSH2 0x490F JUMP JUMPDEST PUSH1 0x1 EQ PUSH2 0x546A JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x4483 SWAP1 PUSH2 0x4F23 JUMP JUMPDEST PUSH2 0x54DA SWAP7 POP DUP4 SWAP6 POP DUP2 PUSH1 0x0 SWAP2 DUP7 SWAP10 SWAP6 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP4 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP4 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x4B29 JUMPI POP PUSH2 0x54EF JUMPI POP POP JUMP JUMPDEST DUP2 PUSH2 0x5467 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST PUSH2 0x551C SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x879 JUMPI PUSH2 0x86B DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST CODESIZE PUSH2 0x5443 JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH2 0x552D PUSH2 0x5055 JUMP JUMPDEST SWAP5 PUSH2 0x5409 JUMP JUMPDEST PUSH1 0x0 SWAP6 POP DUP6 SWAP5 SWAP8 SWAP2 SWAP1 DUP6 SWAP5 SWAP8 POP DUP5 SWAP4 POP AND GAS CALL PUSH2 0x554E PUSH2 0x4740 JUMP JUMPDEST POP ISZERO PUSH2 0x5558 JUMPI POP POP JUMP JUMPDEST PUSH1 0x64 SWAP3 POP MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206661696C65642E00000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP6 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x55CB JUMPI JUMPDEST PUSH2 0x55B2 DUP2 DUP4 PUSH2 0x3188 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D6D JUMPI POP PUSH2 0x55C4 SWAP1 PUSH2 0x3C54 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x53E0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x55A8 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xFFA273DCFE8B2548C8BFACC405 0xDB 0x2B SGT PUSH5 0xECADECC753 SUB 0xC5 CREATE2 0xC2 0xE8 0xED 0x4C 0x4C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"828:578:8:-:0;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;5107:20:20;828:578:8;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;6499:7:26;;:::i;:::-;828:578:8;6559:30:26;828:578:8;;;;;;;;;6540:65:26;6643:97;6548:41;;;6540:65;:::i;:::-;828:578:8;;;6643:97:26;;:::i;:::-;828:578:8;;;;2412:8:21;828:578:8;;;;;;;;;;;;;;;6840:30:26;828:578:8;;;6923:114:26;;;;;:::i;:::-;828:578:8;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;7072:42:26;7052:62;7072:42;;828:578:8;7130:28:26;828:578:8;;;;;;;7048:204:26;828:578:8;7202:20:26;828:578:8;7048:204:26;;828:578:8;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;4984:28:20;828:578:8;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;5201:30:26;828:578:8;;;;;;;;5182:65:26;5190:41;;;5182:65;:::i;:::-;828:578:8;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;5384:42:26;5364:62;;:145;;;;828:578:8;;;;5850:137:26;828:578:8;;;;;;;;:::i;:::-;;;;;;5698:43:26;5666:75;;5665:127;;5757:9;5665:127;;828:578:8;;5924:22:26;828:578:8;;5850:137:26;;:::i;5665:127::-;828:578:8;;5665:127:26;;;828:578:8;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;5364:145:26;828:578:8;;;;;;;;:::i;:::-;;;;;;5466:43:26;5446:63;;5364:145;;828:578:8;;;;;;;:::i;:::-;322:1366:27;;;:::i;:::-;566:13;828:578:8;;;;;;;;;;;;;;;628:13:27;828:578:8;;;;;;;;;;628:178:27;;;828:578:8;;;;890:97:27;;;;;:::i;:::-;828:578:8;;;;;;;;1025:18:27;828:578:8;;;;1093:28:27;828:578:8;;;;1078:111:27;;;;828:578:8;1078:111:27;;;828:578:8;1078:111:27;;828:578:8;1078:111:27;;;;;;;828:578:8;1078:111:27;;;828:578:8;;;;;1247:63:27;566:4;828:578:8;;;1255:40:27;1247:63;:::i;:::-;828:578:8;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;1337:31:27;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1407:31:27;;828:578:8;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;1382:22:27;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;1382:22:27;828:578:8;;;;;;;;1589:62:27;1620:31;828:578:8;1589:15:27;:62;:::i;:::-;828:578:8;;1669:11:27;828:578:8;;1669:11:27;;;;:::i;:::-;;;;828:578:8;;;;;-1:-1:-1;;;828:578:8;;;;;;;;-1:-1:-1;;828:578:8;;;;1382:22:27;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;1382:22:27;828:578:8;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;1382:22:27;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;1078:111:27;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;828:578:8;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;628:178:27;685:47;;;;:120;628:178;685:120;757:48;774:31;757:48;;628:178;;828:578:8;;;;;3411:29:24;3987:97;828:578:8;;;:::i;:::-;3987:97:24;;:::i;:::-;828:578:8;;;;;;;;4102:18:24;3323:70;3331:34;;;:::i;:::-;3323:70;:::i;:::-;3411:29;:::i;:::-;828:578:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;828:578:8;;;;;638:70:24;646:34;828:578:8;;646:34:24;:::i;638:70::-;828:578:8;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;134:3350:23;;:::i;:::-;828:578:8;320:13:23;828:578:8;;;;;;;;;;;;;;353:31:23;320:64;828:578:8;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;458:42:23;828:578:8;;458:62:23;;828:578:8;;;;;;692:24:23;828:578:8;;;;657:89:23;;;;828:578:8;657:89:23;;;;;;;;;828:578:8;657:89:23;;;828:578:8;;;;;;;;;821:47:23;;;;828:578:8;821:47:23;;;;;;;;;828:578:8;821:47:23;;;828:578:8;777:91:23;872:5;777:91;910:39;777:91;;;:::i;:::-;828:578:8;910:39:23;;;:::i;:::-;828:578:8;;;1105:15:23;-1:-1:-1;1067:62:23;;;;828:578:8;1063:2414:23;;;828:578:8;;1447:180:23;1220:196;828:578:8;1263:30:23;828:578:8;;;;;;;;;:::i;:::-;;;;;;1312:42:23;828:578:8;;1220:196:23;;:::i;:::-;828:578:8;;1263:30:23;828:578:8;;;;;;;;;:::i;:::-;;;;;;1539:43:23;1447:180;;:::i;:::-;828:578:8;;1263:30:23;828:578:8;;;353:31:23;828:578:8;;;;;;;839:33:28;;:85;;;;;1063:2414:23;839:137:28;;;;1063:2414:23;818:195:28;;;1023:1;818:195;;:::i;:::-;1023:1;:::i;:::-;777:20:23;828:578:8;;;1989:114:23;;;;828:578:8;1989:114:23;;828:578:8;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;2669:42:20;828:578:8;;;;;;;;;;;;;;;;;;;2669:42:20;:::i;:::-;2140:11:23;828:578:8;;2140:11:23;;;;:::i;828:578:8:-;;;;;;;;;;;;;;;;;;;;1989:114:23;;777:20;1989:114;;;839:137:28;828:578:8;;;;944:32:28;;818:195;839:137;;828:578:8;;;;;;;;;;839:85:28;-1:-1:-1;;892:32:28;;;828:578:8;839:85:28;;828:578:8;;;;;;;;;;1063:2414:23;2169:1308;;;;;;;;;;;828:578:8;2169:1308:23;777:20;828:578:8;2222:40:23;;828:578:8;;692:8:23;828:578:8;2367:4:23;2340:31;;;;828:578:8;;;2433:37:23;;;;:::i;:::-;828:578:8;2522:20:23;;;;;:::i;:::-;828:578:8;;2596:30:23;828:578:8;;;353:31:23;828:578:8;;;;;;;;839:33:28;;:85;;;;;2169:1308:23;839:137:28;;;;2169:1308:23;818:195:28;;;;777:20:23;818:195:28;;;2968:165:23;818:195:28;;;1023:1;818:195;;:::i;1023:1::-;2761:161:23;828:578:8;;2596:30:23;828:578:8;;;;;;;;;:::i;:::-;;;;;;2839:42:23;2761:161;;:::i;:::-;828:578:8;;2596:30:23;828:578:8;;;;;;;;;:::i;:::-;;;;;;3046:43:23;2968:165;;:::i;:::-;777:20;828:578:8;-1:-1:-1;;828:578:8;;;;;;;;;3271:31:23;828:578:8;3330:28:23;828:578:8;;;;;;;;;;;;;;;;;;;;;;;3452:13:23;828:578:8;;3452:13:23;;;;:::i;839:137:28:-;828:578:8;;;;;-1:-1:-1;944:32:28;;;777:20:23;839:137:28;;828:578:8;;;;;;;;;839:85:28;-1:-1:-1;892:32:28;;;;-1:-1:-1;828:578:8;839:85:28;;828:578:8;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;1067:62:23;;;;;821:47;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;872:5:23;821:47;;;;;;;657:89;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;;;:::i;:::-;657:89:23;;;;;;;;828:578:8;;;468:31:23;828:578:8;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;2369:279:24;;:::i;:::-;2513:70;2521:34;;;:::i;2513:70::-;828:578:8;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;2802:43:24;2782:63;828:578:8;;;;;;;;;;2862:28:24;828:578:8;;:::i;:::-;;;;;;2778:218:24;828:578:8;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;2862:28:24;828:578:8;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;2862:28:24;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;2862:28:24;828:578:8;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2862:28:24;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;2778:218:24;828:578:8;;;;;;;;2939:29:24;828:578:8;;:::i;:::-;;;;;;2778:218:24;828:578:8;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;2939:29:24;828:578:8;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;2939:29:24;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:29:24;828:578:8;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:29:24;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;8143:130:26;828:578:8;8176:30:26;828:578:8;;;;;;;;;:::i;:::-;;;;;;8220:43:26;8143:130;;:::i;828:578:8:-;;;;;-1:-1:-1;;828:578:8;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;2440:16:20;828:578:8;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2440:16:20;828:578:8;;;;;-1:-1:-1;828:578:8;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;-1:-1:-1;828:578:8;;-1:-1:-1;828:578:8;;;;;;;-1:-1:-1;;828:578:8;;;;;;;4131:13:20;828:578:8;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;828:578:8;;;;;;8442:129:26;828:578:8;8475:30:26;828:578:8;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;7462:7:26;;:::i;:::-;828:578:8;7522:30:26;828:578:8;;;;;;;;;7606:97:26;3064:48;7511:41;7503:65;828:578:8;7511:41:26;;;7503:65;:::i;:::-;828:578:8;;;7606:97:26;;:::i;:::-;2998:36;;;;;;:::i;:::-;3064:48;;:::i;828:578:8:-;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;839:33:28;:85;;;;;828:578:8;839:137:28;;;;828:578:8;818:195:28;;;1028:47:19;818:195:28;;:::i;:::-;828:578:8;;;;;1028:47:19;;:::i;:::-;828:578:8;;;;;;;;;1112:18:19;828:578:8;;;1182:25:19;;828:578:8;;;;;1267:28:19;828:578:8;;;;1252:109:19;;;;828:578:8;1252:109:19;;;828:578:8;1252:109:19;;828:578:8;1252:109:19;;;;;;;828:578:8;1252:109:19;;;828:578:8;;;;;;1267:28:19;828:578:8;;;;;;;;;;;;;1411:112:19;828:578:8;;;;;;1411:112:19;:::i;:::-;828:578:8;;1541:15:19;828:578:8;;;;;;:::i;:::-;;;;;;;1608:18:19;828:578:8;;;;;;;1673:131:19;828:578:8;;;1747:22:19;828:578:8;;;;;1673:131:19;:::i;:::-;828:578:8;1267:28:19;828:578:8;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;-1:-1:-1;;1267:28:19;828:578:8;;;1267:28:19;828:578:8;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;2171:314:19;;828:578:8;2336:15:19;828:578:8;2171:314:19;;828:578:8;;;2171:314:19;;828:578:8;;2171:314:19;;828:578:8;2171:314:19;828:578:8;;;2171:314:19;;;:::i;:::-;828:578:8;;;;;;:::i;:::-;;;;;;2511:180:19;;828:578:8;;;2511:180:19;;828:578:8;;;2511:180:19;;828:578:8;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;;;;2715:187:19;;828:578:8;;2715:187:19;;828:578:8;;;;;;;:::i;:::-;;;;2123:794:19;;828:578:8;;2123:794:19;;828:578:8;;;;;;;:::i;:::-;;;;2016:912:19;828:578:8;2016:912:19;;828:578:8;576:6:20;828:578:8;;;;576:6:20;;828:578:8;;;;;;;576:6:20;828:578:8;576:6:20;;:::i;:::-;828:578:8;576:6:20;;;828:578:8;;;:::i;:::-;;;;:::i;:::-;576:6:20;;1267:28:19;576:6:20;;828:578:8;576:6:20;;;;;1267:28:19;576:6:20;828:578:8;576:6:20;;;828:578:8;;;576:6:20;;;828:578:8;;;576:6:20;;;828:578:8;;576:6:20;;828:578:8;;;;;;;;576:6:20;828:578:8;-1:-1:-1;;576:6:20;;828:578:8;;;;576:6:20;;828:578:8;;2123:794:19;;828:578:8;576:6:20;;;828:578:8;;576:6:20;;;828:578:8;;576:6:20;;;;;828:578:8;576:6:20;;;828:578:8;2123:794:19;828:578:8;;;;;;;;;;;;;;;;576:6:20;828:578:8;;:::i;:::-;;:::i;:::-;;;1608:18:19;828:578:8;;;1608:18:19;;;828:578:8;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;576:6:20;828:578:8;;;576:6:20;;828:578:8;;;;;;;;;;;;576:6:20;828:578:8;;:::i;:::-;;;1608:18:19;828:578:8;;;1608:18:19;;;828:578:8;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;576:6:20;828:578:8;;576:6:20;828:578:8;;;;;;;;;;;;;;576:6:20;828:578:8;;:::i;:::-;;:::i;:::-;;;1608:18:19;828:578:8;;;1608:18:19;;;828:578:8;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;576:6:20;828:578:8;;3004:18:19;828:578:8;576:6:20;-1:-1:-1;;576:6:20;;;;;;828:578:8;576:6:20;3004:18:19;828:578:8;;;;;;;;;;;;3035:18:19;828:578:8;;:::i;:::-;;:::i;:::-;;;1608:18:19;828:578:8;;;1608:18:19;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;3035:18:19;828:578:8;;3087:34:19;828:578:8;3143:35:19;828:578:8;3207:16:19;828:578:8;;3207:16:19;;;;;:::i;:::-;;;;828:578:8;;;;;;;:::i;:::-;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;3035:18:19;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3035:18:19;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:6:20;;828:578:8;576:6:20;;828:578:8;576:6:20;828:578:8;;576:6:20;828:578:8;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;576:6:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;576:6:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;1252:109:19;;;;828:578:8;1252:109:19;828:578:8;1252:109:19;;;;;;;:::i;:::-;;;;828:578:8;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;839:137:28;828:578:8;;;;;;944:32:28;818:195;839:137;;:85;-1:-1:-1;;828:578:8;;903:21:28;892:32;828:578:8;839:85:28;;828:578:8;;;;;;;:::i;:::-;724:2100:25;;:::i;:::-;828:578:8;963:13:25;828:578:8;;;;;;;;;1453:56:25;828:578:8;1159:97:25;828:578:8;;;1011:13:25;828:578:8;;;;1003:62:25;828:578:8;;;;;;1003:62:25;:::i;:::-;1159:97;:::i;:::-;828:578:8;;;;;;;;1294:18:25;828:578:8;;;;;;;:::i;:::-;;;;;;1399:43:25;1461:33;1453:56;:::i;:::-;828:578:8;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;1757:31:25;828:578:8;;;1702:331:25;;;828:578:8;;;1702:331:25;;828:578:8;;1702:331:25;;;828:578:8;;1702:331:25;;;828:578:8;;1702:331:25;;;828:578:8;;;;;;;:::i;:::-;;;;;2060:175:25;;;828:578:8;;;2060:175:25;;828:578:8;;1702:331:25;2060:175;;828:578:8;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;2260:168:25;;;828:578:8;;;;;;:::i;:::-;;;;;2260:168:25;;828:578:8;;;;;;;:::i;:::-;;;1653:791:25;;;828:578:8;;;;1653:791:25;;828:578:8;;;;;;;;;;:::i;:::-;;;;1570:885:25;828:578:8;576:6:20;828:578:8;;;;;;576:6:20;;;828:578:8;;;;;;576:6:20;;;:::i;:::-;;;;;828:578:8;;;:::i;:::-;;;;:::i;:::-;576:6:20;;963:13:25;576:6:20;;828:578:8;576:6:20;;;;;963:13:25;576:6:20;1702:331:25;828:578:8;576:6:20;;;828:578:8;;;;;1702:331:25;576:6:20;;;828:578:8;;1702:331:25;576:6:20;;;;828:578:8;576:6:20;;828:578:8;;;;;;;1702:331:25;576:6:20;828:578:8;-1:-1:-1;;576:6:20;;828:578:8;;;;576:6:20;;828:578:8;576:6:20;;1757:31:25;828:578:8;576:6:20;;;;828:578:8;;;576:6:20;;;;828:578:8;576:6:20;;;828:578:8;;;;;;;;;;;;;;;;;;;;576:6:20;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;576:6:20;828:578:8;;576:6:20;;;828:578:8;;;;;;;;;;;;576:6:20;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;576:6:20;828:578:8;;576:6:20;828:578:8;;;;;;;;;;;;;;576:6:20;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;576:6:20;828:578:8;;;;:::i;:::-;;;;;;;;;;;;;;2468:31:25;828:578:8;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;2468:31:25;828:578:8;;;2521:33:25;828:578:8;;2569:34:25;828:578:8;;;:::i;:::-;;;;;;;;;;;1409:18:25;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;1409:18:25;828:578:8;;;2672:34:25;828:578:8;;2721:35:25;828:578:8;2801:15:25;828:578:8;;2801:15:25;;;;:::i;828:578:8:-;;;;-1:-1:-1;828:578:8;-1:-1:-1;;828:578:8;;;;;;;;;-1:-1:-1;;828:578:8;;1409:18:25;828:578:8;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;1409:18:25;828:578:8;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;2468:31:25;828:578:8;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;2468:31:25;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;576:6:20;828:578:8;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;-1:-1:-1;;828:578:8;;;576:6:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;576:6:20;828:578:8;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;576:6:20;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;914:34:24;828:578:8;;;;914:39:24;;828:578:8;;1040:35:24;828:578:8;1040:40:24;;;828:578:8;;1146:219:24;828:578:8;;;;;;;;;:::i;:::-;;;;;;1188:43:24;1168:63;;:146;;;;;828:578:8;1146:219:24;;:::i;:::-;828:578:8;;;;;;;;;;;;;;;1168:146:24;828:578:8;;;;;;;;;:::i;:::-;;;;;;1272:42:24;1252:62;1168:146;;;828:578:8;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1877:12:27;;;;;;:::i;:::-;828:578:8;1964:13:27;828:578:8;;;;;;;;;;;;;;2026:13:27;828:578:8;;;;;;;;;;2026:251:27;;;828:578:8;2004:315:27;2529:131;2004:315;;;2363:97;2004:315;;:::i;2363:97::-;828:578:8;;;;;;;;2498:18:27;828:578:8;;;;;;;:::i;:::-;;;;;;2571:43:27;2551:63;;2529:131;:::i;:::-;828:578:8;;;2693:48:27;828:578:8;;;;;;;;;;;;;2795:32:27;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;2795:32:27;828:578:8;;2886:30:27;-1:-1:-1;;1964:13:27;828:578:8;;;1964:13:27;828:578:8;2934:16:27;828:578:8;;2934:16:27;;;;:::i;:::-;;;;828:578:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;828:578:8;;;2795:32:27;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;2795:32:27;828:578:8;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;2026:251:27;828:578:8;;;;;2083:48:27;2100:31;2083:48;;:120;;;;2026:251;2083:193;;;;;2026:251;-1:-1:-1;2026:251:27;;;;;2083:193;828:578:8;;;;;;;2083:193:27;828:578:8;2228:48:27;;2083:193;;;:120;-1:-1:-1;828:578:8;;-1:-1:-1;2173:30:27;2156:47;;2083:120;;828:578:8;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1054:113:16;828:578:8;;;;;;1054:113:16;:::i;:::-;828:578:8;4841:30:20;828:578:8;;;;;;;;4823:64:20;828:578:8;;;4831:40:20;4823:64;:::i;:::-;828:578:8;;;;1561:47:16;1277:9;1230:85;;828:578:8;;;;;;;:::i;:::-;;;;;;1353:43:16;828:578:8;;;1561:47:16;;:::i;:::-;828:578:8;;;;;;;;;;;1645:18:16;828:578:8;;;;;2412:8:21;828:578:8;;;;;;;;;;;;;;1826:20:16;828:578:8;-1:-1:-1;828:578:8;;;;;1918:28:16;828:578:8;;;;1903:109:16;;;;828:578:8;1903:109:16;;;828:578:8;1903:109:16;;828:578:8;1903:109:16;;;;;;;828:578:8;1903:109:16;;;1230:85;828:578:8;;;;2063:68:16;2071:37;;;;2063:68;:::i;:::-;828:578:8;;;2146:32:16;;;;2219:46;828:578:8;;2142:313:16;2483:131;2142:313;;828:578:8;2557:22:16;828:578:8;;;;;2483:131:16;:::i;:::-;828:578:8;;4841:13:20;828:578:8;;-1:-1:-1;;828:578:8;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;2866:31:16;828:578:8;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;2866:31:16;828:578:8;;2917:33:16;828:578:8;2972:34:16;828:578:8;3035:14:16;828:578:8;;3035:14:16;;;;:::i;828:578:8:-;;;;-1:-1:-1;828:578:8;;;;;-1:-1:-1;;828:578:8;;;2866:31:16;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;2866:31:16;828:578:8;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;2142:313:16;2356:9;;;:13;828:578:8;;2409:18:16;828:578:8;;2142:313:16;2483:131;2142:313;;;828:578:8;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;1903:109:16;;;;828:578:8;1903:109:16;828:578:8;1903:109:16;;;;;;;:::i;:::-;;;;828:578:8;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;1230:85:16;1561:47;1230:85;;;;828:578:8;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;4474:36:26;828:578:8;;;;4474:36:26;;:::i;828:578:8:-;;;;;-1:-1:-1;;828:578:8;;;;;;5220:18:20;828:578:8;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;4975:26:26;828:578:8;4697:30:26;828:578:8;;4827:129:26;4664:130;828:578:8;;;;;;;:::i;:::-;;;;;;4741:43:26;4664:130;;:::i;:::-;828:578:8;;;;;;;;:::i;:::-;;;;;;4904:42:26;4827:129;;:::i;:::-;4975:26;;:::i;828:578:8:-;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;:::i;:::-;620:27:20;828:578:8;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;620:27:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;620:27:20;;;;828:578:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;620:27:20;;;;828:578:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;620:27:20;;;;828:578:8;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;-1:-1:-1;;828:578:8;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;4258:30:20;828:578:8;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;828:578:8;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;4751:18:26;828:578:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;4751:18:26;-1:-1:-1;828:578:8;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;:::o;:::-;4914:31:26;828:578:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;4914:31:26;-1:-1:-1;828:578:8;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;828:578:8;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;-1:-1:-1;;828:578:8;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6:20;828:578:8;;;;;576:6:20;828:578:8;:::o;:::-;;;;;;;;:::o;:::-;-1:-1:-1;828:578:8;2866:31:16;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;:::o;:::-;-1:-1:-1;828:578:8;2795:32:27;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;:::o;:::-;-1:-1:-1;828:578:8;576:6:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;:::o;:::-;-1:-1:-1;828:578:8;576:6:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;:::o;:::-;-1:-1:-1;828:578:8;1409:18:25;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;1095:30:16;828:578:8;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;:::i;:::-;;;;;;;;;;1095:30:16;;828:578:8;1095:30:16;;;828:578:8;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;:::i;:::-;;;;;;;;;1095:30:16;;;;828:578:8;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;:::i;:::-;;;;;;;;;1095:30:16;;;;828:578:8;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;828:578:8;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;-1:-1:-1;;828:578:8;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;-1:-1:-1;828:578:8;;;;;;;-1:-1:-1;;828:578:8;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;-1:-1:-1;828:578:8;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;-1:-1:-1;828:578:8;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;2727:717:20:-;;;828:578:8;2727:717:20;828:578:8;;;3100:25:20;828:578:8;;;;;;;3082:157:20;;;;;828:578:8;3082:157:20;;828:578:8;3100:25:20;3082:157;;828:578:8;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;3082:157:20;;;;;;;;;;;;;-1:-1:-1;;;;;3082:157:20;;;2727:717;828:578:8;;;;;3272:45:20;;828:578:8;;;;3272:45:20;828:578:8;;3272:45:20;;828:578:8;:::i;:::-;;;;;;3338:15:20;828:578:8;;3382:54:20;;;;2727:717;:::o;828:578:8:-;;;;-1:-1:-1;;;828:578:8;;;3100:25:20;828:578:8;;;;;;;;;;;;;;;;;3082:157:20;;;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3082:157:20;;;;;;;;828:578:8;;;;;;;;;;;;3082:157:20;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4304:439:20:-;828:578:8;4378:30:20;828:578:8;;;;;;;;4378:4:20;:56;;:4;;828:578:8;4378:30:20;4458:58;828:578:8;4479:24:20;828:578:8;;;;4458:58:20;;;;828:578:8;4458:58:20;;;;;;;;;-1:-1:-1;4458:58:20;;;4451:65;;:::o;4458:58::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;4374:362;4378:13;4538:55;4378:13;;:30;4617:57;828:578:8;4638:24:20;828:578:8;;;;4617:57:20;;;;828:578:8;4617:57:20;;;;;;;;;-1:-1:-1;4617:57:20;;;4610:64;;:::o;4534:202::-;-1:-1:-1;4707:17:20;:::o;2267:185:21:-;828:578:8;;;;;;-1:-1:-1;828:578:8;2412:8:21;828:578:8;;;-1:-1:-1;828:578:8;;-1:-1:-1;828:578:8;;;;-1:-1:-1;828:578:8;;2267:185:21;:::o;828:578:8:-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;882:113:20:-;828:578:8;950:22:20;828:578:8;;936:10:20;:36;828:578:8;;882:113:20:o;828:578:8:-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::o;608:523:21:-;;;828:578:8;;;;;;;-1:-1:-1;1018:56:21;;-1:-1:-1;;828:578:8;;;;833:8:21;828:578:8;;;;;;;;;;2839:5:4;828:578:8;;;;;2839:5:4;:::i;:::-;828:578:8;;;;;;;833:8:21;828:578:8;;;;;;;;;;;;;;1018:56:21;;;;;:::i;:::-;;;;608:523;:::o;1139:734::-;828:578:8;;;;;;-1:-1:-1;828:578:8;;;1370:8:21;828:578:8;;;;;;;;;;;;;;;;1463:32:21;;;828:578:8;;3206:5:4;;;;1757:59:21;3206:5:4;1757:59:21;3206:5:4;;;;:::i;:::-;828:578:8;;;;;;;1370:8:21;828:578:8;;;;;;;;;;;;;1757:59:21;;;;;:::i;828:578:8:-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;129:377:24;828:578:8;;;;;;;:::i;:::-;;;;;;265:43:24;828:578:8;;;;;;;:::i;:::-;;;;;;346:42:24;407:37;;;:90;;;;;399:99;;129:377;:::o;407:90::-;461:36;;129:377;-1:-1:-1;129:377:24:o;1529:832::-;;1730:97;1529:832;;1730:97;:::i;:::-;828:578:8;;;;;;;;;1867:18:24;828:578:8;;;;;;;;;:::i;:::-;;;;;;1940:43:24;1920:63;;:146;;;;1529:832;828:578:8;;;;;;;;;;:::i;:::-;;;;;;2150:43:24;2130:63;2150:43;;828:578:8;;;;;;;:::i;:::-;;;;;2217:43:24;2210:50;:::o;2126:228::-;828:578:8;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;1920:146:24;828:578:8;;;;;;;;:::i;:::-;;;;;;2024:42:24;2004:62;;1920:146;;3456:318;828:578:8;;;;;;;;:::i;:::-;;;;;;;3591:43:24;3571:63;828:578:8;;;;;;-1:-1:-1;3658:28:24;828:578:8;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3658:28:24;-1:-1:-1;828:578:8;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;-1:-1:-1;;828:578:8;;;;;;;;;;;;;;;;;;3567:200:24;828:578:8;;;;-1:-1:-1;3726:29:24;828:578:8;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3726:29:24;-1:-1:-1;828:578:8;;;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;828:578:8;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;733:876:26:-;;;828:578:8;954:13:26;828:578:8;;;;;;;;1014:47:26;954:13;993:176;1014:47;;;:115;;;;733:876;993:176;;:::i;:::-;1188:15;;828:578:8;;;;;;;;1237:32:26;;;;1233:212;;733:876;1466:54;1536:40;1466:54;;1536:40;1466:54;;;;;:::i;:::-;828:578:8;;;1536:40:26;;;;;:::i;1233:212::-;828:578:8;839:33:28;;-1:-1:-1;839:85:28;;;;1233:212:26;839:137:28;;;;1233:212:26;818:195:28;;;;;:::i;:::-;1736:25;;;:::i;:::-;828:578:8;;589:25:28;;;;:::i;:::-;828:578:8;;;645:40:28;;828:578:8;;;645:40:28;;;828:578:8;1386:4:26;828:578:8;;;;645:40:28;;828:578:8;;;645:40:28;;828:578:8;;;;;;;645:40:28;;;;;;;;-1:-1:-1;645:40:28;;;1233:212:26;645:49:28;;828:578:8;;;;;;-1:-1:-1;828:578:8;;;1843:50:28;;;;;828:578:8;1843:50:28;;828:578:8;645:40:28;1843:50;;828:578:8;1386:4:26;828:578:8;;;;;;;;;;1843:50:28;;;;;;1536:40:26;1843:50:28;1822:112;1843:50;-1:-1:-1;1843:50:28;;;1233:212:26;1822:112:28;;;:::i;:::-;1233:212:26;;;1843:50:28;;;;;;-1:-1:-1;1843:50:28;;;;;;:::i;:::-;;;;;828:578:8;;;;;;-1:-1:-1;;;828:578:8;;645:40:28;828:578:8;;;;;;;;;;;;;;645:40:28;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;;;;645:40:28;;;;;;;;839:137;828:578:8;;;;818:195:28;839:137;;;;:85;954:13:26;892:32:28;;;-1:-1:-1;839:85:28;;828:578:8;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;1014:115:26;1098:31;1081:48;;;;1014:115;;;828:578:8;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;828:578:8;;;;:::o;:::-;;;:::o;3151:854:26:-;;3333:101;;;;;:::i;:::-;828:578:8;;;;;;;3449:32:26;;;828:578:8;3540:86:26;828:578:8;3540:86:26;828:578:8;3561:24:26;828:578:8;;;;3540:86:26;;;;828:578:8;3540:86:26;;;;;;;;;;3460:21;3540:86;;;3445:477;828:578:8;3460:21:26;828:578:8;;;;;;;3515:155:26;;;;:::i;:::-;;828:578:8;;;3937:33:26;3445:477;828:578:8;3445:477:26;;828:578:8;;;;;;;;;3937:33:26;3151:854;:::o;828:578:8:-;;;;-1:-1:-1;;;828:578:8;;3540:86:26;;828:578:8;;;;;;;;;;;;;;3540:86:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;3460:21:26;828:578:8;;;;;;;;:::i;:::-;3540:86:26;;;;;;;;;;;-1:-1:-1;3540:86:26;;3445:477;3735:32;828:578:8;3735:32:26;;3746:21;3937:33;3735:32;;3731:191;3746:21;;;3800:12;;;;:::i;:::-;3445:477;;3731:191;828:578:8;3834:33:26;3445:477;3830:92;3898:12;;;:::i;502:1006:17:-;828:578:8;;;630:24:17;828:578:8;;;;;;609:57:17;;;;828:578:8;609:57:17;;;;;;;;;;;;;;;;;;602:111;609:57;;;-1:-1:-1;609:57:17;;;502:1006;828:578:8;;690:15:17;828:578:8;;-1:-1:-1;828:578:8;;;602:111:17;;;;;;828:578:8;602:111:17;;;;;828:578:8;;;;;;;;;;;;;;;;;602:111:17;;828:578:8;;602:111:17;;;;;;;;502:1006;854:17;;;:::i;:::-;828:578:8;;630:24:17;828:578:8;;;;;;;886:58:17;;;;;;;;;;;;;;;;-1:-1:-1;886:58:17;;;502:1006;828:578:8;;;;;;;;;984:62:17;;;;-1:-1:-1;984:62:17;;;828:578:8;984:62:17;;;;;;;-1:-1:-1;984:62:17;;;502:1006;828:578:8;;820:278:17;828:578:8;;;;;;820:278:17;;:::i;:::-;828:578:8;630:24:17;828:578:8;;;;;1175:58:17;;;;;;;;;;;;;;;-1:-1:-1;1175:58:17;;;502:1006;1248:26;;;;828:578:8;1374:1:17;1248:26;;;:::i;:::-;828:578:8;;;1314:62:17;;;;;;;;;828:578:8;1314:62:17;;;;;;;;-1:-1:-1;1314:62:17;;;502:1006;828:578:8;;;1141:289:17;828:578:8;;1480:19:17;828:578:8;;;1141:289:17;;:::i;:::-;1480:19;:::i;1314:62::-;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;-1:-1:-1;828:578:8;;1480:19:17;1314:62;;;;;;;;828:578:8;;-1:-1:-1;828:578:8;;;;;1175:58:17;;;;;;;;;828:578:8;1175:58:17;1374:1;1175:58;;;;;;;;;;:::i;:::-;;;;;;;;;;828:578:8;;;-1:-1:-1;828:578:8;;;;;984:62:17;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;-1:-1:-1;828:578:8;;820:278:17;984:62;;;;;;;;828:578:8;;;-1:-1:-1;828:578:8;;;;;886:58:17;;;;;;;;;;;;;;;:::i;:::-;;;;;;828:578:8;;;-1:-1:-1;828:578:8;;;;;602:111:17;;;;;;;;;;;;;:::i;:::-;;;;;;828:578:8;;;-1:-1:-1;828:578:8;;;;;609:57:17;;;;;;;;;;;;;;:::i;:::-;;;;1516:215;1666:57;;828:578:8;1687:24:17;828:578:8;;;;1666:57:17;;;;828:578:8;1666:57:17;;;;;;;;;-1:-1:-1;1666:57:17;;;1659:64;1516:215;:::o;1913:1252::-;2226:15;828:578:8;;;;2158:94:17;;2206:4;2158:94;;;828:578:8;;;;;;;;;;;;;;;;;2158:94:17;828:578:8;;;;2158:94:17;;;;;;;;-1:-1:-1;2158:94:17;;;1913:1252;2267:20;;2263:112;;1913:1252;2481:15;2499:2;2481:15;828:578:8;2481:15:17;;;828:578:8;;;;2226:15:17;828:578:8;;;;;;;;;;;;;;;;;;;;;;2158:94:17;2739:378;;828:578:8;;;;;;2739:378:17;;828:578:8;;;;;2739:378:17;;;2206:4;;828:578:8;;2739:378:17;;;828:578:8;;;2739:378:17;;;828:578:8;;;2739:378:17;;;828:578:8;-1:-1:-1;828:578:8;;;2739:378:17;;-1:-1:-1;828:578:8;;;;2679:449:17;;;;;828:578:8;2679:449:17;;828:578:8;;;;2158:94:17;2679:449;;828:578:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2739:378:17;828:578:8;;;;;;;2679:449:17;;-1:-1:-1;828:578:8;2679:449:17;2158:94;2679:449;;;;;;;-1:-1:-1;2679:449:17;;;3141:16;1913:1252;:::o;2679:449::-;;2158:94;2679:449;;2158:94;2679:449;;;;;;2158:94;2679:449;;;:::i;:::-;;;828:578:8;;;;;;1913:1252:17;:::o;2679:449::-;;;-1:-1:-1;2679:449:17;;2263:112;828:578:8;;2304:59:17;828:578:8;2304:59:17;;2158:94;2304:59;;828:578:8;-1:-1:-1;;828:578:8;;;;2158:94:17;2304:59;828:578:8;2304:59:17;-1:-1:-1;2304:59:17;;;;;;;;2263:112;2304:59;;;2158:94;2304:59;2158:94;2304:59;;;;;;;:::i;:::-;;;2263:112;;2158:94;;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;;;;2158:94:17;;;;;;-1:-1:-1;2158:94:17;;180:227:18;828:578:8;;287:24:18;828:578:8;;;;266:58:18;;;828:578:8;266:58:18;;;;;;;;;;;;;;;;;-1:-1:-1;266:58:18;;;180:227;828:578:8;;;-1:-1:-1;828:578:8;;260:95:18;;;;;828:578:8;260:95:18;;266:58;260:95;;828:578:8;;260:95:18;;;;;;;-1:-1:-1;260:95:18;;;180:227;828:578:8;;;;180:227:18;:::o;828:578:8:-;;;;;;-1:-1:-1;;;828:578:8;;266:58:18;828:578:8;;;;;;;;;;;;;;260:95:18;;;;;;;;;;;;;;:::i;:::-;;;;266:58;828:578:8;266:58:18;;;;;;;;;;;;;;;:::i;:::-;;;;;650:157;741:58;;828:578:8;762:24:18;828:578:8;;;;741:58:18;;;;828:578:8;741:58:18;;;;;;;;;-1:-1:-1;741:58:18;;;734:65;650:157;:::o;1615:1193:26:-;;;;828:578:8;1936:13:26;828:578:8;;;;;;;;2065:47:26;1936:13;2044:176;2065:47;;;:115;;;;2044:176;;:::i;:::-;828:578:8;;;;;;2295:32:26;;;-1:-1:-1;2465:35:26;;;;;;;;;;;2291:301;828:578:8;;2465:35:26;;;;;2734:41;2291:301;;2734:41;2664:55;;;;;:::i;2465:35::-;;;-1:-1:-1;2465:35:26;;2291:301;828:578:8;;839:33:28;;-1:-1:-1;839:85:28;;;;2291:301:26;839:137:28;;;;2291:301:26;818:195:28;;1432:53;818:195;;1432:53;818:195;;:::i;:::-;828:578:8;1439:25:28;;;:::i;:::-;828:578:8;;-1:-1:-1;828:578:8;;1432:53:28;;;;;;828:578:8;1432:53:28;;;;;828:578:8;;;;;;;;;;;;;;;;;1432:53:28;;;;;;;;;;2734:41:26;1432:53:28;1411:115;1432:53;-1:-1:-1;1432:53:28;;;2291:301:26;1411:115:28;;:::i;:::-;2291:301:26;;1432:53:28;;;;;;;;;;;;;;:::i;:::-;;;;839:137;828:578:8;;;;-1:-1:-1;839:137:28;;;:85;1936:13:26;892:32:28;;;-1:-1:-1;839:85:28;;8634:597:26;;8827:93;8634:597;;8827:93;:::i;:::-;828:578:8;;;;;;;;8957:18:26;828:578:8;;;;;;;:::i;:::-;;;;;;9027:42:26;9007:62;;:145;;;;8634:597;828:578:8;;;8634:597:26;:::o;828:578:8:-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;9007:145:26;828:578:8;;;;;;;;:::i;:::-;;;;;;9109:43:26;9089:63;;9007:145;;828:578:8;;;;:::o;:::-;;;;-1:-1:-1;;;828:578:8;;;;;;;;;;;;;;;;;;98:307:28;828:578:8;;;;;;222:21:28;211:32;;207:70;;828:578:8;291:33:28;287:84;;-1:-1:-1;98:307:28;:::o;287:84::-;345:26;;:::i;207:70::-;252:25;;;:::i;1947:1039::-;;828:578:8;;;2138:24:28;828:578:8;;;;;;2117:78:28;828:578:8;2117:78:28;;;;;;;;;;;;;;;;-1:-1:-1;2117:78:28;;;1947:1039;828:578:8;;;;;;;2320:32:28;;2316:191;;-1:-1:-1;2552:21:28;2541:32;;;2540:115;;;;2117:78;2589:25;;;:::i;:::-;2540:115;;828:578:8;;2670:21:28;;;;828:578:8;2670:21:28;;;;;;;;;-1:-1:-1;2670:21:28;;;2540:115;828:578:8;;2666:127:28;;2803:177;;;;;;2807:32;;;2872:5;;;;:::i;2803:177::-;828:578:8;2899:33:28;2895:85;;2803:177;;1947:1039::o;2895:85::-;2963:5;;;:::i;2666:127::-;2716:46;828:578:8;;;;;;-1:-1:-1;828:578:8;;;;;2716:46:28;;;;;;;828:578:8;2716:46:28;;828:578:8;2117:78:28;2716:46;;828:578:8;;;;;;;;;;;;;;;;;2716:46:28;;828:578:8;;2716:46:28;;;;;;;;;;2776:7;;:::o;2716:46::-;;;;;;-1:-1:-1;2716:46:28;;;;;;:::i;2670:21::-;;;;;;;;;;;;;;:::i;:::-;;;;2540:115;2117:78;2629:26;;;:::i;:::-;2540:115;;;2316:191;-1:-1:-1;828:578:8;;;;;;;;;;;;;;;2386:41:28;;;;:::i;:::-;;828:578:8;;;2490:7:28;;:::o;828:578:8:-;;;;;;-1:-1:-1;;;828:578:8;;2117:78:28;828:578:8;;;;;;;;;;;;;;2117:78:28;;;;;;;;;;;;;;;;:::i;:::-;;;828:578:8;;;;;;;;:::i;:::-;2117:78:28;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"4404800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptPost(bytes,address,bytes32,uint8,uint256)":"infinite","addStake(uint8,uint256,bytes32)":"infinite","createPost(bytes,uint8,uint8,uint256,uint256,uint8,bytes,address,bytes32)":"infinite","finalizePost(bool,uint256,bytes32)":"infinite","getBuyerStake()":"infinite","getHashedVaultId(bytes,address,bytes32)":"infinite","getMessage(bytes,address,bytes32)":"infinite","getPaymentRequested()":"2764","getSellerStake()":"infinite","getStake(uint8,bytes32)":"2564","getStakeRequested()":"2827","getStatus()":"2587","getTelegramIds(bytes32)":"infinite","getTokenId()":"2304","getTokenIdAddress()":"infinite","getTotalStaked()":"infinite","getVaultIdSecret(bytes32)":"infinite","owner()":"2632","post()":"infinite","postCount()":"2324","renouncePost(bytes,address,bytes32)":"infinite","revealData(bytes,bytes,address,bytes32)":"infinite","submitHash(bytes,bytes,address,bytes32)":"infinite","takeFullStake(uint8,bytes,address,bytes32)":"infinite","takeStake(uint8,uint256,bytes,address,bytes32)":"infinite","version()":"infinite","write(bytes,bytes32)":"infinite"}},"methodIdentifiers":{"acceptPost(bytes,address,bytes32,uint8,uint256)":"200f852c","addStake(uint8,uint256,bytes32)":"b52d2ce4","createPost(bytes,uint8,uint8,uint256,uint256,uint8,bytes,address,bytes32)":"402e3e0b","finalizePost(bool,uint256,bytes32)":"8f287dc2","getBuyerStake()":"4c38d877","getHashedVaultId(bytes,address,bytes32)":"e02cfa4c","getMessage(bytes,address,bytes32)":"9f8b4359","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStake(uint8,bytes32)":"1b9f0a43","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTelegramIds(bytes32)":"3258d15c","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","getVaultIdSecret(bytes32)":"9d8cc89a","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","renouncePost(bytes,address,bytes32)":"3a4fb8b7","revealData(bytes,bytes,address,bytes32)":"30a0680c","submitHash(bytes,bytes,address,bytes32)":"b43f4f75","takeFullStake(uint8,bytes,address,bytes32)":"4828000c","takeStake(uint8,uint256,bytes,address,bytes32)":"de5d7165","version()":"54fd4d50","write(bytes,bytes32)":"83dd1743"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_owner\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"getHashedVaultId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getTelegramIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getVaultIdSecret\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodeMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"write\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/MecenateFeed.sol\":\"MecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/features/MecenateFeed.sol\":{\"content\":\"/**\\r\\n * @title MecenateFeed\\r\\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\\r\\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\\r\\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../modules/Events.sol\\\";\\r\\nimport \\\"../modules/Creation.sol\\\";\\r\\nimport \\\"../modules/Acceptance.sol\\\";\\r\\nimport \\\"../modules/Submission.sol\\\";\\r\\nimport \\\"../modules/Finalization.sol\\\";\\r\\nimport \\\"../modules/Renounce.sol\\\";\\r\\nimport \\\"../modules/Message.sol\\\";\\r\\n\\r\\ncontract MecenateFeed is\\r\\n    Events,\\r\\n    Message,\\r\\n    Creation,\\r\\n    Acceptance,\\r\\n    Renounce,\\r\\n    Submission,\\r\\n    Finalization\\r\\n{\\r\\n    constructor(\\r\\n        bytes32 _owner,\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    )\\r\\n        Data(\\r\\n            _usersModuleContract,\\r\\n            _verifierContract,\\r\\n            _vaultContract,\\r\\n            _factoryContract,\\r\\n            _version\\r\\n        )\\r\\n    {\\r\\n        owner = _owner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe257a05e9ecbae7e44b5701894ea7eb2f603f5899a90a5ac238f863ae01fe254\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce,\\n        Structures.Tokens tokenId,\\n        uint256 _paymentAmount\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : _paymentAmount;\\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\\n\\n        // Get encryptedVaultId only once\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n\\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(tokenId, sellerVaultIdHash);\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n        require(encryptedVaultId != sellerVaultIdHash, \\\"YOU_ARE_THE_SELLER\\\");\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                _paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n            require(_paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            amountToAdd\\n        );\\n\\n        // Update all at once\\n        post.postdata.escrow.payment = payment;\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        // Update private settings\\n        postSettingPrivate.vaultIdBuyer = vaultId;\\n        postSettingPrivate.buyerTwitterId = twitterId;\\n        postSettingPrivate.buyerTelegramId = telegramId;\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0x1ee10891fa2428c8faef53f5661f6c9fbb2373b498beb073d8687a8eda229d7c\",\"license\":\"MIT\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n\\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        // Early exit conditions\\n        require(encryptedVaultId == owner, \\\"NOT_OWNER\\\");\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n        uint256 stake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            stakeAmount\\n        );\\n\\n        // Change status to Proposed\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: Structures.User({vaultId: encryptedVaultId}),\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n        settings.postCount++;\\n\\n        postSettingPrivate.vaultIdSeller = vaultId;\\n        postSettingPrivate.sellerTwitterId = twitterId;\\n        postSettingPrivate.sellerTelegramId = telegramId;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b18bf2fc0c3db7df301c2a8840befe3c5e754dee8e358058eee4f3025f3d1d\",\"license\":\"MIT\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\nabstract contract Finalization is Staking {\\r\\n    function finalizePost(\\r\\n        bool valid,\\r\\n        uint256 punishment,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n        require(\\r\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\r\\n            \\\"NOT_SUBMITTED\\\"\\r\\n        );\\r\\n        require(\\r\\n            keccak256(postSettingPrivate.vaultIdBuyer) == encryptedVaultId,\\r\\n            \\\"VAULTID_NOT_MATCH\\\"\\r\\n        );\\r\\n\\r\\n        // Common contract addresses and variables\\r\\n        address treasuryContract = IMecenateFeedFactory(\\r\\n            settings.factoryContract\\r\\n        ).treasuryContract();\\r\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\r\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\r\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\r\\n\\r\\n        // Variables for stake changes\\r\\n        uint256 buyerStake;\\r\\n        uint256 sellerStake;\\r\\n\\r\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\r\\n            // Code for both the timeout and the valid case\\r\\n            buyerStake = Deposit._decreaseDeposit(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n                post.postdata.escrow.payment\\r\\n            );\\r\\n\\r\\n            sellerStake = Deposit._increaseDeposit(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdSeller),\\r\\n                amountToAdd\\r\\n            );\\r\\n\\r\\n            TokenManager._burn(\\r\\n                post.postdata.settings.tokenId,\\r\\n                treasuryContract,\\r\\n                buyerFee\\r\\n            );\\r\\n\\r\\n            // Update status and stakes\\r\\n            post.postdata.escrow.stake = sellerStake;\\r\\n            post.postdata.escrow.payment = buyerStake;\\r\\n            _changeStatus(\\r\\n                valid\\r\\n                    ? Structures.PostStatus.Finalized\\r\\n                    : Structures.PostStatus.Punished\\r\\n            );\\r\\n\\r\\n            emit Valid(post);\\r\\n        } else if (!valid) {\\r\\n            require(\\r\\n                punishment <= post.postdata.escrow.stake,\\r\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\r\\n            );\\r\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\r\\n\\r\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\r\\n            uint256 totalPunishmentFee = penalty + punishment;\\r\\n\\r\\n            TokenManager._burn(\\r\\n                post.postdata.settings.tokenId,\\r\\n                treasuryContract,\\r\\n                totalPunishmentFee\\r\\n            );\\r\\n\\r\\n            post.postdata.escrow.payment = _burnStake(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n                penalty\\r\\n            );\\r\\n\\r\\n            post.postdata.escrow.stake = _burnStake(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdSeller),\\r\\n                punishment\\r\\n            );\\r\\n\\r\\n            // Update status and penalties\\r\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\r\\n            post.postdata.escrow.punishment = punishment;\\r\\n            post.postdata.escrow.penalty = penalty;\\r\\n\\r\\n            _changeStatus(Structures.PostStatus.Punished);\\r\\n\\r\\n            emit Invalid(post);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd57ab8fde1f9740dad2b30b2c9d14340a8fa12c127bb0428c68a2828b67255b0\",\"license\":\"MIT\"},\"contracts/modules/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract Message is Events {\\r\\n    function _isSellerOrBuyer(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal view returns (bool) {\\r\\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        bytes32 buyerVaultIdHash = keccak256(postSettingPrivate.vaultIdBuyer);\\r\\n        return (encryptedVaultId == sellerVaultIdHash ||\\r\\n            encryptedVaultId == buyerVaultIdHash);\\r\\n    }\\r\\n\\r\\n    function getVaultIdSecret(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external view virtual returns (bytes memory) {\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        return postSettingPrivate.vaultIdSeller;\\r\\n    }\\r\\n\\r\\n    function getTelegramIds(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external view returns (uint256, uint256) {\\r\\n        require(\\r\\n            postSettingPrivate.buyerTelegramId != 0,\\r\\n            \\\"NO_TELEGRAM_ID_FOR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            postSettingPrivate.sellerTelegramId != 0,\\r\\n            \\\"NO_TELEGRAM_ID_FOR_SELLER\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\\r\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n            \\\"NOT_THE_SELLER_OR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        return (\\r\\n            uint160(postSettingPrivate.buyerTelegramId),\\r\\n            uint160(postSettingPrivate.sellerTelegramId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getHashedVaultId(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes32) {\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\\r\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n            \\\"NOT_SELLER_OR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            return keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        } else {\\r\\n            return keccak256(postSettingPrivate.vaultIdBuyer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function write(\\r\\n        bytes memory encodeMessage,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        _writeMessage(encodeMessage, encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function _writeMessage(\\r\\n        bytes memory encodeMessage,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal {\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            settings.lastMessageForBuyer = encodeMessage;\\r\\n        } else {\\r\\n            settings.lastMessageForSeller = encodeMessage;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMessage(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes memory) {\\r\\n        bytes32 encryptedVaultId = _getEncryptedVaultId(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        return _getMessage(encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function _getMessage(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            return settings.lastMessageForBuyer;\\r\\n        } else {\\r\\n            return settings.lastMessageForSeller;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getEncryptedVaultId(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal virtual returns (bytes32) {\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        return keccak256(vaultId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae6ab535a4de2bf0e41c136a0af6b641b2b5d0bac79bf19a6ce5811b6b1635f4\",\"license\":\"MIT\"},\"contracts/modules/Renounce.sol\":{\"content\":\"/**\\r\\n * @title Renounce\\r\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\r\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\r\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\r\\n * The post struct is reset and the post status is updated to Renounced.\\r\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\nabstract contract Renounce is Staking {\\r\\n    function renouncePost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external {\\r\\n        onlyVault();\\r\\n\\r\\n        // Validate the post status\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\r\\n\\r\\n        // Verify the nonce and get the vault ID\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        // Confirm that the caller is the seller\\r\\n        bytes32 sellerVaultId = keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        require(encryptedVaultId == sellerVaultId, \\\"NOT_SELLER\\\");\\r\\n\\r\\n        // Reset post and post settings\\r\\n        post = Structures.Post(\\r\\n            Structures.User({vaultId: bytes32(0)}),\\r\\n            Structures.PostData({\\r\\n                settings: Structures.PostSettings({\\r\\n                    status: Structures.PostStatus.Renounced,\\r\\n                    postType: Structures.PostType.Text,\\r\\n                    creationTimeStamp: 0,\\r\\n                    endTimeStamp: 0,\\r\\n                    duration: 0,\\r\\n                    tokenId: Structures.Tokens.NaN\\r\\n                }),\\r\\n                escrow: Structures.PostEscrow({\\r\\n                    stake: 0,\\r\\n                    payment: 0,\\r\\n                    punishment: 0,\\r\\n                    penalty: 0\\r\\n                }),\\r\\n                data: Structures.PostEncryptedData({\\r\\n                    encryptedData: \\\"\\\",\\r\\n                    encryptedKey: \\\"\\\",\\r\\n                    decryptedData: \\\"\\\"\\r\\n                })\\r\\n            })\\r\\n        );\\r\\n\\r\\n        postSettingPrivate.vaultIdBuyer = ZEROHASH;\\r\\n        postSettingPrivate.buyerTwitterId = 0;\\r\\n        postSettingPrivate.buyerTelegramId = 0;\\r\\n        postSettingPrivate.vaultIdSeller = ZEROHASH;\\r\\n        postSettingPrivate.sellerTwitterId = 0;\\r\\n        postSettingPrivate.sellerTelegramId = 0;\\r\\n\\r\\n        // Emit event\\r\\n        emit Renounced(post);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa7bc56c903a41fd35f880954f2141c9873372d4b3a492c312a069dabfb2a3fe6\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            TokenManager._transferFrom(\\n                tokenId,\\n                funder,\\n                address(this),\\n                amountToAdd\\n            );\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            TokenManager._transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(\\n                IMecenateFeedFactory(settings.factoryContract)\\n                    .treasuryContract()\\n            ).call{value: amountToBurn}(\\\"\\\");\\n            require(result, \\\"CALL_FAILED\\\");\\n        } else if (tokenId == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(amountToBurn);\\n        } else if (tokenId == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(amountToBurn);\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x18db8d86d1cc124574f7d4aafd684f32e4c11f95d2661469551177212c372e5a\"},\"contracts/modules/Submission.sol\":{\"content\":\"/**\\r\\n * @title Submission\\r\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract Submission is Events {\\r\\n    function submitHash(\\r\\n        bytes memory encryptedKey,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(\\r\\n            validStatuses[uint8(currentStatus)] &&\\r\\n                (currentStatus == Structures.PostStatus.Accepted ||\\r\\n                    currentStatus == Structures.PostStatus.Submitted),\\r\\n            \\\"WRONG_STATUS\\\"\\r\\n        );\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\r\\n                encryptedVaultId\\r\\n            ),\\r\\n            \\\"User does not exist\\\"\\r\\n        );\\r\\n        require(post.creator.vaultId == encryptedVaultId, \\\"NOT_SELLER\\\");\\r\\n\\r\\n        _changeStatus(Structures.PostStatus.Submitted);\\r\\n\\r\\n        settings.encodedSymKey = post.postdata.data.encryptedKey = encryptedKey;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\r\\n        post.postdata.settings.endTimeStamp =\\r\\n            block.timestamp +\\r\\n            post.postdata.settings.duration;\\r\\n\\r\\n        emit Valid(post);\\r\\n    }\\r\\n\\r\\n    function revealData(\\r\\n        bytes memory decryptedData,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes memory) {\\r\\n        onlyVault();\\r\\n\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(\\r\\n            validStatuses[uint8(currentStatus)] &&\\r\\n                (currentStatus == Structures.PostStatus.Submitted ||\\r\\n                    currentStatus == Structures.PostStatus.Revealed ||\\r\\n                    currentStatus == Structures.PostStatus.Finalized),\\r\\n            \\\"INVALID_STATUS\\\"\\r\\n        );\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId != keccak256(postSettingPrivate.vaultIdSeller),\\r\\n            \\\"YOU_ARE_THE_SELLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            currentStatus == Structures.PostStatus.Finalized,\\r\\n            \\\"NOT_FINALIZED\\\"\\r\\n        );\\r\\n\\r\\n        post.postdata.data.decryptedData = decryptedData;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\r\\n\\r\\n        emit MadePublic(post);\\r\\n\\r\\n        return decryptedData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd666d9af971b6bf265d28cd01e6e931807beaa73235dc622006608040aa8aa33\",\"license\":\"MIT\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"},{"astId":3754,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"_deposit","offset":0,"slot":"33","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMUSE.sol":{"IMUSE":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","mint(uint256)":"a0712d68","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMUSE.sol\":\"IMUSE\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateFeed.sol":{"IMecenateFeed":{"abi":[{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"},{"internalType":"enum Structures.Tokens","name":"","type":"uint8"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptPost(bytes,address,bytes32,uint8,uint256)":"200f852c","getBuyerStake()":"4c38d877","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTotalStaked()":"0917e776","owner()":"8da5cb5b","postCount()":"17906c2e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateFeed.sol\":\"IMecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateFeedFactory.sol":{"IMecenateFeedFactory":{"abi":[{"inputs":[],"name":"burnEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daiToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeds","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"tokenId","type":"uint8"}],"name":"getRouterFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"identityContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_feed","type":"address"}],"name":"isFeed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"museToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"router","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryContract","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wethToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burnEnabled()":"5dc96d16","contractCounter()":"067bd3b4","daiToken()":"be22f546","feeds()":"d63605b8","getRouterFee(uint8)":"d223a564","identityContract()":"67031bae","isFeed(address)":"e58fdd04","museToken()":"f77800e5","owner()":"8da5cb5b","router()":"f887ea40","treasuryContract()":"18da0011","wethToken()":"4b57b0be"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateFeedFactory.sol\":\"IMecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateTreasury.sol":{"IMecenateTreasury":{"abi":[{"inputs":[],"name":"fixedFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fixedFee()":"91792d5b","globalFee()":"808fc206"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateTreasury.sol\":\"IMecenateTreasury\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateUsers.sol":{"IMecenateUsers":{"abi":[{"inputs":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"name":"checkifUserExist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getUserAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUserCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserData","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getUserVaultIdAt","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkifUserExist(bytes32)":"38aad32c","getUserAt(uint256)":"c6e064ad","getUserCount()":"b5cb15f7","getUserData(address)":"ffc9896b","getUserVaultIdAt(uint256)":"5b5cf50a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserVaultIdAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateUsers.sol\":\"IMecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateVerifier.sol":{"IMecenateVerifier":{"abi":[{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"sismoVerify","outputs":[{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"sismoVerify(bytes,address,bytes32)":"7276069d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateVerifier.sol\":\"IMecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/library/Structures.sol":{"Structures":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220c71e300915efd18acf056f7e41a330f0dc545254f67f8445ae0b68fa02d2100264736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0x1E ADDRESS MULMOD ISZERO 0xEF 0xD1 DUP11 0xCF SDIV PUSH16 0x7E41A330F0DC545254F67F8445AE0B68 STATICCALL MUL 0xD2 LT MUL PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"144:3880:15:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220c71e300915efd18acf056f7e41a330f0dc545254f67f8445ae0b68fa02d2100264736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0x1E ADDRESS MULMOD ISZERO 0xEF 0xD1 DUP11 0xCF SDIV PUSH16 0x7E41A330F0DC545254F67F8445AE0B68 STATICCALL MUL 0xD2 LT MUL PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"144:3880:15:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/Structures.sol\":\"Structures\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Acceptance.sol":{"Acceptance":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"_paymentAmount","type":"uint256"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"staker","type":"bytes32"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToTake","type":"uint256"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptPost(bytes,address,bytes32,uint8,uint256)":"200f852c","addStake(uint8,uint256,bytes32)":"b52d2ce4","getBuyerStake()":"4c38d877","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStake(uint8,bytes32)":"1b9f0a43","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,bytes,address,bytes32)":"4828000c","takeStake(uint8,uint256,bytes,address,bytes32)":"de5d7165","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Acceptance.sol\":\"Acceptance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce,\\n        Structures.Tokens tokenId,\\n        uint256 _paymentAmount\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : _paymentAmount;\\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\\n\\n        // Get encryptedVaultId only once\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n\\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(tokenId, sellerVaultIdHash);\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n        require(encryptedVaultId != sellerVaultIdHash, \\\"YOU_ARE_THE_SELLER\\\");\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                _paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n            require(_paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            amountToAdd\\n        );\\n\\n        // Update all at once\\n        post.postdata.escrow.payment = payment;\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        // Update private settings\\n        postSettingPrivate.vaultIdBuyer = vaultId;\\n        postSettingPrivate.buyerTwitterId = twitterId;\\n        postSettingPrivate.buyerTelegramId = telegramId;\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0x1ee10891fa2428c8faef53f5661f6c9fbb2373b498beb073d8687a8eda229d7c\",\"license\":\"MIT\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            TokenManager._transferFrom(\\n                tokenId,\\n                funder,\\n                address(this),\\n                amountToAdd\\n            );\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            TokenManager._transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(\\n                IMecenateFeedFactory(settings.factoryContract)\\n                    .treasuryContract()\\n            ).call{value: amountToBurn}(\\\"\\\");\\n            require(result, \\\"CALL_FAILED\\\");\\n        } else if (tokenId == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(amountToBurn);\\n        } else if (tokenId == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(amountToBurn);\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x18db8d86d1cc124574f7d4aafd684f32e4c11f95d2661469551177212c372e5a\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"},{"astId":3754,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"_deposit","offset":0,"slot":"33","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/BurnDAI.sol":{"BurnDAI":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/BurnDAI.sol\":\"BurnDAI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/BurnMUSE.sol":{"BurnMUSE":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/BurnMUSE.sol\":\"BurnMUSE\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Creation.sol":{"Creation":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedHash","type":"bytes"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"enum Structures.PostDuration","name":"postDuration","type":"uint8"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"createPost","outputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"staker","type":"bytes32"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToTake","type":"uint256"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,uint256,bytes32)":"b52d2ce4","createPost(bytes,uint8,uint8,uint256,uint256,uint8,bytes,address,bytes32)":"402e3e0b","getBuyerStake()":"4c38d877","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStake(uint8,bytes32)":"1b9f0a43","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,bytes,address,bytes32)":"4828000c","takeStake(uint8,uint256,bytes,address,bytes32)":"de5d7165","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Creation.sol\":\"Creation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n\\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        // Early exit conditions\\n        require(encryptedVaultId == owner, \\\"NOT_OWNER\\\");\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n        uint256 stake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            stakeAmount\\n        );\\n\\n        // Change status to Proposed\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: Structures.User({vaultId: encryptedVaultId}),\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n        settings.postCount++;\\n\\n        postSettingPrivate.vaultIdSeller = vaultId;\\n        postSettingPrivate.sellerTwitterId = twitterId;\\n        postSettingPrivate.sellerTelegramId = telegramId;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b18bf2fc0c3db7df301c2a8840befe3c5e754dee8e358058eee4f3025f3d1d\",\"license\":\"MIT\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            TokenManager._transferFrom(\\n                tokenId,\\n                funder,\\n                address(this),\\n                amountToAdd\\n            );\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            TokenManager._transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(\\n                IMecenateFeedFactory(settings.factoryContract)\\n                    .treasuryContract()\\n            ).call{value: amountToBurn}(\\\"\\\");\\n            require(result, \\\"CALL_FAILED\\\");\\n        } else if (tokenId == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(amountToBurn);\\n        } else if (tokenId == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(amountToBurn);\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x18db8d86d1cc124574f7d4aafd684f32e4c11f95d2661469551177212c372e5a\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Creation.sol:Creation","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Creation.sol:Creation","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Creation.sol:Creation","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Creation.sol:Creation","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Creation.sol:Creation","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Creation.sol:Creation","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"},{"astId":3754,"contract":"contracts/modules/Creation.sol:Creation","label":"_deposit","offset":0,"slot":"33","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Creation.sol:Creation","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Creation.sol:Creation","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Creation.sol:Creation","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Creation.sol:Creation","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Creation.sol:Creation","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Creation.sol:Creation","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Creation.sol:Creation","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Creation.sol:Creation","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Creation.sol:Creation","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Creation.sol:Creation","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Creation.sol:Creation","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Creation.sol:Creation","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Creation.sol:Creation","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Creation.sol:Creation","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Creation.sol:Creation","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Creation.sol:Creation","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Creation.sol:Creation","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Creation.sol:Creation","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Creation.sol:Creation","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Creation.sol:Creation","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Creation.sol:Creation","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Creation.sol:Creation","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Creation.sol:Creation","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Creation.sol:Creation","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Creation.sol:Creation","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Creation.sol:Creation","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Creation.sol:Creation","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Creation.sol:Creation","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Creation.sol:Creation","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Creation.sol:Creation","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Creation.sol:Creation","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Creation.sol:Creation","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Creation.sol:Creation","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Creation.sol:Creation","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Creation.sol:Creation","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Creation.sol:Creation","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Data.sol":{"Data":{"abi":[{"inputs":[{"internalType":"address","name":"_usersModuleContract","type":"address"},{"internalType":"address","name":"_verifierContract","type":"address"},{"internalType":"address","name":"_vaultContract","type":"address"},{"internalType":"address","name":"_factoryContract","type":"address"},{"internalType":"string","name":"_version","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract stores data related to Mecenate posts and provides functions to interact with it.","kind":"dev","methods":{},"title":"Data","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":1710,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":1841,"id":null,"parameterSlots":2,"returnSlots":0},"copy_literal_to_memory_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4":{"entryPoint":1731,"id":null,"parameterSlots":0,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1780,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":1674,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE CALLVALUE PUSH3 0x66F JUMPI PUSH3 0x124D DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x22 DUP3 DUP6 PUSH3 0x68A JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0xA0 DUP2 DUP4 SUB SLT PUSH3 0x66F JUMPI PUSH3 0x3D DUP2 PUSH3 0x6AE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH3 0x4D DUP3 DUP5 ADD PUSH3 0x6AE JUMP JUMPDEST PUSH3 0x5A DUP7 DUP6 ADD PUSH3 0x6AE JUMP JUMPDEST SWAP3 PUSH3 0x69 PUSH1 0x60 DUP7 ADD PUSH3 0x6AE JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP7 SWAP2 SWAP5 SWAP2 DUP8 DUP3 GT PUSH3 0x66F JUMPI ADD SWAP3 PUSH1 0x1F SWAP5 DUP9 DUP7 DUP7 ADD SLT ISZERO PUSH3 0x66F JUMPI DUP5 MLOAD DUP9 DUP2 GT PUSH3 0x674 JUMPI DUP11 MLOAD SWAP6 PUSH1 0x1F NOT SWAP11 PUSH3 0xB5 DUP8 DUP14 DUP12 DUP7 ADD AND ADD DUP10 PUSH3 0x68A JUMP JUMPDEST DUP3 DUP9 MSTORE DUP7 DUP4 DUP4 ADD ADD GT PUSH3 0x66F JUMPI DUP6 SWAP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH3 0x65A JUMPI POP POP PUSH1 0x0 SWAP2 DUP8 ADD ADD MSTORE PUSH8 0x16345785D8A0000 PUSH1 0x14 SSTORE PUSH1 0x0 PUSH1 0x15 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP8 DUP2 DUP1 SWAP5 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP8 AND DUP8 PUSH1 0x16 SLOAD AND OR PUSH1 0x16 SSTORE AND DUP6 PUSH1 0x18 SLOAD AND OR PUSH1 0x18 SSTORE AND DUP4 PUSH1 0x19 SLOAD AND OR PUSH1 0x19 SSTORE CALLER DUP4 PUSH1 0x17 SLOAD AND OR PUSH1 0x17 SSTORE DUP4 DUP11 MLOAD DUP1 SWAP3 PUSH4 0x3E21FA9 PUSH1 0xE6 SHL DUP3 MSTORE DUP2 PUSH1 0x4 SWAP11 DUP12 SWAP3 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH3 0x64F JUMPI PUSH1 0x0 SWAP2 PUSH3 0x60F JUMPI JUMPDEST POP AND SWAP1 PUSH1 0x1A SLOAD AND OR PUSH1 0x1A SSTORE PUSH3 0x166 PUSH3 0x6C3 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH3 0x4A6 JUMPI DUP2 SWAP1 PUSH3 0x180 PUSH1 0x1B SLOAD PUSH3 0x6F4 JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x5DC JUMPI JUMPDEST POP DUP4 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x571 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x565 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1B SSTORE JUMPDEST PUSH3 0x1C0 PUSH3 0x6C3 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH3 0x4A6 JUMPI DUP2 SWAP1 PUSH3 0x1DA PUSH1 0x1C SLOAD PUSH3 0x6F4 JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x532 JUMPI JUMPDEST POP DUP4 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x4C7 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x4BB JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1C SSTORE JUMPDEST PUSH3 0x21A PUSH3 0x6C3 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH3 0x4A6 JUMPI DUP2 SWAP1 PUSH3 0x234 PUSH1 0x1D SLOAD PUSH3 0x6F4 JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x473 JUMPI JUMPDEST POP DUP4 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x408 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x3FC JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1D SSTORE JUMPDEST PUSH1 0xFF NOT SWAP4 DUP5 PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE PUSH1 0x0 DUP1 MSTORE DUP4 DUP3 MSTORE PUSH3 0x15180 DUP9 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 SWAP5 DUP6 PUSH1 0x0 MSTORE PUSH3 0x3F480 DUP10 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x2 PUSH1 0x0 MSTORE PUSH3 0x93A80 DUP10 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH3 0x127500 DUP10 PUSH1 0x0 KECCAK256 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH3 0x278D00 DUP10 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x0 DUP1 MSTORE DUP3 DUP1 MSTORE DUP6 DUP10 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 MLOAD SWAP6 DUP7 GT PUSH3 0x3E7 JUMPI POP PUSH3 0x2EA PUSH1 0x1E SLOAD PUSH3 0x6F4 JUMP JUMPDEST DUP4 DUP2 GT PUSH3 0x3A9 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x33E JUMPI POP DUP4 SWAP5 POP SWAP1 DUP4 SWAP3 SWAP2 PUSH1 0x0 SWAP5 PUSH3 0x332 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1E SSTORE JUMPDEST MLOAD PUSH2 0xB02 SWAP1 DUP2 PUSH3 0x74B DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH3 0x311 JUMP JUMPDEST SWAP3 SWAP5 DUP5 SWAP1 DUP2 AND PUSH1 0x1E PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x38E JUMPI POP POP POP LT PUSH3 0x374 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1E SSTORE PUSH3 0x324 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x365 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x352 JUMP JUMPDEST PUSH3 0x3D6 SWAP1 PUSH1 0x1E PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP10 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP6 DUP11 LT PUSH3 0x3DD JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x731 JUMP JUMPDEST CODESIZE PUSH3 0x2F3 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x3CA JUMP JUMPDEST PUSH1 0x41 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x254 JUMP JUMPDEST SWAP2 DUP10 AND SWAP2 PUSH1 0x1D PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH3 0x45C JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x442 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1D SSTORE PUSH3 0x26A JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x433 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x419 JUMP JUMPDEST PUSH3 0x49F SWAP1 PUSH1 0x1D PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP9 DUP8 LT PUSH3 0x3DD JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x731 JUMP JUMPDEST CODESIZE PUSH3 0x23D JUMP JUMPDEST PUSH1 0x41 DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1FA JUMP JUMPDEST SWAP2 DUP10 AND SWAP2 PUSH1 0x1C PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH3 0x51B JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x501 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1C SSTORE PUSH3 0x210 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x4F2 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x4D8 JUMP JUMPDEST PUSH3 0x55E SWAP1 PUSH1 0x1C PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP9 DUP8 LT PUSH3 0x3DD JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x731 JUMP JUMPDEST CODESIZE PUSH3 0x1E3 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1A0 JUMP JUMPDEST SWAP2 DUP10 AND SWAP2 PUSH1 0x1B PUSH1 0x0 MSTORE DUP5 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP7 DUP3 DUP3 LT PUSH3 0x5C5 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x5AB JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1B SSTORE PUSH3 0x1B6 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x59C JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x582 JUMP JUMPDEST PUSH3 0x608 SWAP1 PUSH1 0x1B PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP9 DUP8 LT PUSH3 0x3DD JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x731 JUMP JUMPDEST CODESIZE PUSH3 0x189 JUMP JUMPDEST SWAP1 DUP5 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH3 0x647 JUMPI JUMPDEST PUSH3 0x628 DUP2 DUP4 PUSH3 0x68A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH3 0x644 JUMPI POP PUSH3 0x63D SWAP1 PUSH3 0x6AE JUMP JUMPDEST CODESIZE PUSH3 0x151 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH3 0x61C JUMP JUMPDEST DUP11 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP10 DUP3 ADD DUP5 ADD MSTORE DUP8 SWAP3 ADD PUSH3 0xC8 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x674 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x66F JUMPI JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x674 JUMPI PUSH1 0x40 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH4 0x3078303 PUSH1 0xE4 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH3 0x726 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH3 0x710 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH3 0x704 JUMP JUMPDEST DUP2 DUP2 LT PUSH3 0x73D JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x731 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x22 JUMPI JUMPDEST POP POP POP CALLDATASIZE ISZERO PUSH2 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x10A38F5 EQ PUSH2 0x7E4 JUMPI POP DUP2 PUSH4 0x5C1F502 EQ PUSH2 0x275 JUMPI POP DUP1 PUSH4 0x17906C2E EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0xB6 JUMPI PUSH4 0xFAEB5E17 EQ PUSH2 0x95 JUMPI DUP1 PUSH2 0x12 JUMP JUMPDEST CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x7 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x8 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x121 PUSH2 0x9BB JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI DUP1 MLOAD SWAP1 DUP3 PUSH1 0x1E SLOAD PUSH2 0x14A DUP2 PUSH2 0x8CC JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP2 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0x1E9 JUMPI POP PUSH1 0x1 EQ PUSH2 0x18C JUMPI JUMPDEST POP POP POP PUSH2 0x176 DUP3 PUSH2 0x188 SWAP5 SUB DUP4 PUSH2 0x88B JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x92C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP5 POP PUSH1 0x1E DUP6 MSTORE PUSH32 0x50BB669A95C7B50B7E8A6F09454034B2B14CF2B85C730DCA9A539CA82CB6E350 JUMPDEST DUP3 DUP7 LT PUSH2 0x1D1 JUMPI POP POP POP PUSH2 0x176 DUP3 PUSH1 0x20 PUSH2 0x188 SWAP6 DUP3 ADD ADD SWAP5 PUSH2 0x164 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x188 SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x176 SWAP5 SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 PUSH2 0x164 JUMP JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x255 PUSH1 0xFF PUSH1 0x2 SLOAD AND SWAP2 MLOAD DUP1 SWAP3 PUSH2 0x91F JUMP JUMPDEST RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x15 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x7E1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x7E1 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP5 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP6 DUP2 LT DUP6 DUP3 GT OR PUSH2 0x7B5 JUMPI DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 SLOAD DUP7 MSTORE DUP3 MLOAD SWAP2 PUSH2 0x2BB DUP4 PUSH2 0x840 JUMP JUMPDEST DUP4 MLOAD SWAP3 PUSH1 0xC0 DUP5 ADD DUP5 DUP2 LT DUP5 DUP3 GT OR PUSH2 0x789 JUMPI DUP6 MSTORE PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x75D JUMPI DUP6 MSTORE PUSH1 0x5 SWAP2 SWAP1 PUSH1 0x8 SHR PUSH1 0xFF AND DUP3 DUP2 LT ISZERO PUSH2 0x75D JUMPI DUP8 DUP7 ADD MSTORE PUSH1 0x3 SLOAD DUP7 DUP7 ADD MSTORE DUP10 SLOAD SWAP5 PUSH1 0x60 SWAP6 DUP7 DUP3 ADD MSTORE DUP3 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x731 JUMPI PUSH1 0xA0 DUP3 ADD MSTORE DUP2 MSTORE DUP6 MLOAD SWAP4 PUSH1 0x80 DUP6 ADD SWAP1 DUP2 GT DUP6 DUP3 LT OR PUSH2 0x705 JUMPI DUP7 MSTORE PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x8 SLOAD DUP8 DUP6 ADD MSTORE PUSH1 0x9 SLOAD DUP7 DUP6 ADD MSTORE PUSH1 0xA SLOAD DUP6 DUP6 ADD MSTORE DUP7 DUP2 ADD SWAP4 DUP5 MSTORE DUP6 MLOAD SWAP8 PUSH2 0x365 DUP10 PUSH2 0x840 JUMP JUMPDEST DUP7 MLOAD PUSH1 0xB SLOAD DUP2 DUP7 PUSH2 0x375 DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP3 DUP4 DUP4 MSTORE DUP13 DUP7 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x6CB JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x670 JUMPI JUMPDEST PUSH2 0x39C SWAP3 POP SUB DUP3 PUSH2 0x88B JUMP JUMPDEST DUP10 MSTORE DUP7 MLOAD PUSH1 0xC SLOAD DUP2 DUP7 PUSH2 0x3AE DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP3 DUP4 DUP4 MSTORE DUP13 DUP7 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x636 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x5DB JUMPI JUMPDEST PUSH2 0x3D5 SWAP3 POP SUB DUP3 PUSH2 0x88B JUMP JUMPDEST DUP9 DUP11 ADD MSTORE DUP7 MLOAD SWAP1 DUP2 DUP6 PUSH1 0xD SLOAD SWAP3 PUSH2 0x3EB DUP5 PUSH2 0x8CC JUMP JUMPDEST SWAP4 DUP5 DUP5 MSTORE DUP13 DUP3 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x59D JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x543 JUMPI JUMPDEST POP PUSH2 0x413 SWAP3 POP SUB DUP3 PUSH2 0x88B JUMP JUMPDEST DUP7 DUP10 ADD MSTORE DUP6 DUP2 ADD SWAP8 DUP9 MSTORE DUP6 MLOAD SWAP9 MLOAD DUP10 MSTORE DUP6 DUP8 DUP11 ADD MSTORE MLOAD SWAP2 PUSH2 0x437 DUP7 DUP11 ADD DUP5 MLOAD PUSH2 0x91F JUMP JUMPDEST DUP7 DUP4 ADD MLOAD SWAP2 DUP3 LT ISZERO PUSH2 0x517 JUMPI POP DUP4 DUP1 DUP10 SWAP9 SWAP7 SWAP5 PUSH2 0x489 PUSH1 0xA0 PUSH2 0x504 SWAP7 PUSH2 0x4CD SWAP7 PUSH2 0x188 SWAP13 SWAP11 DUP15 ADD MSTORE DUP13 PUSH1 0x80 DUP11 DUP4 ADD MLOAD SWAP2 ADD MSTORE DUP13 DUP3 DUP7 DUP4 ADD MLOAD SWAP2 ADD MSTORE DUP13 PUSH1 0xC0 PUSH1 0x80 DUP4 ADD MLOAD SWAP2 ADD MSTORE ADD MLOAD PUSH1 0xE0 DUP13 ADD SWAP1 PUSH2 0x804 JUMP JUMPDEST MLOAD DUP1 MLOAD PUSH2 0x100 DUP12 ADD MSTORE DUP7 DUP2 ADD MLOAD PUSH2 0x120 DUP12 ADD MSTORE DUP6 DUP2 ADD MLOAD PUSH2 0x140 DUP12 ADD MSTORE ADD MLOAD SWAP6 PUSH2 0x160 SWAP7 DUP8 DUP11 ADD MSTORE MLOAD SWAP6 PUSH2 0x180 DUP10 ADD MSTORE DUP6 MLOAD SWAP1 PUSH2 0x1A0 DUP10 ADD MSTORE PUSH2 0x200 DUP9 ADD SWAP1 PUSH2 0x92C JUMP JUMPDEST SWAP3 DUP5 ADD MLOAD SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE60 SWAP4 DUP5 DUP9 DUP4 SUB ADD PUSH2 0x1C0 DUP10 ADD MSTORE PUSH2 0x92C JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 DUP5 DUP4 SUB ADD PUSH2 0x1E0 DUP6 ADD MSTORE PUSH2 0x92C JUMP JUMPDEST DUP1 PUSH1 0x21 DUP12 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST PUSH1 0xD DUP9 MSTORE DUP12 SWAP2 POP DUP8 SWAP1 PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 JUMPDEST DUP6 DUP4 LT PUSH2 0x585 JUMPI POP POP PUSH2 0x413 SWAP4 POP DUP3 ADD ADD DUP15 PUSH2 0x406 JUMP JUMPDEST DUP1 SLOAD DUP4 DUP9 ADD DUP6 ADD MSTORE DUP7 SWAP5 POP DUP14 SWAP4 SWAP1 SWAP3 ADD SWAP2 DUP2 ADD PUSH2 0x56E JUMP JUMPDEST SWAP1 SWAP4 POP PUSH2 0x413 SWAP6 SWAP3 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO DUP7 SHL DUP3 ADD ADD DUP15 PUSH2 0x406 JUMP JUMPDEST POP POP PUSH1 0xC DUP7 MSTORE DUP2 DUP11 DUP8 DUP6 PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 JUMPDEST DUP6 DUP4 LT PUSH2 0x61D JUMPI POP POP PUSH2 0x3D5 SWAP4 POP DUP3 ADD ADD PUSH2 0x3C9 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP12 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x607 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP3 ADD MSTORE PUSH2 0x3D5 SWAP5 ISZERO ISZERO DUP10 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x3C9 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0xB DUP7 MSTORE DUP2 DUP11 DUP8 DUP6 PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 JUMPDEST DUP6 DUP4 LT PUSH2 0x6B2 JUMPI POP POP PUSH2 0x39C SWAP4 POP DUP3 ADD ADD PUSH2 0x390 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP12 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x69C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP3 ADD MSTORE PUSH2 0x39C SWAP5 ISZERO ISZERO DUP10 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x390 SWAP1 POP JUMP JUMPDEST PUSH1 0x24 DUP5 PUSH1 0x41 DUP14 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP6 PUSH1 0x21 DUP15 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP5 PUSH1 0x21 DUP14 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP4 PUSH1 0x41 DUP13 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP3 PUSH1 0x41 DUP10 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI DUP1 PUSH2 0x255 PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x6 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x811 JUMPI MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x85C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x85C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x915 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x8E6 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x8DB JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x811 JUMPI MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x976 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x937 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x9B6 JUMPI MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x9B6 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x811 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0xA65 JUMPI POP PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xA2E JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0xA4F SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA52 JUMPI JUMPDEST PUSH2 0xA47 DUP2 DUP4 PUSH2 0x88B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA3D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x2 SUB PUSH2 0xAC7 JUMPI PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xA2E JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE 0xC4 0xC1 DUP1 0xD8 0x26 CALLCODE PUSH20 0xDD7949D437AB35A52864DC9C4F8068AB8C49A1D1 SDIV 0x4E 0xAA 0x25 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"520:4766:20:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;;;;;;;-1:-1:-1;520:4766:20;;;;;1236:18;1209:8;520:4766;-1:-1:-1;1283:18:20;520:4766;;;;;;;;;;;;;;;;;;;;;1345:28;520:4766;;;1345:28;520:4766;;;1407:25;520:4766;;;1407:25;520:4766;;;1463:22;520:4766;;;1463:22;520:4766;1540:10;520:4766;1513:24;520:4766;;;1513:24;520:4766;;;;;;;;;1579:47;;1407:25;;520:4766;;;;1579:47;;;;;;;-1:-1:-1;1579:47:20;;;520:4766;;;;1561:15;520:4766;;;1561:15;520:4766;;;:::i;:::-;576:6;;;;;;;;;;;1637:22;576:6;;:::i;:::-;;;;;;520:4766;576:6;;;;;;;520:4766;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;1637:22;576:6;;520:4766;;:::i;:::-;576:6;;;;;;;;;;;1681:28;576:6;;:::i;:::-;;;;;;;;;;;;;;520:4766;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;1681:28;576:6;;520:4766;;:::i;:::-;576:6;;;;;;;;;;;1731:29;576:6;;:::i;:::-;;;;;;;;;;;;;;520:4766;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;1731:29;576:6;;;;;;1345:28;576:6;;1345:28;576:6;-1:-1:-1;576:6:20;;;;;1916;576;-1:-1:-1;576:6:20;520:4766;;576:6;;-1:-1:-1;576:6:20;1996;576;-1:-1:-1;576:6:20;520:4766;1345:28;-1:-1:-1;576:6:20;2074;576;-1:-1:-1;576:6:20;520:4766;1513:24;-1:-1:-1;576:6:20;2153:7;576:6;-1:-1:-1;576:6:20;520:4766;576:6;-1:-1:-1;576:6:20;2233:7;576:6;-1:-1:-1;576:6:20;520:4766;-1:-1:-1;576:6:20;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;2322:16;576:6;;:::i;:::-;;;;;;;;;;;;;520:4766;;;576:6;;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;;;1513:24;576:6;;;;;2322:16;576:6;;520:4766;;;;;;;;576:6;;;;-1:-1:-1;576:6:20;;;;;;;;;;;2322:16;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;2322:16;576:6;;;;;;;;;;1513:24;576:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;2322:16;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;520:4766;;;;;-1:-1:-1;520:4766:20;;;-1:-1:-1;520:4766:20;576:6;;;;-1:-1:-1;576:6:20;;;;;;;;;1731:29;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;520:4766;576:6;;;;;;;;;;;;;;1731:29;576:6;;;;;;;;;;;;;;;;;;;;;;;;520:4766;576:6;;;;;;;;;;;;;;;;;;;;1731:29;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;520:4766;;;;;-1:-1:-1;520:4766:20;;;-1:-1:-1;520:4766:20;576:6;;;;-1:-1:-1;576:6:20;;;;;;;;;1681:28;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;520:4766;576:6;;;;;;;;;;;;;;1681:28;576:6;;;;;;;;;;;;;;;;;;;;;;;;520:4766;576:6;;;;;;;;;;;;;;;;;;;;1681:28;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;576:6:20;;;;;;;;;1637:22;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;520:4766;576:6;;;;;;;;;;;;;;1637:22;576:6;;;;;;;;;;;;;;;;;;;;;;;;520:4766;576:6;;;;;;;;;;;;;;;;;;;;1637:22;-1:-1:-1;576:6:20;;-1:-1:-1;576:6:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1579:47;;;;;;;;;;;;;;;:::i;:::-;;;520:4766;;;;;;;;:::i;:::-;1579:47;;;520:4766;;;1579:47;;;;;;520:4766;;;-1:-1:-1;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;;;;;-1:-1:-1;520:4766:20;;;;;-1:-1:-1;520:4766:20;;;;;;-1:-1:-1;;520:4766:20;;;;-1:-1:-1;;;;;520:4766:20;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;520:4766:20;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;520:4766:20;;;;;;;;;;;;;-1:-1:-1;;;520:4766:20;;;;:::o;576:6::-;;;;;;;;;;;;;;;;;;;:::o;:::-;520:4766;;;576:6;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":2442,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2348,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_enum_PostStatus":{"entryPoint":2335,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_Tokens":{"entryPoint":2052,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2252,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":2187,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_4669":{"entryPoint":2112,"id":null,"parameterSlots":1,"returnSlots":0},"fun_getTokenIdAddress":{"entryPoint":2491,"id":3687,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c918263010a38f5146107e45750816305c1f502146102755750806317906c2e146102575780634e69d5601461022f57806354fd4d50146101295780635ad4e170146100f05780638da5cb5b146100d4578063d24e0c87146100b65763faeb5e17146100955780610012565b346100b257816003193601126100b2576020906007549051908152f35b5080fd5b50346100b257816003193601126100b2576020906008549051908152f35b50346100b257816003193601126100b257602091549051908152f35b50346100b257816003193601126100b25760209073ffffffffffffffffffffffffffffffffffffffff6101216109bb565b915191168152f35b50346100b257816003193601126100b25780519082601e5461014a816108cc565b808552916001918083169081156101e9575060011461018c575b5050506101768261018894038361088b565b5191829160208352602083019061092c565b0390f35b9450601e85527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3505b8286106101d1575050506101768260206101889582010194610164565b805460208787018101919091529095019481016101b4565b6101889750869350602092506101769491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b82010194610164565b50346100b257816003193601126100b25760209061025560ff600254169151809261091f565bf35b50346100b257816003193601126100b2576020906015549051908152f35b8284346107e157806003193601126107e1578151916020908184019267ffffffffffffffff93858110858211176107b5578252600193845486528251916102bb83610840565b83519260c084018481108482111761078957855260025460ff8116600881101561075d5785526005919060081c60ff168281101561075d578786015260035486860152895494606095868201528254608082015260ff6006541660038110156107315760a08201528152855193608085019081118582101761070557865260075484526008548785015260095486850152600a548585015286810193845285519761036589610840565b8651600b548186610375836108cc565b928383528c86821691826000146106cb575050600114610670575b61039c9250038261088b565b89528651600c5481866103ae836108cc565b928383528c86821691826000146106365750506001146105db575b6103d59250038261088b565b888a01528651908185600d54926103eb846108cc565b938484528c828216918260001461059d575050600114610543575b506104139250038261088b565b8689015285810197885285519851895285878a01525191610437868a01845161091f565b8683015191821015610517575083808998969461048960a0610504966104cd966101889c9a8e01528c60808a8301519101528c82868301519101528c60c06080830151910152015160e08c0190610804565b5180516101008b0152868101516101208b0152858101516101408b015201519561016096878a015251956101808901528551906101a089015261020088019061092c565b92840151927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe609384888303016101c089015261092c565b92015190848303016101e085015261092c565b8060218b7f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b600d88528b915087907fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b85831061058557505061041393508201018e610406565b80548388018501528694508d9390920191810161056e565b9093506104139592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00915016828401521515861b8201018e610406565b5050600c8652818a87857fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c75b85831061061d5750506103d593508201016103c9565b8091929450548385880101520191018b90858593610607565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848201526103d5941515891b84010191506103c99050565b5050600b8652818a87857f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b8583106106b257505061039c9350820101610390565b8091929450548385880101520191018b9085859361069c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168482015261039c941515891b84010191506103909050565b60248460418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248560218e7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248460218d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248360418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024826041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b80fd5b8490346100b257816003193601126100b2578061025560209260ff600654165b9060038210156108115752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6060810190811067ffffffffffffffff82111761085c57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761085c57604052565b90600182811c92168015610915575b60208310146108e657565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916108db565b9060088210156108115752565b919082519283825260005b8481106109765750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610937565b908160209103126109b6575173ffffffffffffffffffffffffffffffffffffffff811681036109b65790565b600080fd5b60ff6006541660038110156108115760018103610a6557506004602073ffffffffffffffffffffffffffffffffffffffff60175416604051928380927ff77800e50000000000000000000000000000000000000000000000000000000082525afa908115610a5957600091610a2e575090565b610a4f915060203d8111610a52575b610a47818361088b565b81019061098a565b90565b503d610a3d565b6040513d6000823e3d90fd5b600203610ac7576004602073ffffffffffffffffffffffffffffffffffffffff60175416604051928380927fbe22f5460000000000000000000000000000000000000000000000000000000082525afa908115610a5957600091610a2e575090565b60009056fea2646970667358221220f2c4c180d826f273dd7949d437ab35a52864dc9c4f8068ab8c49a1d1054eaa2564736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x22 JUMPI JUMPDEST POP POP POP CALLDATASIZE ISZERO PUSH2 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x10A38F5 EQ PUSH2 0x7E4 JUMPI POP DUP2 PUSH4 0x5C1F502 EQ PUSH2 0x275 JUMPI POP DUP1 PUSH4 0x17906C2E EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0xB6 JUMPI PUSH4 0xFAEB5E17 EQ PUSH2 0x95 JUMPI DUP1 PUSH2 0x12 JUMP JUMPDEST CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x7 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x8 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x121 PUSH2 0x9BB JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI DUP1 MLOAD SWAP1 DUP3 PUSH1 0x1E SLOAD PUSH2 0x14A DUP2 PUSH2 0x8CC JUMP JUMPDEST DUP1 DUP6 MSTORE SWAP2 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0x1E9 JUMPI POP PUSH1 0x1 EQ PUSH2 0x18C JUMPI JUMPDEST POP POP POP PUSH2 0x176 DUP3 PUSH2 0x188 SWAP5 SUB DUP4 PUSH2 0x88B JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x92C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP5 POP PUSH1 0x1E DUP6 MSTORE PUSH32 0x50BB669A95C7B50B7E8A6F09454034B2B14CF2B85C730DCA9A539CA82CB6E350 JUMPDEST DUP3 DUP7 LT PUSH2 0x1D1 JUMPI POP POP POP PUSH2 0x176 DUP3 PUSH1 0x20 PUSH2 0x188 SWAP6 DUP3 ADD ADD SWAP5 PUSH2 0x164 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP8 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 ADD SWAP5 DUP2 ADD PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x188 SWAP8 POP DUP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x176 SWAP5 SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP5 PUSH2 0x164 JUMP JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x255 PUSH1 0xFF PUSH1 0x2 SLOAD AND SWAP2 MLOAD DUP1 SWAP3 PUSH2 0x91F JUMP JUMPDEST RETURN JUMPDEST POP CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x15 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x7E1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x7E1 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP5 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP6 DUP2 LT DUP6 DUP3 GT OR PUSH2 0x7B5 JUMPI DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 SLOAD DUP7 MSTORE DUP3 MLOAD SWAP2 PUSH2 0x2BB DUP4 PUSH2 0x840 JUMP JUMPDEST DUP4 MLOAD SWAP3 PUSH1 0xC0 DUP5 ADD DUP5 DUP2 LT DUP5 DUP3 GT OR PUSH2 0x789 JUMPI DUP6 MSTORE PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x75D JUMPI DUP6 MSTORE PUSH1 0x5 SWAP2 SWAP1 PUSH1 0x8 SHR PUSH1 0xFF AND DUP3 DUP2 LT ISZERO PUSH2 0x75D JUMPI DUP8 DUP7 ADD MSTORE PUSH1 0x3 SLOAD DUP7 DUP7 ADD MSTORE DUP10 SLOAD SWAP5 PUSH1 0x60 SWAP6 DUP7 DUP3 ADD MSTORE DUP3 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x731 JUMPI PUSH1 0xA0 DUP3 ADD MSTORE DUP2 MSTORE DUP6 MLOAD SWAP4 PUSH1 0x80 DUP6 ADD SWAP1 DUP2 GT DUP6 DUP3 LT OR PUSH2 0x705 JUMPI DUP7 MSTORE PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x8 SLOAD DUP8 DUP6 ADD MSTORE PUSH1 0x9 SLOAD DUP7 DUP6 ADD MSTORE PUSH1 0xA SLOAD DUP6 DUP6 ADD MSTORE DUP7 DUP2 ADD SWAP4 DUP5 MSTORE DUP6 MLOAD SWAP8 PUSH2 0x365 DUP10 PUSH2 0x840 JUMP JUMPDEST DUP7 MLOAD PUSH1 0xB SLOAD DUP2 DUP7 PUSH2 0x375 DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP3 DUP4 DUP4 MSTORE DUP13 DUP7 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x6CB JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x670 JUMPI JUMPDEST PUSH2 0x39C SWAP3 POP SUB DUP3 PUSH2 0x88B JUMP JUMPDEST DUP10 MSTORE DUP7 MLOAD PUSH1 0xC SLOAD DUP2 DUP7 PUSH2 0x3AE DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP3 DUP4 DUP4 MSTORE DUP13 DUP7 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x636 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x5DB JUMPI JUMPDEST PUSH2 0x3D5 SWAP3 POP SUB DUP3 PUSH2 0x88B JUMP JUMPDEST DUP9 DUP11 ADD MSTORE DUP7 MLOAD SWAP1 DUP2 DUP6 PUSH1 0xD SLOAD SWAP3 PUSH2 0x3EB DUP5 PUSH2 0x8CC JUMP JUMPDEST SWAP4 DUP5 DUP5 MSTORE DUP13 DUP3 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x59D JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x543 JUMPI JUMPDEST POP PUSH2 0x413 SWAP3 POP SUB DUP3 PUSH2 0x88B JUMP JUMPDEST DUP7 DUP10 ADD MSTORE DUP6 DUP2 ADD SWAP8 DUP9 MSTORE DUP6 MLOAD SWAP9 MLOAD DUP10 MSTORE DUP6 DUP8 DUP11 ADD MSTORE MLOAD SWAP2 PUSH2 0x437 DUP7 DUP11 ADD DUP5 MLOAD PUSH2 0x91F JUMP JUMPDEST DUP7 DUP4 ADD MLOAD SWAP2 DUP3 LT ISZERO PUSH2 0x517 JUMPI POP DUP4 DUP1 DUP10 SWAP9 SWAP7 SWAP5 PUSH2 0x489 PUSH1 0xA0 PUSH2 0x504 SWAP7 PUSH2 0x4CD SWAP7 PUSH2 0x188 SWAP13 SWAP11 DUP15 ADD MSTORE DUP13 PUSH1 0x80 DUP11 DUP4 ADD MLOAD SWAP2 ADD MSTORE DUP13 DUP3 DUP7 DUP4 ADD MLOAD SWAP2 ADD MSTORE DUP13 PUSH1 0xC0 PUSH1 0x80 DUP4 ADD MLOAD SWAP2 ADD MSTORE ADD MLOAD PUSH1 0xE0 DUP13 ADD SWAP1 PUSH2 0x804 JUMP JUMPDEST MLOAD DUP1 MLOAD PUSH2 0x100 DUP12 ADD MSTORE DUP7 DUP2 ADD MLOAD PUSH2 0x120 DUP12 ADD MSTORE DUP6 DUP2 ADD MLOAD PUSH2 0x140 DUP12 ADD MSTORE ADD MLOAD SWAP6 PUSH2 0x160 SWAP7 DUP8 DUP11 ADD MSTORE MLOAD SWAP6 PUSH2 0x180 DUP10 ADD MSTORE DUP6 MLOAD SWAP1 PUSH2 0x1A0 DUP10 ADD MSTORE PUSH2 0x200 DUP9 ADD SWAP1 PUSH2 0x92C JUMP JUMPDEST SWAP3 DUP5 ADD MLOAD SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE60 SWAP4 DUP5 DUP9 DUP4 SUB ADD PUSH2 0x1C0 DUP10 ADD MSTORE PUSH2 0x92C JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 DUP5 DUP4 SUB ADD PUSH2 0x1E0 DUP6 ADD MSTORE PUSH2 0x92C JUMP JUMPDEST DUP1 PUSH1 0x21 DUP12 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST PUSH1 0xD DUP9 MSTORE DUP12 SWAP2 POP DUP8 SWAP1 PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 JUMPDEST DUP6 DUP4 LT PUSH2 0x585 JUMPI POP POP PUSH2 0x413 SWAP4 POP DUP3 ADD ADD DUP15 PUSH2 0x406 JUMP JUMPDEST DUP1 SLOAD DUP4 DUP9 ADD DUP6 ADD MSTORE DUP7 SWAP5 POP DUP14 SWAP4 SWAP1 SWAP3 ADD SWAP2 DUP2 ADD PUSH2 0x56E JUMP JUMPDEST SWAP1 SWAP4 POP PUSH2 0x413 SWAP6 SWAP3 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO DUP7 SHL DUP3 ADD ADD DUP15 PUSH2 0x406 JUMP JUMPDEST POP POP PUSH1 0xC DUP7 MSTORE DUP2 DUP11 DUP8 DUP6 PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 JUMPDEST DUP6 DUP4 LT PUSH2 0x61D JUMPI POP POP PUSH2 0x3D5 SWAP4 POP DUP3 ADD ADD PUSH2 0x3C9 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP12 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x607 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP3 ADD MSTORE PUSH2 0x3D5 SWAP5 ISZERO ISZERO DUP10 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x3C9 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0xB DUP7 MSTORE DUP2 DUP11 DUP8 DUP6 PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 JUMPDEST DUP6 DUP4 LT PUSH2 0x6B2 JUMPI POP POP PUSH2 0x39C SWAP4 POP DUP3 ADD ADD PUSH2 0x390 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP12 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x69C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP3 ADD MSTORE PUSH2 0x39C SWAP5 ISZERO ISZERO DUP10 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x390 SWAP1 POP JUMP JUMPDEST PUSH1 0x24 DUP5 PUSH1 0x41 DUP14 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP6 PUSH1 0x21 DUP15 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP5 PUSH1 0x21 DUP14 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP4 PUSH1 0x41 DUP13 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST PUSH1 0x24 DUP3 PUSH1 0x41 DUP10 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0xB2 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB2 JUMPI DUP1 PUSH2 0x255 PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x6 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x811 JUMPI MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x85C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x85C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x915 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x8E6 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x8DB JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x811 JUMPI MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x976 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x937 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x9B6 JUMPI MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x9B6 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x811 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0xA65 JUMPI POP PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xF77800E500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xA2E JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0xA4F SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA52 JUMPI JUMPDEST PUSH2 0xA47 DUP2 DUP4 PUSH2 0x88B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x98A JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA3D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x2 SUB PUSH2 0xAC7 JUMPI PUSH1 0x4 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x17 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0xBE22F54600000000000000000000000000000000000000000000000000000000 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xA2E JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE 0xC4 0xC1 DUP1 0xD8 0x26 CALLCODE PUSH20 0xDD7949D437AB35A52864DC9C4F8068AB8C49A1D1 SDIV 0x4E 0xAA 0x25 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"520:4766:20:-:0;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;5107:20;520:4766;;;;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;4984:28;520:4766;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;2440:16;520:4766;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;2440:16;520:4766;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;4131:13;520:4766;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;5220:18;520:4766;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;620:27;520:4766;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;620:27;520:4766;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;620:27;;520:4766;620:27;;;520:4766;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;620:27;;520:4766;620:27;;;520:4766;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;620:27;;520:4766;620:27;;;520:4766;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;-1:-1:-1;520:4766:20;;-1:-1:-1;;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;520:4766:20;;-1:-1:-1;520:4766:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;520:4766:20;;;;;;;;;;4258:30;520:4766;;;;;;;;;;;:::o;:::-;;-1:-1:-1;520:4766:20;;;;;-1:-1:-1;520:4766:20;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;520:4766:20;;4304:439;520:4766;4378:30;520:4766;;;;;;;;4378:4;:56;;:4;;520:4766;4378:30;4458:58;520:4766;4479:24;520:4766;;;;4458:58;;;;520:4766;4458:58;;;;;;;;;-1:-1:-1;4458:58:20;;;4451:65;;:::o;4458:58::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;4451:65;:::o;4458:58::-;;;;;;520:4766;;;-1:-1:-1;520:4766:20;;;;;4374:362;4378:13;4538:55;4378:13;;:30;4617:57;520:4766;4638:24;520:4766;;;;4617:57;;;;520:4766;4617:57;;;;;;;;;-1:-1:-1;4617:57:20;;;4610:64;;:::o;4534:202::-;-1:-1:-1;4707:17:20;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"563600","executionCost":"infinite","totalCost":"infinite"},"external":{"getPaymentRequested()":"2434","getStakeRequested()":"2451","getStatus()":"2411","getTokenId()":"2325","getTokenIdAddress()":"infinite","owner()":"2409","post()":"infinite","postCount()":"2324","version()":"infinite"},"internal":{"_changeStatus(enum Structures.PostStatus)":"infinite","_checkToken(enum Structures.Tokens)":"infinite","_verifyNonce(bytes memory,address,bytes32)":"infinite","onlyVault()":"infinite","sismoVerify(bytes memory,address,bytes32)":"infinite"}},"methodIdentifiers":{"getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract stores data related to Mecenate posts and provides functions to interact with it.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Data\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Data.sol\":\"Data\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Data.sol:Data","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Data.sol:Data","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Data.sol:Data","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Data.sol:Data","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Data.sol:Data","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Data.sol:Data","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Data.sol:Data","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Data.sol:Data","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Data.sol:Data","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Data.sol:Data","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Data.sol:Data","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Data.sol:Data","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Data.sol:Data","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Data.sol:Data","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Data.sol:Data","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Data.sol:Data","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Data.sol:Data","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Data.sol:Data","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Data.sol:Data","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Data.sol:Data","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Data.sol:Data","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Data.sol:Data","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Data.sol:Data","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Data.sol:Data","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Data.sol:Data","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Data.sol:Data","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Data.sol:Data","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Data.sol:Data","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Data.sol:Data","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Data.sol:Data","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Data.sol:Data","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Data.sol:Data","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Data.sol:Data","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Data.sol:Data","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Data.sol:Data","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Data.sol:Data","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Data.sol:Data","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Data.sol:Data","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Data.sol:Data","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Data.sol:Data","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Data.sol:Data","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Data.sol:Data","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Deposit.sol":{"Deposit":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212203ab664d536198910aebf02daa1b6d989cba900d814e03da849f804486184cbe464736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x19 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xB6 PUSH5 0xD536198910 0xAE 0xBF MUL 0xDA LOG1 0xB6 0xD9 DUP10 0xCB 0xA9 STOP 0xD8 EQ 0xE0 RETURNDATASIZE 0xA8 0x49 0xF8 DIV BASEFEE PUSH2 0x84CB 0xE4 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"176:2279:21:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212203ab664d536198910aebf02daa1b6d989cba900d814e03da849f804486184cbe464736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xB6 PUSH5 0xD536198910 0xAE 0xBF MUL 0xDA LOG1 0xB6 0xD9 DUP10 0xCB 0xA9 STOP 0xD8 EQ 0xE0 RETURNDATASIZE 0xA8 0x49 0xF8 DIV BASEFEE PUSH2 0x84CB 0xE4 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"176:2279:21:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"69","totalCost":"11669"},"internal":{"_clearDeposit(enum Structures.Tokens,bytes32)":"infinite","_decreaseDeposit(enum Structures.Tokens,bytes32,uint256)":"infinite","_getDeposit(enum Structures.Tokens,bytes32)":"infinite","_increaseDeposit(enum Structures.Tokens,bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Deposit.sol\":\"Deposit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3754,"contract":"contracts/modules/Deposit.sol:Deposit","label":"_deposit","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Events.sol":{"Events":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Events.sol\":\"Events\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Events.sol:Events","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Events.sol:Events","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Events.sol:Events","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Events.sol:Events","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Events.sol:Events","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Events.sol:Events","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Events.sol:Events","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Events.sol:Events","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Events.sol:Events","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Events.sol:Events","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Events.sol:Events","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Events.sol:Events","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Events.sol:Events","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Events.sol:Events","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Events.sol:Events","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Events.sol:Events","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Events.sol:Events","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Events.sol:Events","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Events.sol:Events","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Events.sol:Events","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Events.sol:Events","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Events.sol:Events","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Events.sol:Events","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Events.sol:Events","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Events.sol:Events","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Events.sol:Events","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Events.sol:Events","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Events.sol:Events","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Events.sol:Events","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Events.sol:Events","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Events.sol:Events","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Events.sol:Events","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Events.sol:Events","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Events.sol:Events","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Events.sol:Events","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Events.sol:Events","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Events.sol:Events","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Events.sol:Events","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Events.sol:Events","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Events.sol:Events","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Events.sol:Events","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Events.sol:Events","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Finalization.sol":{"Finalization":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"finalizePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"staker","type":"bytes32"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToTake","type":"uint256"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,uint256,bytes32)":"b52d2ce4","finalizePost(bool,uint256,bytes32)":"8f287dc2","getBuyerStake()":"4c38d877","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStake(uint8,bytes32)":"1b9f0a43","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,bytes,address,bytes32)":"4828000c","takeStake(uint8,uint256,bytes,address,bytes32)":"de5d7165","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Finalization.sol\":\"Finalization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\nabstract contract Finalization is Staking {\\r\\n    function finalizePost(\\r\\n        bool valid,\\r\\n        uint256 punishment,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n        require(\\r\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\r\\n            \\\"NOT_SUBMITTED\\\"\\r\\n        );\\r\\n        require(\\r\\n            keccak256(postSettingPrivate.vaultIdBuyer) == encryptedVaultId,\\r\\n            \\\"VAULTID_NOT_MATCH\\\"\\r\\n        );\\r\\n\\r\\n        // Common contract addresses and variables\\r\\n        address treasuryContract = IMecenateFeedFactory(\\r\\n            settings.factoryContract\\r\\n        ).treasuryContract();\\r\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\r\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\r\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\r\\n\\r\\n        // Variables for stake changes\\r\\n        uint256 buyerStake;\\r\\n        uint256 sellerStake;\\r\\n\\r\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\r\\n            // Code for both the timeout and the valid case\\r\\n            buyerStake = Deposit._decreaseDeposit(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n                post.postdata.escrow.payment\\r\\n            );\\r\\n\\r\\n            sellerStake = Deposit._increaseDeposit(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdSeller),\\r\\n                amountToAdd\\r\\n            );\\r\\n\\r\\n            TokenManager._burn(\\r\\n                post.postdata.settings.tokenId,\\r\\n                treasuryContract,\\r\\n                buyerFee\\r\\n            );\\r\\n\\r\\n            // Update status and stakes\\r\\n            post.postdata.escrow.stake = sellerStake;\\r\\n            post.postdata.escrow.payment = buyerStake;\\r\\n            _changeStatus(\\r\\n                valid\\r\\n                    ? Structures.PostStatus.Finalized\\r\\n                    : Structures.PostStatus.Punished\\r\\n            );\\r\\n\\r\\n            emit Valid(post);\\r\\n        } else if (!valid) {\\r\\n            require(\\r\\n                punishment <= post.postdata.escrow.stake,\\r\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\r\\n            );\\r\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\r\\n\\r\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\r\\n            uint256 totalPunishmentFee = penalty + punishment;\\r\\n\\r\\n            TokenManager._burn(\\r\\n                post.postdata.settings.tokenId,\\r\\n                treasuryContract,\\r\\n                totalPunishmentFee\\r\\n            );\\r\\n\\r\\n            post.postdata.escrow.payment = _burnStake(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n                penalty\\r\\n            );\\r\\n\\r\\n            post.postdata.escrow.stake = _burnStake(\\r\\n                post.postdata.settings.tokenId,\\r\\n                keccak256(postSettingPrivate.vaultIdSeller),\\r\\n                punishment\\r\\n            );\\r\\n\\r\\n            // Update status and penalties\\r\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\r\\n            post.postdata.escrow.punishment = punishment;\\r\\n            post.postdata.escrow.penalty = penalty;\\r\\n\\r\\n            _changeStatus(Structures.PostStatus.Punished);\\r\\n\\r\\n            emit Invalid(post);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd57ab8fde1f9740dad2b30b2c9d14340a8fa12c127bb0428c68a2828b67255b0\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            TokenManager._transferFrom(\\n                tokenId,\\n                funder,\\n                address(this),\\n                amountToAdd\\n            );\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            TokenManager._transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(\\n                IMecenateFeedFactory(settings.factoryContract)\\n                    .treasuryContract()\\n            ).call{value: amountToBurn}(\\\"\\\");\\n            require(result, \\\"CALL_FAILED\\\");\\n        } else if (tokenId == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(amountToBurn);\\n        } else if (tokenId == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(amountToBurn);\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x18db8d86d1cc124574f7d4aafd684f32e4c11f95d2661469551177212c372e5a\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Finalization.sol:Finalization","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Finalization.sol:Finalization","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Finalization.sol:Finalization","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Finalization.sol:Finalization","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"},{"astId":3754,"contract":"contracts/modules/Finalization.sol:Finalization","label":"_deposit","offset":0,"slot":"33","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Finalization.sol:Finalization","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Finalization.sol:Finalization","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Finalization.sol:Finalization","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Finalization.sol:Finalization","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Finalization.sol:Finalization","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Finalization.sol:Finalization","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Finalization.sol:Finalization","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Finalization.sol:Finalization","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Finalization.sol:Finalization","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Finalization.sol:Finalization","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Finalization.sol:Finalization","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Finalization.sol:Finalization","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Finalization.sol:Finalization","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Finalization.sol:Finalization","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Finalization.sol:Finalization","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Finalization.sol:Finalization","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Finalization.sol:Finalization","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Finalization.sol:Finalization","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Finalization.sol:Finalization","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Finalization.sol:Finalization","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Finalization.sol:Finalization","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Finalization.sol:Finalization","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Finalization.sol:Finalization","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Finalization.sol:Finalization","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Finalization.sol:Finalization","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Finalization.sol:Finalization","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Finalization.sol:Finalization","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Finalization.sol:Finalization","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Finalization.sol:Finalization","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Finalization.sol:Finalization","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Finalization.sol:Finalization","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Finalization.sol:Finalization","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Finalization.sol:Finalization","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Message.sol":{"Message":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"getHashedVaultId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"getMessage","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"getTelegramIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"getVaultIdSecret","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodeMessage","type":"bytes"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"write","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getHashedVaultId(bytes,address,bytes32)":"e02cfa4c","getMessage(bytes,address,bytes32)":"9f8b4359","getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTelegramIds(bytes32)":"3258d15c","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getVaultIdSecret(bytes32)":"9d8cc89a","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50","write(bytes,bytes32)":"83dd1743"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"getHashedVaultId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getTelegramIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getVaultIdSecret\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodeMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"write\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Message.sol\":\"Message\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract Message is Events {\\r\\n    function _isSellerOrBuyer(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal view returns (bool) {\\r\\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        bytes32 buyerVaultIdHash = keccak256(postSettingPrivate.vaultIdBuyer);\\r\\n        return (encryptedVaultId == sellerVaultIdHash ||\\r\\n            encryptedVaultId == buyerVaultIdHash);\\r\\n    }\\r\\n\\r\\n    function getVaultIdSecret(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external view virtual returns (bytes memory) {\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        return postSettingPrivate.vaultIdSeller;\\r\\n    }\\r\\n\\r\\n    function getTelegramIds(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external view returns (uint256, uint256) {\\r\\n        require(\\r\\n            postSettingPrivate.buyerTelegramId != 0,\\r\\n            \\\"NO_TELEGRAM_ID_FOR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            postSettingPrivate.sellerTelegramId != 0,\\r\\n            \\\"NO_TELEGRAM_ID_FOR_SELLER\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\\r\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n            \\\"NOT_THE_SELLER_OR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        return (\\r\\n            uint160(postSettingPrivate.buyerTelegramId),\\r\\n            uint160(postSettingPrivate.sellerTelegramId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getHashedVaultId(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes32) {\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\\r\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n            \\\"NOT_SELLER_OR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            return keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        } else {\\r\\n            return keccak256(postSettingPrivate.vaultIdBuyer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function write(\\r\\n        bytes memory encodeMessage,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        _writeMessage(encodeMessage, encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function _writeMessage(\\r\\n        bytes memory encodeMessage,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal {\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            settings.lastMessageForBuyer = encodeMessage;\\r\\n        } else {\\r\\n            settings.lastMessageForSeller = encodeMessage;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMessage(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes memory) {\\r\\n        bytes32 encryptedVaultId = _getEncryptedVaultId(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        return _getMessage(encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function _getMessage(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            return settings.lastMessageForBuyer;\\r\\n        } else {\\r\\n            return settings.lastMessageForSeller;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getEncryptedVaultId(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal virtual returns (bytes32) {\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        return keccak256(vaultId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae6ab535a4de2bf0e41c136a0af6b641b2b5d0bac79bf19a6ce5811b6b1635f4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Message.sol:Message","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Message.sol:Message","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Message.sol:Message","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Message.sol:Message","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Message.sol:Message","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Message.sol:Message","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Message.sol:Message","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Message.sol:Message","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Message.sol:Message","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Message.sol:Message","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Message.sol:Message","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Message.sol:Message","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Message.sol:Message","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Message.sol:Message","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Message.sol:Message","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Message.sol:Message","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Message.sol:Message","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Message.sol:Message","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Message.sol:Message","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Message.sol:Message","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Message.sol:Message","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Message.sol:Message","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Message.sol:Message","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Message.sol:Message","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Message.sol:Message","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Message.sol:Message","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Message.sol:Message","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Message.sol:Message","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Message.sol:Message","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Message.sol:Message","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Message.sol:Message","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Message.sol:Message","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Message.sol:Message","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Message.sol:Message","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Message.sol:Message","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Message.sol:Message","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Message.sol:Message","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Message.sol:Message","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Message.sol:Message","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Message.sol:Message","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Message.sol:Message","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Message.sol:Message","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Renounce.sol":{"Renounce":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"staker","type":"bytes32"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"renouncePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToTake","type":"uint256"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,uint256,bytes32)":"b52d2ce4","getBuyerStake()":"4c38d877","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStake(uint8,bytes32)":"1b9f0a43","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","renouncePost(bytes,address,bytes32)":"3a4fb8b7","takeFullStake(uint8,bytes,address,bytes32)":"4828000c","takeStake(uint8,uint256,bytes,address,bytes32)":"de5d7165","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Renounce.sol\":\"Renounce\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Renounce.sol\":{\"content\":\"/**\\r\\n * @title Renounce\\r\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\r\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\r\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\r\\n * The post struct is reset and the post status is updated to Renounced.\\r\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\nabstract contract Renounce is Staking {\\r\\n    function renouncePost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external {\\r\\n        onlyVault();\\r\\n\\r\\n        // Validate the post status\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\r\\n\\r\\n        // Verify the nonce and get the vault ID\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        // Confirm that the caller is the seller\\r\\n        bytes32 sellerVaultId = keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        require(encryptedVaultId == sellerVaultId, \\\"NOT_SELLER\\\");\\r\\n\\r\\n        // Reset post and post settings\\r\\n        post = Structures.Post(\\r\\n            Structures.User({vaultId: bytes32(0)}),\\r\\n            Structures.PostData({\\r\\n                settings: Structures.PostSettings({\\r\\n                    status: Structures.PostStatus.Renounced,\\r\\n                    postType: Structures.PostType.Text,\\r\\n                    creationTimeStamp: 0,\\r\\n                    endTimeStamp: 0,\\r\\n                    duration: 0,\\r\\n                    tokenId: Structures.Tokens.NaN\\r\\n                }),\\r\\n                escrow: Structures.PostEscrow({\\r\\n                    stake: 0,\\r\\n                    payment: 0,\\r\\n                    punishment: 0,\\r\\n                    penalty: 0\\r\\n                }),\\r\\n                data: Structures.PostEncryptedData({\\r\\n                    encryptedData: \\\"\\\",\\r\\n                    encryptedKey: \\\"\\\",\\r\\n                    decryptedData: \\\"\\\"\\r\\n                })\\r\\n            })\\r\\n        );\\r\\n\\r\\n        postSettingPrivate.vaultIdBuyer = ZEROHASH;\\r\\n        postSettingPrivate.buyerTwitterId = 0;\\r\\n        postSettingPrivate.buyerTelegramId = 0;\\r\\n        postSettingPrivate.vaultIdSeller = ZEROHASH;\\r\\n        postSettingPrivate.sellerTwitterId = 0;\\r\\n        postSettingPrivate.sellerTelegramId = 0;\\r\\n\\r\\n        // Emit event\\r\\n        emit Renounced(post);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa7bc56c903a41fd35f880954f2141c9873372d4b3a492c312a069dabfb2a3fe6\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            TokenManager._transferFrom(\\n                tokenId,\\n                funder,\\n                address(this),\\n                amountToAdd\\n            );\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            TokenManager._transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(\\n                IMecenateFeedFactory(settings.factoryContract)\\n                    .treasuryContract()\\n            ).call{value: amountToBurn}(\\\"\\\");\\n            require(result, \\\"CALL_FAILED\\\");\\n        } else if (tokenId == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(amountToBurn);\\n        } else if (tokenId == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(amountToBurn);\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x18db8d86d1cc124574f7d4aafd684f32e4c11f95d2661469551177212c372e5a\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Renounce.sol:Renounce","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Renounce.sol:Renounce","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Renounce.sol:Renounce","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Renounce.sol:Renounce","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"},{"astId":3754,"contract":"contracts/modules/Renounce.sol:Renounce","label":"_deposit","offset":0,"slot":"33","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Renounce.sol:Renounce","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Renounce.sol:Renounce","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Renounce.sol:Renounce","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Renounce.sol:Renounce","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Renounce.sol:Renounce","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Renounce.sol:Renounce","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Renounce.sol:Renounce","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Renounce.sol:Renounce","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Renounce.sol:Renounce","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Renounce.sol:Renounce","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Renounce.sol:Renounce","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Renounce.sol:Renounce","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Renounce.sol:Renounce","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Renounce.sol:Renounce","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Renounce.sol:Renounce","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Renounce.sol:Renounce","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Renounce.sol:Renounce","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Renounce.sol:Renounce","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Renounce.sol:Renounce","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Renounce.sol:Renounce","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Renounce.sol:Renounce","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Renounce.sol:Renounce","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Renounce.sol:Renounce","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Renounce.sol:Renounce","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Renounce.sol:Renounce","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Renounce.sol:Renounce","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Renounce.sol:Renounce","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Renounce.sol:Renounce","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Renounce.sol:Renounce","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Renounce.sol:Renounce","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Renounce.sol:Renounce","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Renounce.sol:Renounce","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Renounce.sol:Renounce","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Staking.sol":{"Staking":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"staker","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"},{"internalType":"bytes32","name":"encryptedVaultId","type":"bytes32"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"staker","type":"bytes32"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"amountToTake","type":"uint256"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,uint256,bytes32)":"b52d2ce4","getBuyerStake()":"4c38d877","getPaymentRequested()":"d24e0c87","getSellerStake()":"5c63ed69","getStake(uint8,bytes32)":"1b9f0a43","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,bytes,address,bytes32)":"4828000c","takeStake(uint8,uint256,bytes,address,bytes32)":"de5d7165","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            TokenManager._transferFrom(\\n                tokenId,\\n                funder,\\n                address(this),\\n                amountToAdd\\n            );\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            TokenManager._transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(\\n                IMecenateFeedFactory(settings.factoryContract)\\n                    .treasuryContract()\\n            ).call{value: amountToBurn}(\\\"\\\");\\n            require(result, \\\"CALL_FAILED\\\");\\n        } else if (tokenId == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(amountToBurn);\\n        } else if (tokenId == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(amountToBurn);\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x18db8d86d1cc124574f7d4aafd684f32e4c11f95d2661469551177212c372e5a\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Staking.sol:Staking","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Staking.sol:Staking","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Staking.sol:Staking","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Staking.sol:Staking","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Staking.sol:Staking","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Staking.sol:Staking","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"},{"astId":3754,"contract":"contracts/modules/Staking.sol:Staking","label":"_deposit","offset":0,"slot":"33","type":"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Staking.sol:Staking","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Staking.sol:Staking","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Staking.sol:Staking","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Staking.sol:Staking","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Staking.sol:Staking","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Staking.sol:Staking","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Staking.sol:Staking","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Staking.sol:Staking","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Staking.sol:Staking","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Staking.sol:Staking","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Staking.sol:Staking","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Staking.sol:Staking","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Staking.sol:Staking","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Staking.sol:Staking","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Staking.sol:Staking","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Staking.sol:Staking","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Staking.sol:Staking","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Staking.sol:Staking","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Staking.sol:Staking","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Staking.sol:Staking","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Staking.sol:Staking","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Staking.sol:Staking","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Staking.sol:Staking","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Staking.sol:Staking","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Staking.sol:Staking","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Staking.sol:Staking","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Staking.sol:Staking","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Staking.sol:Staking","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Staking.sol:Staking","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Staking.sol:Staking","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Staking.sol:Staking","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Staking.sol:Staking","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Staking.sol:Staking","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Staking.sol:Staking","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Staking.sol:Staking","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Staking.sol:Staking","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Submission.sol":{"Submission":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"decryptedData","type":"bytes"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"revealData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_nonce","type":"bytes32"}],"name":"submitHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","revealData(bytes,bytes,address,bytes32)":"30a0680c","submitHash(bytes,bytes,address,bytes32)":"b43f4f75","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Submission.sol\":\"Submission\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Submission.sol\":{\"content\":\"/**\\r\\n * @title Submission\\r\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract Submission is Events {\\r\\n    function submitHash(\\r\\n        bytes memory encryptedKey,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(\\r\\n            validStatuses[uint8(currentStatus)] &&\\r\\n                (currentStatus == Structures.PostStatus.Accepted ||\\r\\n                    currentStatus == Structures.PostStatus.Submitted),\\r\\n            \\\"WRONG_STATUS\\\"\\r\\n        );\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\r\\n                encryptedVaultId\\r\\n            ),\\r\\n            \\\"User does not exist\\\"\\r\\n        );\\r\\n        require(post.creator.vaultId == encryptedVaultId, \\\"NOT_SELLER\\\");\\r\\n\\r\\n        _changeStatus(Structures.PostStatus.Submitted);\\r\\n\\r\\n        settings.encodedSymKey = post.postdata.data.encryptedKey = encryptedKey;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\r\\n        post.postdata.settings.endTimeStamp =\\r\\n            block.timestamp +\\r\\n            post.postdata.settings.duration;\\r\\n\\r\\n        emit Valid(post);\\r\\n    }\\r\\n\\r\\n    function revealData(\\r\\n        bytes memory decryptedData,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes memory) {\\r\\n        onlyVault();\\r\\n\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(\\r\\n            validStatuses[uint8(currentStatus)] &&\\r\\n                (currentStatus == Structures.PostStatus.Submitted ||\\r\\n                    currentStatus == Structures.PostStatus.Revealed ||\\r\\n                    currentStatus == Structures.PostStatus.Finalized),\\r\\n            \\\"INVALID_STATUS\\\"\\r\\n        );\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId != keccak256(postSettingPrivate.vaultIdSeller),\\r\\n            \\\"YOU_ARE_THE_SELLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            currentStatus == Structures.PostStatus.Finalized,\\r\\n            \\\"NOT_FINALIZED\\\"\\r\\n        );\\r\\n\\r\\n        post.postdata.data.decryptedData = decryptedData;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\r\\n\\r\\n        emit MadePublic(post);\\r\\n\\r\\n        return decryptedData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd666d9af971b6bf265d28cd01e6e931807beaa73235dc622006608040aa8aa33\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/Submission.sol:Submission","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/Submission.sol:Submission","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/Submission.sol:Submission","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/Submission.sol:Submission","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/Submission.sol:Submission","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/Submission.sol:Submission","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/Submission.sol:Submission","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/Submission.sol:Submission","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/Submission.sol:Submission","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/Submission.sol:Submission","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/Submission.sol:Submission","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/Submission.sol:Submission","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/Submission.sol:Submission","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/Submission.sol:Submission","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/Submission.sol:Submission","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/Submission.sol:Submission","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/Submission.sol:Submission","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/Submission.sol:Submission","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/Submission.sol:Submission","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/Submission.sol:Submission","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/Submission.sol:Submission","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/Submission.sol:Submission","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/Submission.sol:Submission","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/Submission.sol:Submission","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/Submission.sol:Submission","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/Submission.sol:Submission","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/Submission.sol:Submission","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/Submission.sol:Submission","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/Submission.sol:Submission","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/Submission.sol:Submission","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/Submission.sol:Submission","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/Submission.sol:Submission","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/Submission.sol:Submission","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/Submission.sol:Submission","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/Submission.sol:Submission","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/Submission.sol:Submission","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/Submission.sol:Submission","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/Submission.sol:Submission","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/Submission.sol:Submission","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/Submission.sol:Submission","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/Submission.sol:Submission","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/Submission.sol:Submission","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/TokenManager.sol":{"TokenManager":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"bytes32","name":"vaultId","type":"bytes32"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getPaymentRequested()":"d24e0c87","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMUSE is IERC20 {\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a18fb35d30932298cc6d9b837207254bf0c6758cd6858c3ae5724068312c6\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./BurnMUSE.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nabstract contract BurnDAI is BurnMUSE {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal override {\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function _burnDai(uint256 value) internal {\\r\\n        // approve uniswap for token transfer\\r\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\r\\n            .approve(settings.router, value);\\r\\n\\r\\n        // swap dai for MUSE\\r\\n        uint256 tokens_sold = value;\\r\\n\\r\\n        uint256 tokens_bought = _swapTokensForToken(\\r\\n            getTokenAddress(),\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(0)\\r\\n            ),\\r\\n            tokens_sold\\r\\n        );\\r\\n\\r\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\r\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\r\\n            BurnMUSE.getTokenAddress(),\\r\\n            uint24(\\r\\n                IMecenateFeedFactory(settings.factoryContract).getRouterFee(1)\\r\\n            ),\\r\\n            tokens_bought\\r\\n        );\\r\\n\\r\\n        // burn MUSE\\r\\n        BurnMUSE._burn(tokens_sold_to_muse);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address token)\\r\\n    {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = settings.router;\\r\\n    }\\r\\n\\r\\n    function _swapTokensForToken(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        // Check and approve allowance\\r\\n        uint256 allowance = IERC20(tokenIn).allowance(\\r\\n            address(this),\\r\\n            settings.router\\r\\n        );\\r\\n        if (allowance < amountIn) {\\r\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\r\\n        }\\r\\n\\r\\n        // Prepare parameters\\r\\n        address recipient = address(this);\\r\\n        uint256 deadline = block.timestamp + 15; // 15 seconds from the current block timestamp\\r\\n\\r\\n        // Perform the swap\\r\\n        // Refer to the Uniswap V3 documentation for details on the params.\\r\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: fee,\\r\\n                recipient: recipient,\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0, // you may want to set a minimum here\\r\\n                sqrtPriceLimitX96: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0fb02f2fa8b4c5113c701bcdbe359e9cd053e94b247d5ecb1084d25abdcc51d\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../interfaces/IMUSE.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract BurnMUSE is Events {\\r\\n    function _burn(uint256 value) internal virtual {\\r\\n        require(\\r\\n            IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n                .burn(value),\\r\\n            \\\"muse burn failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address from, uint256 value) internal virtual {\\r\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\r\\n            .transferFrom(from, address(this), value);\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() internal view virtual returns (address token) {\\r\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n    }\\r\\n\\r\\n    function getExchangeAddress()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address exchange)\\r\\n    {\\r\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ea0223ae255a9fcc54d0e7e67111067e02726f2ea633ef52f647195e24f233\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\n\\r\\n// import openzeppelin ECDSA\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Data\\r\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\r\\n */\\r\\ncontract Data {\\r\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\r\\n\\r\\n    bytes32 public owner;\\r\\n\\r\\n    Structures.Post public post;\\r\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\r\\n    Structures.FeedSettings internal settings;\\r\\n\\r\\n    mapping(uint8 => uint256) internal postDurationToDays;\\r\\n    mapping(uint8 => bool) internal validStatuses;\\r\\n\\r\\n    function onlyVault() internal view {\\r\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    ) {\\r\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\r\\n        settings.postCount = 0; // Initialize postCount to 0\\r\\n        settings.usersModuleContract = _usersModuleContract;\\r\\n        settings.verifierContract = _verifierContract;\\r\\n        settings.vaultContract = _vaultContract;\\r\\n        settings.factoryContract = msg.sender;\\r\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\r\\n        settings.encodedSymKey = ZEROHASH;\\r\\n        settings.lastMessageForBuyer = ZEROHASH;\\r\\n        settings.lastMessageForSeller = ZEROHASH;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\r\\n\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\r\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\r\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\r\\n\\r\\n        settings.version = _version;\\r\\n    }\\r\\n\\r\\n    function version() external view returns (string memory) {\\r\\n        return settings.version;\\r\\n    }\\r\\n\\r\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\r\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\r\\n        validStatuses[uint8(_newStatus)] = true;\\r\\n        post.postdata.settings.status = _newStatus;\\r\\n    }\\r\\n\\r\\n    function _verifyNonce(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus) {\\r\\n        return post.postdata.settings.status;\\r\\n    }\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens) {\\r\\n        return post.postdata.settings.tokenId;\\r\\n    }\\r\\n\\r\\n    function getTokenIdAddress() public view returns (address) {\\r\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\r\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\r\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\r\\n        } else {\\r\\n            return address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkToken(Structures.Tokens _token) internal view {\\r\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\r\\n    }\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.payment;\\r\\n    }\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256) {\\r\\n        return post.postdata.escrow.stake;\\r\\n    }\\r\\n\\r\\n    function postCount() external view returns (uint256) {\\r\\n        return settings.postCount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a0bfb25dd716d30d21f82c08a10ffefa72c82449f43c6fb64903c604b790806\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI) return BurnDAI.getTokenAddress();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return BurnMUSE.getTokenAddress();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        IMecenateFeedFactory factory = IMecenateFeedFactory(\\n            settings.factoryContract\\n        );\\n\\n        if (tokenID == Structures.Tokens.NaN) {\\n            (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n            require(result, \\\"Transfer failed.\\\");\\n            return;\\n        }\\n\\n        address tokenAddress = (tokenID == Structures.Tokens.DAI)\\n            ? BurnDAI.getTokenAddress()\\n            : BurnMUSE.getTokenAddress();\\n\\n        if (factory.burnEnabled() == false) {\\n            IERC20(tokenAddress).transfer(treasury, value);\\n            return;\\n        }\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnDai(value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burn(value);\\n        }\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            BurnDAI._burnFrom(from, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(BurnDAI.getTokenAddress()).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            address MUSE = BurnMUSE.getTokenAddress();\\n            uint256 currentAllowance = IMUSE(MUSE).allowance(\\n                msg.sender,\\n                spender\\n            );\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(MUSE).increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f30b5e3c2350bf304b1daa847374f9adb62a8d9fb9708a7070c22678b70b010\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3274,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"owner","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3277,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2436_storage"},{"astId":3280,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postSettingPrivate","offset":0,"slot":"14","type":"t_struct(PostSettingPrivate)2482_storage"},{"astId":3283,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"settings","offset":0,"slot":"20","type":"t_struct(FeedSettings)2412_storage"},{"astId":3287,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postDurationToDays","offset":0,"slot":"31","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3291,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"validStatuses","offset":0,"slot":"32","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2373":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2383":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2377":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2412_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2391,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2393,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2395,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2397,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2399,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"verifierContract","offset":0,"slot":"4","type":"t_address"},{"astId":2401,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"vaultContract","offset":0,"slot":"5","type":"t_address"},{"astId":2403,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"router","offset":0,"slot":"6","type":"t_address"},{"astId":2405,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"encodedSymKey","offset":0,"slot":"7","type":"t_bytes_storage"},{"astId":2407,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"lastMessageForBuyer","offset":0,"slot":"8","type":"t_bytes_storage"},{"astId":2409,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"lastMessageForSeller","offset":0,"slot":"9","type":"t_bytes_storage"},{"astId":2411,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"version","offset":0,"slot":"10","type":"t_string_storage"}],"numberOfBytes":"352"},"t_struct(Post)2436_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2432,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2494_storage"},{"astId":2435,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postdata","offset":0,"slot":"1","type":"t_struct(PostData)2446_storage"}],"numberOfBytes":"416"},"t_struct(PostData)2446_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2439,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2469_storage"},{"astId":2442,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2491_storage"},{"astId":2445,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"data","offset":0,"slot":"9","type":"t_struct(PostEncryptedData)2453_storage"}],"numberOfBytes":"384"},"t_struct(PostEncryptedData)2453_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2448,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2450,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2452,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2491_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2484,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":2486,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"payment","offset":0,"slot":"1","type":"t_uint256"},{"astId":2488,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"punishment","offset":0,"slot":"2","type":"t_uint256"},{"astId":2490,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"penalty","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(PostSettingPrivate)2482_storage":{"encoding":"inplace","label":"struct Structures.PostSettingPrivate","members":[{"astId":2471,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"vaultIdSeller","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2473,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"sellerTwitterId","offset":0,"slot":"1","type":"t_uint256"},{"astId":2475,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"sellerTelegramId","offset":0,"slot":"2","type":"t_uint256"},{"astId":2477,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"vaultIdBuyer","offset":0,"slot":"3","type":"t_bytes_storage"},{"astId":2479,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"buyerTwitterId","offset":0,"slot":"4","type":"t_uint256"},{"astId":2481,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"buyerTelegramId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2469_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2456,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2373"},{"astId":2459,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2383"},{"astId":2461,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2463,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2465,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2468,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2377"}],"numberOfBytes":"160"},"t_struct(User)2494_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2493,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"vaultId","offset":0,"slot":"0","type":"t_bytes32"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}