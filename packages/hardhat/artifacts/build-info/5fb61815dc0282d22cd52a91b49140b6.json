{"id":"5fb61815dc0282d22cd52a91b49140b6","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/interfaces/IMecenateVerifier.sol":{"content":"pragma solidity 0.8.19;\n\ninterface IMecenateVerifier {\n    function sismoVerify(\n        bytes memory sismoConnectResponse\n    ) external view returns (bytes memory);\n}\n"},"contracts/library/Structures.sol":{"content":"/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address router;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address easContract;\n        bytes32 easSchema;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        address buyer;\n        address seller;\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        address evmAddress;\n        bytes sismoVaultId;\n        bytes publicKey;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        address owner;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n        address buyerAddress;\n    }\n}\n"},"contracts/registry/MecenateUsers.sol":{"content":"pragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../library/Structures.sol\";\nimport \"../interfaces/IMecenateVerifier.sol\";\n\ncontract MecenateUsers is Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _users;\n\n    mapping(address => Structures.User) private _metadata;\n\n    address public verifierContract;\n\n    event UserRegistered(address indexed userAddress);\n    event PublicKeyChanged(address indexed userAddress, bytes newPublicKey);\n    event EVMAddressChanged(address indexed oldAddress, address newAddress);\n\n    constructor(address verifierContractAddress) {\n        verifierContract = verifierContractAddress;\n    }\n\n    function registerUser(\n        bytes memory sismoConnectResponse,\n        bytes memory pubKey\n    ) external returns (Structures.User memory) {\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\n            sismoConnectResponse\n        );\n\n        Structures.User memory newUser = Structures.User({\n            evmAddress: msg.sender,\n            sismoVaultId: vaultId,\n            publicKey: pubKey\n        });\n\n        _metadata[msg.sender] = newUser;\n\n        require(!_users.contains(msg.sender), \"USER_ALREADY_EXISTS\");\n\n        _users.add(msg.sender);\n\n        emit UserRegistered(msg.sender);\n\n        return newUser;\n    }\n\n    function changePublicKey(\n        bytes memory sismoConnectResponse,\n        bytes memory pubKey\n    ) external returns (Structures.User memory) {\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\n            sismoConnectResponse\n        );\n\n        require(_users.contains(msg.sender), \"USER_DOES_NOT_EXIST\");\n\n        require(\n            keccak256(_metadata[msg.sender].sismoVaultId) == keccak256(vaultId),\n            \"VAULT_ID_MISMATCH\"\n        );\n\n        require(\n            keccak256(_metadata[msg.sender].publicKey) != keccak256(pubKey),\n            \"SAME_PUBLIC_KEY\"\n        );\n\n        // modify user metadata\n        _metadata[msg.sender].sismoVaultId = vaultId;\n\n        _metadata[msg.sender].publicKey = pubKey;\n\n        emit PublicKeyChanged(msg.sender, pubKey);\n\n        return _metadata[msg.sender];\n    }\n\n    function changeEVMAddress(\n        bytes memory sismoConnectResponse,\n        address newAddress\n    ) external returns (Structures.User memory) {\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\n            sismoConnectResponse\n        );\n\n        require(_users.contains(msg.sender), \"USER_DOES_NOT_EXIST\");\n\n        require(\n            keccak256(_metadata[msg.sender].sismoVaultId) == keccak256(vaultId),\n            \"VAULT_ID_MISMATCH\"\n        );\n\n        require(\n            _metadata[msg.sender].evmAddress != newAddress,\n            \"SAME_EVM_ADDRESS\"\n        );\n\n        require(!_users.contains(newAddress), \"USER_ALREADY_EXISTS\");\n\n        Structures.User memory newUser = Structures.User({\n            evmAddress: newAddress,\n            sismoVaultId: vaultId,\n            publicKey: _metadata[msg.sender].publicKey\n        });\n\n        _metadata[newAddress] = newUser;\n        _users.add(newAddress);\n\n        emit EVMAddressChanged(msg.sender, newAddress);\n\n        // remove old user\n        _users.remove(msg.sender);\n        delete _metadata[msg.sender];\n\n        return newUser;\n    }\n\n    function getUsers() public view returns (address[] memory) {\n        return _users.values();\n    }\n\n    function getUserCount() public view returns (uint256) {\n        return _users.length();\n    }\n\n    function getUserAt(uint256 index) public view returns (address) {\n        require(index < _users.length(), \"OUT_OF_RANGE\");\n        return _users.at(index);\n    }\n\n    function checkifUserExist(\n        address userAddress\n    ) external view returns (bool) {\n        return _users.contains(userAddress);\n    }\n\n    function getPaginatedUsers(\n        uint256 startIndex,\n        uint256 endIndex\n    ) public view returns (address[] memory) {\n        require(startIndex < endIndex, \"START_INDEX_GREATER_THAN_END_INDEX\");\n        require(endIndex <= _users.length(), \"OUT_OF_RANGE\");\n\n        address[] memory range = new address[](endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _users.at(i);\n        }\n\n        return range;\n    }\n\n    function getUserMetadata(\n        address userAddress\n    ) external view returns (Structures.User memory) {\n        return _metadata[userAddress];\n    }\n\n    function getUserPublicKey(\n        address userAddress\n    ) external view returns (bytes memory) {\n        return _metadata[userAddress].publicKey;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateVerifier.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateVerifier.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/library/Structures.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/library/Structures.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/registry/MecenateUsers.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/registry/MecenateUsers.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[134],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":135,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":134,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,134],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[134]},"id":135,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"111:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":134,"linearizedBaseContracts":[134],"name":"Context","nameLocation":"626:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":123,"nodeType":"Block","src":"702:34:1","statements":[{"expression":{"expression":{"id":120,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:1","memberName":"sender","nodeType":"MemberAccess","src":"719:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":119,"id":122,"nodeType":"Return","src":"712:17:1"}]},"id":124,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:1","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[],"src":"659:2:1"},"returnParameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":124,"src":"693:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:1"},"scope":134,"src":"640:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":132,"nodeType":"Block","src":"809:32:1","statements":[{"expression":{"expression":{"id":129,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:1","memberName":"data","nodeType":"MemberAccess","src":"826:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":128,"id":131,"nodeType":"Return","src":"819:15:1"}]},"id":133,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:1","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"759:2:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":133,"src":"793:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":126,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:1"},"scope":134,"src":"742:99:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":135,"src":"608:235:1","usedErrors":[]}],"src":"86:758:1"},"id":1},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[747]},"id":748,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":136,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"230:1098:2","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":747,"linearizedBaseContracts":[747],"name":"EnumerableSet","nameLocation":"1337:13:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":145,"members":[{"constant":false,"id":140,"mutability":"mutable","name":"_values","nameLocation":"1861:7:2","nodeType":"VariableDeclaration","scope":145,"src":"1851:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1851:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":139,"nodeType":"ArrayTypeName","src":"1851:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":144,"mutability":"mutable","name":"_indexes","nameLocation":"2029:8:2","nodeType":"VariableDeclaration","scope":145,"src":"2001:36:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":143,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2001:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"2020:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1804:3:2","nodeType":"StructDefinition","scope":747,"src":"1797:247:2","visibility":"public"},{"body":{"id":186,"nodeType":"Block","src":"2283:335:2","statements":[{"condition":{"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2297:22:2","subExpression":{"arguments":[{"id":157,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"2308:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"2313:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":156,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"2298:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":184,"nodeType":"Block","src":"2575:37:2","statements":[{"expression":{"hexValue":"66616c7365","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2596:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":155,"id":183,"nodeType":"Return","src":"2589:12:2"}]},"id":185,"nodeType":"IfStatement","src":"2293:319:2","trueBody":{"id":181,"nodeType":"Block","src":"2321:248:2","statements":[{"expression":{"arguments":[{"id":166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"2352:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":161,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"2335:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2339:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"2335:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2347:4:2","memberName":"push","nodeType":"MemberAccess","src":"2335:16:2","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"ExpressionStatement","src":"2335:23:2"},{"expression":{"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":169,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"2493:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2497:8:2","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":144,"src":"2493:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":173,"indexExpression":{"id":171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"2506:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2493:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":174,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"2515:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":175,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2519:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"2515:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2527:6:2","memberName":"length","nodeType":"MemberAccess","src":"2515:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2493:40:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":178,"nodeType":"ExpressionStatement","src":"2493:40:2"},{"expression":{"hexValue":"74727565","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2554:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":155,"id":180,"nodeType":"Return","src":"2547:11:2"}]}}]},"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"2050:159:2","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":187,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2223:4:2","nodeType":"FunctionDefinition","parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"set","nameLocation":"2240:3:2","nodeType":"VariableDeclaration","scope":187,"src":"2228:15:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":148,"nodeType":"UserDefinedTypeName","pathNode":{"id":147,"name":"Set","nameLocations":["2228:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"2228:3:2"},"referencedDeclaration":145,"src":"2228:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"value","nameLocation":"2253:5:2","nodeType":"VariableDeclaration","scope":187,"src":"2245:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2245:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2227:32:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":187,"src":"2277:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":153,"name":"bool","nodeType":"ElementaryTypeName","src":"2277:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2276:6:2"},"scope":747,"src":"2214:404:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":270,"nodeType":"Block","src":"2858:1316:2","statements":[{"assignments":[199],"declarations":[{"constant":false,"id":199,"mutability":"mutable","name":"valueIndex","nameLocation":"2976:10:2","nodeType":"VariableDeclaration","scope":270,"src":"2968:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":204,"initialValue":{"baseExpression":{"expression":{"id":200,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2989:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":201,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:8:2","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":144,"src":"2989:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":203,"indexExpression":{"id":202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3002:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2989:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2968:40:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":205,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"3023:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3037:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3023:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":268,"nodeType":"Block","src":"4131:37:2","statements":[{"expression":{"hexValue":"66616c7365","id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4152:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":197,"id":267,"nodeType":"Return","src":"4145:12:2"}]},"id":269,"nodeType":"IfStatement","src":"3019:1149:2","trueBody":{"id":265,"nodeType":"Block","src":"3040:1085:2","statements":[{"assignments":[209],"declarations":[{"constant":false,"id":209,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3400:13:2","nodeType":"VariableDeclaration","scope":265,"src":"3392:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint256","nodeType":"ElementaryTypeName","src":"3392:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":213,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"3416:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3429:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3416:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3392:38:2"},{"assignments":[215],"declarations":[{"constant":false,"id":215,"mutability":"mutable","name":"lastIndex","nameLocation":"3452:9:2","nodeType":"VariableDeclaration","scope":265,"src":"3444:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"3444:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":221,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":216,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3464:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":217,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3468:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"3464:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3476:6:2","memberName":"length","nodeType":"MemberAccess","src":"3464:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3485:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3464:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3444:42:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":222,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"3505:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":223,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"3518:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3505:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":249,"nodeType":"IfStatement","src":"3501:398:2","trueBody":{"id":248,"nodeType":"Block","src":"3533:366:2","statements":[{"assignments":[226],"declarations":[{"constant":false,"id":226,"mutability":"mutable","name":"lastValue","nameLocation":"3559:9:2","nodeType":"VariableDeclaration","scope":248,"src":"3551:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3551:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":231,"initialValue":{"baseExpression":{"expression":{"id":227,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3571:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":228,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3575:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"3571:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":230,"indexExpression":{"id":229,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"3583:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3571:22:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3551:42:2"},{"expression":{"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":232,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3693:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3697:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"3693:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":236,"indexExpression":{"id":234,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"3705:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3693:26:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":237,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3722:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3693:38:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":239,"nodeType":"ExpressionStatement","src":"3693:38:2"},{"expression":{"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":240,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3805:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3809:8:2","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":144,"src":"3805:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":244,"indexExpression":{"id":242,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3818:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3805:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":245,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"3831:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3805:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":247,"nodeType":"ExpressionStatement","src":"3805:36:2"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":250,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3977:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3981:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"3977:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3989:3:2","memberName":"pop","nodeType":"MemberAccess","src":"3977:15:2","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3977:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":256,"nodeType":"ExpressionStatement","src":"3977:17:2"},{"expression":{"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4062:26:2","subExpression":{"baseExpression":{"expression":{"id":257,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"4069:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":258,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4073:8:2","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":144,"src":"4069:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":260,"indexExpression":{"id":259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4082:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4069:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":262,"nodeType":"ExpressionStatement","src":"4062:26:2"},{"expression":{"hexValue":"74727565","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4110:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":197,"id":264,"nodeType":"Return","src":"4103:11:2"}]}}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"2624:157:2","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":271,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2795:7:2","nodeType":"FunctionDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"set","nameLocation":"2815:3:2","nodeType":"VariableDeclaration","scope":271,"src":"2803:15:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":190,"nodeType":"UserDefinedTypeName","pathNode":{"id":189,"name":"Set","nameLocations":["2803:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"2803:3:2"},"referencedDeclaration":145,"src":"2803:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"value","nameLocation":"2828:5:2","nodeType":"VariableDeclaration","scope":271,"src":"2820:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2820:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2802:32:2"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":271,"src":"2852:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":195,"name":"bool","nodeType":"ElementaryTypeName","src":"2852:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2851:6:2"},"scope":747,"src":"2786:1388:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":289,"nodeType":"Block","src":"4334:48:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":282,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"4351:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4355:8:2","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":144,"src":"4351:12:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":285,"indexExpression":{"id":284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"4364:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4351:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4374:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4351:24:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":281,"id":288,"nodeType":"Return","src":"4344:31:2"}]},"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"4180:70:2","text":" @dev Returns true if the value is in the set. O(1)."},"id":290,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4264:9:2","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"set","nameLocation":"4286:3:2","nodeType":"VariableDeclaration","scope":290,"src":"4274:15:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":274,"nodeType":"UserDefinedTypeName","pathNode":{"id":273,"name":"Set","nameLocations":["4274:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"4274:3:2"},"referencedDeclaration":145,"src":"4274:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":277,"mutability":"mutable","name":"value","nameLocation":"4299:5:2","nodeType":"VariableDeclaration","scope":290,"src":"4291:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4291:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4273:32:2"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"4328:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":279,"name":"bool","nodeType":"ElementaryTypeName","src":"4328:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4327:6:2"},"scope":747,"src":"4255:127:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":303,"nodeType":"Block","src":"4528:42:2","statements":[{"expression":{"expression":{"expression":{"id":299,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4545:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4549:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"4545:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4557:6:2","memberName":"length","nodeType":"MemberAccess","src":"4545:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":298,"id":302,"nodeType":"Return","src":"4538:25:2"}]},"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"4388:70:2","text":" @dev Returns the number of values on the set. O(1)."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4472:7:2","nodeType":"FunctionDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"set","nameLocation":"4492:3:2","nodeType":"VariableDeclaration","scope":304,"src":"4480:15:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":293,"nodeType":"UserDefinedTypeName","pathNode":{"id":292,"name":"Set","nameLocations":["4480:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"4480:3:2"},"referencedDeclaration":145,"src":"4480:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4479:17:2"},"returnParameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"4519:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":296,"name":"uint256","nodeType":"ElementaryTypeName","src":"4519:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4518:9:2"},"scope":747,"src":"4463:107:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":320,"nodeType":"Block","src":"4988:42:2","statements":[{"expression":{"baseExpression":{"expression":{"id":315,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"5005:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5009:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"5005:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":318,"indexExpression":{"id":317,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"5017:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5005:18:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":314,"id":319,"nodeType":"Return","src":"4998:25:2"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"4576:331:2","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":321,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4921:3:2","nodeType":"FunctionDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"set","nameLocation":"4937:3:2","nodeType":"VariableDeclaration","scope":321,"src":"4925:15:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":307,"nodeType":"UserDefinedTypeName","pathNode":{"id":306,"name":"Set","nameLocations":["4925:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"4925:3:2"},"referencedDeclaration":145,"src":"4925:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":310,"mutability":"mutable","name":"index","nameLocation":"4950:5:2","nodeType":"VariableDeclaration","scope":321,"src":"4942:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":309,"name":"uint256","nodeType":"ElementaryTypeName","src":"4942:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4924:32:2"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":321,"src":"4979:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4979:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4978:9:2"},"scope":747,"src":"4912:118:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":334,"nodeType":"Block","src":"5644:35:2","statements":[{"expression":{"expression":{"id":331,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"5661:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5665:7:2","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":140,"src":"5661:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":330,"id":333,"nodeType":"Return","src":"5654:18:2"}]},"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"5036:529:2","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":335,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5579:7:2","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"set","nameLocation":"5599:3:2","nodeType":"VariableDeclaration","scope":335,"src":"5587:15:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":324,"nodeType":"UserDefinedTypeName","pathNode":{"id":323,"name":"Set","nameLocations":["5587:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"5587:3:2"},"referencedDeclaration":145,"src":"5587:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5586:17:2"},"returnParameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":335,"src":"5626:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5626:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":328,"nodeType":"ArrayTypeName","src":"5626:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5625:18:2"},"scope":747,"src":"5570:109:2","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":339,"members":[{"constant":false,"id":338,"mutability":"mutable","name":"_inner","nameLocation":"5736:6:2","nodeType":"VariableDeclaration","scope":339,"src":"5732:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":337,"nodeType":"UserDefinedTypeName","pathNode":{"id":336,"name":"Set","nameLocations":["5732:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"5732:3:2"},"referencedDeclaration":145,"src":"5732:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5711:10:2","nodeType":"StructDefinition","scope":747,"src":"5704:45:2","visibility":"public"},{"body":{"id":356,"nodeType":"Block","src":"5995:47:2","statements":[{"expression":{"arguments":[{"expression":{"id":351,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"6017:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6021:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":338,"src":"6017:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"6029:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":350,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"6012:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6012:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":349,"id":355,"nodeType":"Return","src":"6005:30:2"}]},"documentation":{"id":340,"nodeType":"StructuredDocumentation","src":"5755:159:2","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":357,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5928:3:2","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"set","nameLocation":"5951:3:2","nodeType":"VariableDeclaration","scope":357,"src":"5932:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":342,"nodeType":"UserDefinedTypeName","pathNode":{"id":341,"name":"Bytes32Set","nameLocations":["5932:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"5932:10:2"},"referencedDeclaration":339,"src":"5932:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"value","nameLocation":"5964:5:2","nodeType":"VariableDeclaration","scope":357,"src":"5956:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5956:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5931:39:2"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":357,"src":"5989:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":347,"name":"bool","nodeType":"ElementaryTypeName","src":"5989:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5988:6:2"},"scope":747,"src":"5919:123:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":374,"nodeType":"Block","src":"6289:50:2","statements":[{"expression":{"arguments":[{"expression":{"id":369,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"6314:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6318:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":338,"src":"6314:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"6326:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":368,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"6306:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6306:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":367,"id":373,"nodeType":"Return","src":"6299:33:2"}]},"documentation":{"id":358,"nodeType":"StructuredDocumentation","src":"6048:157:2","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":375,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6219:6:2","nodeType":"FunctionDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"set","nameLocation":"6245:3:2","nodeType":"VariableDeclaration","scope":375,"src":"6226:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":360,"nodeType":"UserDefinedTypeName","pathNode":{"id":359,"name":"Bytes32Set","nameLocations":["6226:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"6226:10:2"},"referencedDeclaration":339,"src":"6226:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":363,"mutability":"mutable","name":"value","nameLocation":"6258:5:2","nodeType":"VariableDeclaration","scope":375,"src":"6250:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6225:39:2"},"returnParameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"6283:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":365,"name":"bool","nodeType":"ElementaryTypeName","src":"6283:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6282:6:2"},"scope":747,"src":"6210:129:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":392,"nodeType":"Block","src":"6506:52:2","statements":[{"expression":{"arguments":[{"expression":{"id":387,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"6533:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6537:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":338,"src":"6533:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"6545:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":386,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"6523:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6523:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":385,"id":391,"nodeType":"Return","src":"6516:35:2"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"6345:70:2","text":" @dev Returns true if the value is in the set. O(1)."},"id":393,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6429:8:2","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"set","nameLocation":"6457:3:2","nodeType":"VariableDeclaration","scope":393,"src":"6438:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":378,"nodeType":"UserDefinedTypeName","pathNode":{"id":377,"name":"Bytes32Set","nameLocations":["6438:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"6438:10:2"},"referencedDeclaration":339,"src":"6438:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"value","nameLocation":"6470:5:2","nodeType":"VariableDeclaration","scope":393,"src":"6462:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6462:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6437:39:2"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":393,"src":"6500:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":383,"name":"bool","nodeType":"ElementaryTypeName","src":"6500:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6499:6:2"},"scope":747,"src":"6420:138:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":407,"nodeType":"Block","src":"6711:43:2","statements":[{"expression":{"arguments":[{"expression":{"id":403,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"6736:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6740:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":338,"src":"6736:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":402,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"6728:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6728:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":401,"id":406,"nodeType":"Return","src":"6721:26:2"}]},"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"6564:70:2","text":" @dev Returns the number of values in the set. O(1)."},"id":408,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6648:6:2","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"set","nameLocation":"6674:3:2","nodeType":"VariableDeclaration","scope":408,"src":"6655:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"Bytes32Set","nameLocations":["6655:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"6655:10:2"},"referencedDeclaration":339,"src":"6655:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6654:24:2"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":408,"src":"6702:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":399,"name":"uint256","nodeType":"ElementaryTypeName","src":"6702:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6701:9:2"},"scope":747,"src":"6639:115:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":425,"nodeType":"Block","src":"7179:46:2","statements":[{"expression":{"arguments":[{"expression":{"id":420,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"7200:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7204:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":338,"src":"7200:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":422,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"7212:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":419,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"7196:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7196:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":418,"id":424,"nodeType":"Return","src":"7189:29:2"}]},"documentation":{"id":409,"nodeType":"StructuredDocumentation","src":"6760:331:2","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":426,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7105:2:2","nodeType":"FunctionDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"set","nameLocation":"7127:3:2","nodeType":"VariableDeclaration","scope":426,"src":"7108:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":411,"nodeType":"UserDefinedTypeName","pathNode":{"id":410,"name":"Bytes32Set","nameLocations":["7108:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"7108:10:2"},"referencedDeclaration":339,"src":"7108:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"index","nameLocation":"7140:5:2","nodeType":"VariableDeclaration","scope":426,"src":"7132:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"7132:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:39:2"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":426,"src":"7170:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7170:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7169:9:2"},"scope":747,"src":"7096:129:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":455,"nodeType":"Block","src":"7846:219:2","statements":[{"assignments":[440],"declarations":[{"constant":false,"id":440,"mutability":"mutable","name":"store","nameLocation":"7873:5:2","nodeType":"VariableDeclaration","scope":455,"src":"7856:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7856:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":439,"nodeType":"ArrayTypeName","src":"7856:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":445,"initialValue":{"arguments":[{"expression":{"id":442,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"7889:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7893:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":338,"src":"7889:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":441,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"7881:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7881:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7856:44:2"},{"assignments":[450],"declarations":[{"constant":false,"id":450,"mutability":"mutable","name":"result","nameLocation":"7927:6:2","nodeType":"VariableDeclaration","scope":455,"src":"7910:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7910:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":449,"nodeType":"ArrayTypeName","src":"7910:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":451,"nodeType":"VariableDeclarationStatement","src":"7910:23:2"},{"AST":{"nodeType":"YulBlock","src":"7996:39:2","statements":[{"nodeType":"YulAssignment","src":"8010:15:2","value":{"name":"store","nodeType":"YulIdentifier","src":"8020:5:2"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8010:6:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":450,"isOffset":false,"isSlot":false,"src":"8010:6:2","valueSize":1},{"declaration":440,"isOffset":false,"isSlot":false,"src":"8020:5:2","valueSize":1}],"id":452,"nodeType":"InlineAssembly","src":"7987:48:2"},{"expression":{"id":453,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"8052:6:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":435,"id":454,"nodeType":"Return","src":"8045:13:2"}]},"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"7231:529:2","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":456,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7774:6:2","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"set","nameLocation":"7800:3:2","nodeType":"VariableDeclaration","scope":456,"src":"7781:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":429,"nodeType":"UserDefinedTypeName","pathNode":{"id":428,"name":"Bytes32Set","nameLocations":["7781:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"7781:10:2"},"referencedDeclaration":339,"src":"7781:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$339_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7780:24:2"},"returnParameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":456,"src":"7828:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":432,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7828:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":433,"nodeType":"ArrayTypeName","src":"7828:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7827:18:2"},"scope":747,"src":"7765:300:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":460,"members":[{"constant":false,"id":459,"mutability":"mutable","name":"_inner","nameLocation":"8122:6:2","nodeType":"VariableDeclaration","scope":460,"src":"8118:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":458,"nodeType":"UserDefinedTypeName","pathNode":{"id":457,"name":"Set","nameLocations":["8118:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"8118:3:2"},"referencedDeclaration":145,"src":"8118:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8097:10:2","nodeType":"StructDefinition","scope":747,"src":"8090:45:2","visibility":"public"},{"body":{"id":486,"nodeType":"Block","src":"8381:74:2","statements":[{"expression":{"arguments":[{"expression":{"id":472,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8403:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8407:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":459,"src":"8403:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"8439:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8431:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":478,"name":"uint160","nodeType":"ElementaryTypeName","src":"8431:7:2","typeDescriptions":{}}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8431:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"8423:7:2","typeDescriptions":{}}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8423:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":474,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8415:7:2","typeDescriptions":{}}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":471,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"8398:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8398:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":470,"id":485,"nodeType":"Return","src":"8391:57:2"}]},"documentation":{"id":461,"nodeType":"StructuredDocumentation","src":"8141:159:2","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":487,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8314:3:2","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"set","nameLocation":"8337:3:2","nodeType":"VariableDeclaration","scope":487,"src":"8318:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":463,"nodeType":"UserDefinedTypeName","pathNode":{"id":462,"name":"AddressSet","nameLocations":["8318:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"8318:10:2"},"referencedDeclaration":460,"src":"8318:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"value","nameLocation":"8350:5:2","nodeType":"VariableDeclaration","scope":487,"src":"8342:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"8342:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8317:39:2"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":487,"src":"8375:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":468,"name":"bool","nodeType":"ElementaryTypeName","src":"8375:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8374:6:2"},"scope":747,"src":"8305:150:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":513,"nodeType":"Block","src":"8702:77:2","statements":[{"expression":{"arguments":[{"expression":{"id":499,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"8727:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8731:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":459,"src":"8727:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"8763:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8755:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":505,"name":"uint160","nodeType":"ElementaryTypeName","src":"8755:7:2","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8755:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":503,"name":"uint256","nodeType":"ElementaryTypeName","src":"8747:7:2","typeDescriptions":{}}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8747:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8739:7:2","typeDescriptions":{}}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":498,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"8719:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8719:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":497,"id":512,"nodeType":"Return","src":"8712:60:2"}]},"documentation":{"id":488,"nodeType":"StructuredDocumentation","src":"8461:157:2","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":514,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8632:6:2","nodeType":"FunctionDefinition","parameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"set","nameLocation":"8658:3:2","nodeType":"VariableDeclaration","scope":514,"src":"8639:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":490,"nodeType":"UserDefinedTypeName","pathNode":{"id":489,"name":"AddressSet","nameLocations":["8639:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"8639:10:2"},"referencedDeclaration":460,"src":"8639:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"value","nameLocation":"8671:5:2","nodeType":"VariableDeclaration","scope":514,"src":"8663:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"8663:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8638:39:2"},"returnParameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":514,"src":"8696:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":495,"name":"bool","nodeType":"ElementaryTypeName","src":"8696:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8695:6:2"},"scope":747,"src":"8623:156:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":540,"nodeType":"Block","src":"8946:79:2","statements":[{"expression":{"arguments":[{"expression":{"id":526,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"8973:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8977:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":459,"src":"8973:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"9009:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9001:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":532,"name":"uint160","nodeType":"ElementaryTypeName","src":"9001:7:2","typeDescriptions":{}}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9001:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":530,"name":"uint256","nodeType":"ElementaryTypeName","src":"8993:7:2","typeDescriptions":{}}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8993:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8985:7:2","typeDescriptions":{}}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":525,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"8963:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8963:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":524,"id":539,"nodeType":"Return","src":"8956:62:2"}]},"documentation":{"id":515,"nodeType":"StructuredDocumentation","src":"8785:70:2","text":" @dev Returns true if the value is in the set. O(1)."},"id":541,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8869:8:2","nodeType":"FunctionDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"set","nameLocation":"8897:3:2","nodeType":"VariableDeclaration","scope":541,"src":"8878:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":517,"nodeType":"UserDefinedTypeName","pathNode":{"id":516,"name":"AddressSet","nameLocations":["8878:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"8878:10:2"},"referencedDeclaration":460,"src":"8878:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"value","nameLocation":"8910:5:2","nodeType":"VariableDeclaration","scope":541,"src":"8902:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"8902:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8877:39:2"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":541,"src":"8940:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":522,"name":"bool","nodeType":"ElementaryTypeName","src":"8940:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8939:6:2"},"scope":747,"src":"8860:165:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":555,"nodeType":"Block","src":"9178:43:2","statements":[{"expression":{"arguments":[{"expression":{"id":551,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"9203:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":552,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9207:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":459,"src":"9203:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":550,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"9195:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9195:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":549,"id":554,"nodeType":"Return","src":"9188:26:2"}]},"documentation":{"id":542,"nodeType":"StructuredDocumentation","src":"9031:70:2","text":" @dev Returns the number of values in the set. O(1)."},"id":556,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9115:6:2","nodeType":"FunctionDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"set","nameLocation":"9141:3:2","nodeType":"VariableDeclaration","scope":556,"src":"9122:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":544,"nodeType":"UserDefinedTypeName","pathNode":{"id":543,"name":"AddressSet","nameLocations":["9122:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"9122:10:2"},"referencedDeclaration":460,"src":"9122:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9121:24:2"},"returnParameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":556,"src":"9169:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":547,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9168:9:2"},"scope":747,"src":"9106:115:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":582,"nodeType":"Block","src":"9646:73:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":574,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"9691:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9695:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":459,"src":"9691:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":576,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"9703:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":573,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"9687:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9687:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9679:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"9679:7:2","typeDescriptions":{}}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9679:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":569,"name":"uint160","nodeType":"ElementaryTypeName","src":"9671:7:2","typeDescriptions":{}}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9671:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"9663:7:2","typeDescriptions":{}}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":566,"id":581,"nodeType":"Return","src":"9656:56:2"}]},"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"9227:331:2","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":583,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9572:2:2","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"set","nameLocation":"9594:3:2","nodeType":"VariableDeclaration","scope":583,"src":"9575:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":559,"nodeType":"UserDefinedTypeName","pathNode":{"id":558,"name":"AddressSet","nameLocations":["9575:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"9575:10:2"},"referencedDeclaration":460,"src":"9575:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"index","nameLocation":"9607:5:2","nodeType":"VariableDeclaration","scope":583,"src":"9599:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":561,"name":"uint256","nodeType":"ElementaryTypeName","src":"9599:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9574:39:2"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":583,"src":"9637:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":564,"name":"address","nodeType":"ElementaryTypeName","src":"9637:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9636:9:2"},"scope":747,"src":"9563:156:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":612,"nodeType":"Block","src":"10340:219:2","statements":[{"assignments":[597],"declarations":[{"constant":false,"id":597,"mutability":"mutable","name":"store","nameLocation":"10367:5:2","nodeType":"VariableDeclaration","scope":612,"src":"10350:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10350:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":596,"nodeType":"ArrayTypeName","src":"10350:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":602,"initialValue":{"arguments":[{"expression":{"id":599,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"10383:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":600,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10387:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":459,"src":"10383:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":598,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"10375:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10375:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10350:44:2"},{"assignments":[607],"declarations":[{"constant":false,"id":607,"mutability":"mutable","name":"result","nameLocation":"10421:6:2","nodeType":"VariableDeclaration","scope":612,"src":"10404:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":606,"nodeType":"ArrayTypeName","src":"10404:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":608,"nodeType":"VariableDeclarationStatement","src":"10404:23:2"},{"AST":{"nodeType":"YulBlock","src":"10490:39:2","statements":[{"nodeType":"YulAssignment","src":"10504:15:2","value":{"name":"store","nodeType":"YulIdentifier","src":"10514:5:2"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10504:6:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":607,"isOffset":false,"isSlot":false,"src":"10504:6:2","valueSize":1},{"declaration":597,"isOffset":false,"isSlot":false,"src":"10514:5:2","valueSize":1}],"id":609,"nodeType":"InlineAssembly","src":"10481:48:2"},{"expression":{"id":610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"10546:6:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":592,"id":611,"nodeType":"Return","src":"10539:13:2"}]},"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"9725:529:2","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":613,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10268:6:2","nodeType":"FunctionDefinition","parameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"set","nameLocation":"10294:3:2","nodeType":"VariableDeclaration","scope":613,"src":"10275:22:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":586,"nodeType":"UserDefinedTypeName","pathNode":{"id":585,"name":"AddressSet","nameLocations":["10275:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"10275:10:2"},"referencedDeclaration":460,"src":"10275:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10274:24:2"},"returnParameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":613,"src":"10322:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"10322:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":590,"nodeType":"ArrayTypeName","src":"10322:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10321:18:2"},"scope":747,"src":"10259:300:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":617,"members":[{"constant":false,"id":616,"mutability":"mutable","name":"_inner","nameLocation":"10610:6:2","nodeType":"VariableDeclaration","scope":617,"src":"10606:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":615,"nodeType":"UserDefinedTypeName","pathNode":{"id":614,"name":"Set","nameLocations":["10606:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":145,"src":"10606:3:2"},"referencedDeclaration":145,"src":"10606:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10588:7:2","nodeType":"StructDefinition","scope":747,"src":"10581:42:2","visibility":"public"},{"body":{"id":637,"nodeType":"Block","src":"10866:56:2","statements":[{"expression":{"arguments":[{"expression":{"id":629,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"10888:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10892:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":616,"src":"10888:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"10908:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10900:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10900:7:2","typeDescriptions":{}}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10900:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":628,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"10883:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10883:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":627,"id":636,"nodeType":"Return","src":"10876:39:2"}]},"documentation":{"id":618,"nodeType":"StructuredDocumentation","src":"10629:159:2","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":638,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10802:3:2","nodeType":"FunctionDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"set","nameLocation":"10822:3:2","nodeType":"VariableDeclaration","scope":638,"src":"10806:19:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":620,"nodeType":"UserDefinedTypeName","pathNode":{"id":619,"name":"UintSet","nameLocations":["10806:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":617,"src":"10806:7:2"},"referencedDeclaration":617,"src":"10806:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":623,"mutability":"mutable","name":"value","nameLocation":"10835:5:2","nodeType":"VariableDeclaration","scope":638,"src":"10827:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":622,"name":"uint256","nodeType":"ElementaryTypeName","src":"10827:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10805:36:2"},"returnParameters":{"id":627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":638,"src":"10860:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":625,"name":"bool","nodeType":"ElementaryTypeName","src":"10860:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10859:6:2"},"scope":747,"src":"10793:129:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":658,"nodeType":"Block","src":"11166:59:2","statements":[{"expression":{"arguments":[{"expression":{"id":650,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"11191:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":651,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11195:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":616,"src":"11191:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11211:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11203:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11203:7:2","typeDescriptions":{}}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":649,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"11183:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11183:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":648,"id":657,"nodeType":"Return","src":"11176:42:2"}]},"documentation":{"id":639,"nodeType":"StructuredDocumentation","src":"10928:157:2","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":659,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11099:6:2","nodeType":"FunctionDefinition","parameters":{"id":645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"set","nameLocation":"11122:3:2","nodeType":"VariableDeclaration","scope":659,"src":"11106:19:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":641,"nodeType":"UserDefinedTypeName","pathNode":{"id":640,"name":"UintSet","nameLocations":["11106:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":617,"src":"11106:7:2"},"referencedDeclaration":617,"src":"11106:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"value","nameLocation":"11135:5:2","nodeType":"VariableDeclaration","scope":659,"src":"11127:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":643,"name":"uint256","nodeType":"ElementaryTypeName","src":"11127:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11105:36:2"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":659,"src":"11160:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":646,"name":"bool","nodeType":"ElementaryTypeName","src":"11160:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11159:6:2"},"scope":747,"src":"11090:135:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":679,"nodeType":"Block","src":"11389:61:2","statements":[{"expression":{"arguments":[{"expression":{"id":671,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"11416:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11420:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":616,"src":"11416:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"11436:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11428:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11428:7:2","typeDescriptions":{}}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11428:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":670,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"11406:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11406:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":669,"id":678,"nodeType":"Return","src":"11399:44:2"}]},"documentation":{"id":660,"nodeType":"StructuredDocumentation","src":"11231:70:2","text":" @dev Returns true if the value is in the set. O(1)."},"id":680,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11315:8:2","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"set","nameLocation":"11340:3:2","nodeType":"VariableDeclaration","scope":680,"src":"11324:19:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":662,"nodeType":"UserDefinedTypeName","pathNode":{"id":661,"name":"UintSet","nameLocations":["11324:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":617,"src":"11324:7:2"},"referencedDeclaration":617,"src":"11324:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"value","nameLocation":"11353:5:2","nodeType":"VariableDeclaration","scope":680,"src":"11345:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"11345:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11323:36:2"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":680,"src":"11383:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":667,"name":"bool","nodeType":"ElementaryTypeName","src":"11383:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11382:6:2"},"scope":747,"src":"11306:144:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":694,"nodeType":"Block","src":"11600:43:2","statements":[{"expression":{"arguments":[{"expression":{"id":690,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"11625:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":691,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11629:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":616,"src":"11625:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":689,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"11617:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11617:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":688,"id":693,"nodeType":"Return","src":"11610:26:2"}]},"documentation":{"id":681,"nodeType":"StructuredDocumentation","src":"11456:70:2","text":" @dev Returns the number of values in the set. O(1)."},"id":695,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11540:6:2","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"set","nameLocation":"11563:3:2","nodeType":"VariableDeclaration","scope":695,"src":"11547:19:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":683,"nodeType":"UserDefinedTypeName","pathNode":{"id":682,"name":"UintSet","nameLocations":["11547:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":617,"src":"11547:7:2"},"referencedDeclaration":617,"src":"11547:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11546:21:2"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":695,"src":"11591:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":686,"name":"uint256","nodeType":"ElementaryTypeName","src":"11591:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11590:9:2"},"scope":747,"src":"11531:112:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":715,"nodeType":"Block","src":"12065:55:2","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":709,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"12094:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12098:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":616,"src":"12094:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":711,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"12106:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":708,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"12090:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12090:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12082:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":706,"name":"uint256","nodeType":"ElementaryTypeName","src":"12082:7:2","typeDescriptions":{}}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12082:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":705,"id":714,"nodeType":"Return","src":"12075:38:2"}]},"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"11649:331:2","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":716,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11994:2:2","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"set","nameLocation":"12013:3:2","nodeType":"VariableDeclaration","scope":716,"src":"11997:19:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":698,"nodeType":"UserDefinedTypeName","pathNode":{"id":697,"name":"UintSet","nameLocations":["11997:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":617,"src":"11997:7:2"},"referencedDeclaration":617,"src":"11997:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":701,"mutability":"mutable","name":"index","nameLocation":"12026:5:2","nodeType":"VariableDeclaration","scope":716,"src":"12018:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":700,"name":"uint256","nodeType":"ElementaryTypeName","src":"12018:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11996:36:2"},"returnParameters":{"id":705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":716,"src":"12056:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"12056:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12055:9:2"},"scope":747,"src":"11985:135:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":745,"nodeType":"Block","src":"12738:219:2","statements":[{"assignments":[730],"declarations":[{"constant":false,"id":730,"mutability":"mutable","name":"store","nameLocation":"12765:5:2","nodeType":"VariableDeclaration","scope":745,"src":"12748:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12748:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":729,"nodeType":"ArrayTypeName","src":"12748:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":735,"initialValue":{"arguments":[{"expression":{"id":732,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"12781:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12785:6:2","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":616,"src":"12781:10:2","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$145_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":731,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"12773:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$145_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12773:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12748:44:2"},{"assignments":[740],"declarations":[{"constant":false,"id":740,"mutability":"mutable","name":"result","nameLocation":"12819:6:2","nodeType":"VariableDeclaration","scope":745,"src":"12802:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"12802:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":739,"nodeType":"ArrayTypeName","src":"12802:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":741,"nodeType":"VariableDeclarationStatement","src":"12802:23:2"},{"AST":{"nodeType":"YulBlock","src":"12888:39:2","statements":[{"nodeType":"YulAssignment","src":"12902:15:2","value":{"name":"store","nodeType":"YulIdentifier","src":"12912:5:2"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12902:6:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":740,"isOffset":false,"isSlot":false,"src":"12902:6:2","valueSize":1},{"declaration":730,"isOffset":false,"isSlot":false,"src":"12912:5:2","valueSize":1}],"id":742,"nodeType":"InlineAssembly","src":"12879:48:2"},{"expression":{"id":743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"12944:6:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":725,"id":744,"nodeType":"Return","src":"12937:13:2"}]},"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"12126:529:2","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":746,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12669:6:2","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"set","nameLocation":"12692:3:2","nodeType":"VariableDeclaration","scope":746,"src":"12676:19:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":719,"nodeType":"UserDefinedTypeName","pathNode":{"id":718,"name":"UintSet","nameLocations":["12676:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":617,"src":"12676:7:2"},"referencedDeclaration":617,"src":"12676:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$617_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12675:21:2"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":746,"src":"12720:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"12720:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":723,"nodeType":"ArrayTypeName","src":"12720:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12719:18:2"},"scope":747,"src":"12660:297:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":748,"src":"1329:11630:2","usedErrors":[]}],"src":"205:12755:2"},"id":2},"contracts/interfaces/IMecenateVerifier.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateVerifier.sol","exportedSymbols":{"IMecenateVerifier":[757]},"id":758,"nodeType":"SourceUnit","nodes":[{"id":749,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateVerifier","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":757,"linearizedBaseContracts":[757],"name":"IMecenateVerifier","nameLocation":"35:17:3","nodeType":"ContractDefinition","nodes":[{"functionSelector":"119f0991","id":756,"implemented":false,"kind":"function","modifiers":[],"name":"sismoVerify","nameLocation":"68:11:3","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"102:20:3","nodeType":"VariableDeclaration","scope":756,"src":"89:33:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":750,"name":"bytes","nodeType":"ElementaryTypeName","src":"89:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"79:49:3"},"returnParameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":756,"src":"152:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":753,"name":"bytes","nodeType":"ElementaryTypeName","src":"152:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"151:14:3"},"scope":757,"src":"59:107:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":758,"src":"25:143:3","usedErrors":[]}],"src":"0:169:3"},"id":3},"contracts/library/Structures.sol":{"ast":{"absolutePath":"contracts/library/Structures.sol","exportedSymbols":{"Structures":[918]},"id":919,"nodeType":"SourceUnit","nodes":[{"id":759,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"113:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Structures","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":918,"linearizedBaseContracts":[918],"name":"Structures","nameLocation":"146:10:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Structures.PostStatus","id":768,"members":[{"id":760,"name":"Waiting","nameLocation":"189:7:4","nodeType":"EnumValue","src":"189:7:4"},{"id":761,"name":"Proposed","nameLocation":"206:8:4","nodeType":"EnumValue","src":"206:8:4"},{"id":762,"name":"Accepted","nameLocation":"224:8:4","nodeType":"EnumValue","src":"224:8:4"},{"id":763,"name":"Submitted","nameLocation":"242:9:4","nodeType":"EnumValue","src":"242:9:4"},{"id":764,"name":"Finalized","nameLocation":"261:9:4","nodeType":"EnumValue","src":"261:9:4"},{"id":765,"name":"Punished","nameLocation":"280:8:4","nodeType":"EnumValue","src":"280:8:4"},{"id":766,"name":"Revealed","nameLocation":"298:8:4","nodeType":"EnumValue","src":"298:8:4"},{"id":767,"name":"Renounced","nameLocation":"316:9:4","nodeType":"EnumValue","src":"316:9:4"}],"name":"PostStatus","nameLocation":"168:10:4","nodeType":"EnumDefinition","src":"163:168:4"},{"canonicalName":"Structures.Tokens","id":772,"members":[{"id":769,"name":"NaN","nameLocation":"359:3:4","nodeType":"EnumValue","src":"359:3:4"},{"id":770,"name":"MUSE","nameLocation":"372:4:4","nodeType":"EnumValue","src":"372:4:4"},{"id":771,"name":"DAI","nameLocation":"386:3:4","nodeType":"EnumValue","src":"386:3:4"}],"name":"Tokens","nameLocation":"342:6:4","nodeType":"EnumDefinition","src":"337:58:4"},{"canonicalName":"Structures.PostType","id":778,"members":[{"id":773,"name":"Text","nameLocation":"425:4:4","nodeType":"EnumValue","src":"425:4:4"},{"id":774,"name":"Image","nameLocation":"439:5:4","nodeType":"EnumValue","src":"439:5:4"},{"id":775,"name":"Video","nameLocation":"454:5:4","nodeType":"EnumValue","src":"454:5:4"},{"id":776,"name":"Audio","nameLocation":"469:5:4","nodeType":"EnumValue","src":"469:5:4"},{"id":777,"name":"File","nameLocation":"484:4:4","nodeType":"EnumValue","src":"484:4:4"}],"name":"PostType","nameLocation":"406:8:4","nodeType":"EnumDefinition","src":"401:93:4"},{"canonicalName":"Structures.PostDuration","id":784,"members":[{"id":779,"name":"OneDay","nameLocation":"527:6:4","nodeType":"EnumValue","src":"527:6:4"},{"id":780,"name":"ThreeDays","nameLocation":"543:9:4","nodeType":"EnumValue","src":"543:9:4"},{"id":781,"name":"OneWeek","nameLocation":"562:7:4","nodeType":"EnumValue","src":"562:7:4"},{"id":782,"name":"TwoWeeks","nameLocation":"579:8:4","nodeType":"EnumValue","src":"579:8:4"},{"id":783,"name":"OneMonth","nameLocation":"597:8:4","nodeType":"EnumValue","src":"597:8:4"}],"name":"PostDuration","nameLocation":"504:12:4","nodeType":"EnumDefinition","src":"499:112:4"},{"canonicalName":"Structures.FeedSettings","id":797,"members":[{"constant":false,"id":786,"mutability":"mutable","name":"punishmentRatio","nameLocation":"655:15:4","nodeType":"VariableDeclaration","scope":797,"src":"647:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"647:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"postCount","nameLocation":"688:9:4","nodeType":"VariableDeclaration","scope":797,"src":"680:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"usersModuleContract","nameLocation":"715:19:4","nodeType":"VariableDeclaration","scope":797,"src":"707:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"factoryContract","nameLocation":"752:15:4","nodeType":"VariableDeclaration","scope":797,"src":"744:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":791,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"router","nameLocation":"785:6:4","nodeType":"VariableDeclaration","scope":797,"src":"777:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"version","nameLocation":"808:7:4","nodeType":"VariableDeclaration","scope":797,"src":"801:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":795,"name":"string","nodeType":"ElementaryTypeName","src":"801:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"FeedSettings","nameLocation":"624:12:4","nodeType":"StructDefinition","scope":918,"src":"617:205:4","visibility":"public"},{"canonicalName":"Structures.FactorySettings","id":814,"members":[{"constant":false,"id":799,"mutability":"mutable","name":"treasuryContract","nameLocation":"869:16:4","nodeType":"VariableDeclaration","scope":814,"src":"861:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":801,"mutability":"mutable","name":"usersModuleContract","nameLocation":"903:19:4","nodeType":"VariableDeclaration","scope":814,"src":"895:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"easContract","nameLocation":"940:11:4","nodeType":"VariableDeclaration","scope":814,"src":"932:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":805,"mutability":"mutable","name":"easSchema","nameLocation":"969:9:4","nodeType":"VariableDeclaration","scope":814,"src":"961:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":804,"name":"bytes32","nodeType":"ElementaryTypeName","src":"961:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":807,"mutability":"mutable","name":"museToken","nameLocation":"996:9:4","nodeType":"VariableDeclaration","scope":814,"src":"988:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"988:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"daiToken","nameLocation":"1023:8:4","nodeType":"VariableDeclaration","scope":814,"src":"1015:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":808,"name":"address","nodeType":"ElementaryTypeName","src":"1015:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":811,"mutability":"mutable","name":"wethToken","nameLocation":"1049:9:4","nodeType":"VariableDeclaration","scope":814,"src":"1041:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"router","nameLocation":"1076:6:4","nodeType":"VariableDeclaration","scope":814,"src":"1068:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":812,"name":"address","nodeType":"ElementaryTypeName","src":"1068:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"FactorySettings","nameLocation":"835:15:4","nodeType":"StructDefinition","scope":918,"src":"828:261:4","visibility":"public"},{"canonicalName":"Structures.Post","id":821,"members":[{"constant":false,"id":817,"mutability":"mutable","name":"creator","nameLocation":"1203:7:4","nodeType":"VariableDeclaration","scope":821,"src":"1198:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"},"typeName":{"id":816,"nodeType":"UserDefinedTypeName","pathNode":{"id":815,"name":"User","nameLocations":["1198:4:4"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"1198:4:4"},"referencedDeclaration":874,"src":"1198:4:4","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"postdata","nameLocation":"1229:8:4","nodeType":"VariableDeclaration","scope":821,"src":"1220:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$831_storage_ptr","typeString":"struct Structures.PostData"},"typeName":{"id":819,"nodeType":"UserDefinedTypeName","pathNode":{"id":818,"name":"PostData","nameLocations":["1220:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":831,"src":"1220:8:4"},"referencedDeclaration":831,"src":"1220:8:4","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$831_storage_ptr","typeString":"struct Structures.PostData"}},"visibility":"internal"}],"name":"Post","nameLocation":"1183:4:4","nodeType":"StructDefinition","scope":918,"src":"1176:68:4","visibility":"public"},{"canonicalName":"Structures.PostData","id":831,"members":[{"constant":false,"id":824,"mutability":"mutable","name":"settings","nameLocation":"1382:8:4","nodeType":"VariableDeclaration","scope":831,"src":"1369:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$854_storage_ptr","typeString":"struct Structures.PostSettings"},"typeName":{"id":823,"nodeType":"UserDefinedTypeName","pathNode":{"id":822,"name":"PostSettings","nameLocations":["1369:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":854,"src":"1369:12:4"},"referencedDeclaration":854,"src":"1369:12:4","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$854_storage_ptr","typeString":"struct Structures.PostSettings"}},"visibility":"internal"},{"constant":false,"id":827,"mutability":"mutable","name":"escrow","nameLocation":"1411:6:4","nodeType":"VariableDeclaration","scope":831,"src":"1400:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$867_storage_ptr","typeString":"struct Structures.PostEscrow"},"typeName":{"id":826,"nodeType":"UserDefinedTypeName","pathNode":{"id":825,"name":"PostEscrow","nameLocations":["1400:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":867,"src":"1400:10:4"},"referencedDeclaration":867,"src":"1400:10:4","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$867_storage_ptr","typeString":"struct Structures.PostEscrow"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"data","nameLocation":"1445:4:4","nodeType":"VariableDeclaration","scope":831,"src":"1427:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$838_storage_ptr","typeString":"struct Structures.PostEncryptedData"},"typeName":{"id":829,"nodeType":"UserDefinedTypeName","pathNode":{"id":828,"name":"PostEncryptedData","nameLocations":["1427:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"1427:17:4"},"referencedDeclaration":838,"src":"1427:17:4","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$838_storage_ptr","typeString":"struct Structures.PostEncryptedData"}},"visibility":"internal"}],"name":"PostData","nameLocation":"1350:8:4","nodeType":"StructDefinition","scope":918,"src":"1343:113:4","visibility":"public"},{"canonicalName":"Structures.PostEncryptedData","id":838,"members":[{"constant":false,"id":833,"mutability":"mutable","name":"encryptedData","nameLocation":"1606:13:4","nodeType":"VariableDeclaration","scope":838,"src":"1600:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":832,"name":"bytes","nodeType":"ElementaryTypeName","src":"1600:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":835,"mutability":"mutable","name":"encryptedKey","nameLocation":"1635:12:4","nodeType":"VariableDeclaration","scope":838,"src":"1629:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":834,"name":"bytes","nodeType":"ElementaryTypeName","src":"1629:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":837,"mutability":"mutable","name":"decryptedData","nameLocation":"1663:13:4","nodeType":"VariableDeclaration","scope":838,"src":"1657:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":836,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PostEncryptedData","nameLocation":"1572:17:4","nodeType":"StructDefinition","scope":918,"src":"1565:118:4","visibility":"public"},{"canonicalName":"Structures.PostSettings","id":854,"members":[{"constant":false,"id":841,"mutability":"mutable","name":"status","nameLocation":"1827:6:4","nodeType":"VariableDeclaration","scope":854,"src":"1816:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$768","typeString":"enum Structures.PostStatus"},"typeName":{"id":840,"nodeType":"UserDefinedTypeName","pathNode":{"id":839,"name":"PostStatus","nameLocations":["1816:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":768,"src":"1816:10:4"},"referencedDeclaration":768,"src":"1816:10:4","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$768","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":844,"mutability":"mutable","name":"postType","nameLocation":"1852:8:4","nodeType":"VariableDeclaration","scope":854,"src":"1843:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$778","typeString":"enum Structures.PostType"},"typeName":{"id":843,"nodeType":"UserDefinedTypeName","pathNode":{"id":842,"name":"PostType","nameLocations":["1843:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":778,"src":"1843:8:4"},"referencedDeclaration":778,"src":"1843:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$778","typeString":"enum Structures.PostType"}},"visibility":"internal"},{"constant":false,"id":846,"mutability":"mutable","name":"creationTimeStamp","nameLocation":"1878:17:4","nodeType":"VariableDeclaration","scope":854,"src":"1870:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":845,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":848,"mutability":"mutable","name":"endTimeStamp","nameLocation":"1913:12:4","nodeType":"VariableDeclaration","scope":854,"src":"1905:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"duration","nameLocation":"1943:8:4","nodeType":"VariableDeclaration","scope":854,"src":"1935:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1935:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"tokenId","nameLocation":"1968:7:4","nodeType":"VariableDeclaration","scope":854,"src":"1961:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$772","typeString":"enum Structures.Tokens"},"typeName":{"id":852,"nodeType":"UserDefinedTypeName","pathNode":{"id":851,"name":"Tokens","nameLocations":["1961:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":772,"src":"1961:6:4"},"referencedDeclaration":772,"src":"1961:6:4","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$772","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"name":"PostSettings","nameLocation":"1793:12:4","nodeType":"StructDefinition","scope":918,"src":"1786:196:4","visibility":"public"},{"canonicalName":"Structures.PostEscrow","id":867,"members":[{"constant":false,"id":856,"mutability":"mutable","name":"buyer","nameLocation":"2119:5:4","nodeType":"VariableDeclaration","scope":867,"src":"2111:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":855,"name":"address","nodeType":"ElementaryTypeName","src":"2111:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":858,"mutability":"mutable","name":"seller","nameLocation":"2142:6:4","nodeType":"VariableDeclaration","scope":867,"src":"2134:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"2134:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":860,"mutability":"mutable","name":"stake","nameLocation":"2166:5:4","nodeType":"VariableDeclaration","scope":867,"src":"2158:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":859,"name":"uint256","nodeType":"ElementaryTypeName","src":"2158:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":862,"mutability":"mutable","name":"payment","nameLocation":"2189:7:4","nodeType":"VariableDeclaration","scope":867,"src":"2181:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"2181:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":864,"mutability":"mutable","name":"punishment","nameLocation":"2214:10:4","nodeType":"VariableDeclaration","scope":867,"src":"2206:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":863,"name":"uint256","nodeType":"ElementaryTypeName","src":"2206:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"penalty","nameLocation":"2242:7:4","nodeType":"VariableDeclaration","scope":867,"src":"2234:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":865,"name":"uint256","nodeType":"ElementaryTypeName","src":"2234:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PostEscrow","nameLocation":"2090:10:4","nodeType":"StructDefinition","scope":918,"src":"2083:173:4","visibility":"public"},{"canonicalName":"Structures.User","id":874,"members":[{"constant":false,"id":869,"mutability":"mutable","name":"evmAddress","nameLocation":"2373:10:4","nodeType":"VariableDeclaration","scope":874,"src":"2365:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"2365:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":871,"mutability":"mutable","name":"sismoVaultId","nameLocation":"2399:12:4","nodeType":"VariableDeclaration","scope":874,"src":"2393:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":870,"name":"bytes","nodeType":"ElementaryTypeName","src":"2393:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":873,"mutability":"mutable","name":"publicKey","nameLocation":"2427:9:4","nodeType":"VariableDeclaration","scope":874,"src":"2421:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":872,"name":"bytes","nodeType":"ElementaryTypeName","src":"2421:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"User","nameLocation":"2350:4:4","nodeType":"StructDefinition","scope":918,"src":"2343:100:4","visibility":"public"},{"canonicalName":"Structures.Feed","id":899,"members":[{"constant":false,"id":876,"mutability":"mutable","name":"contractAddress","nameLocation":"2560:15:4","nodeType":"VariableDeclaration","scope":899,"src":"2552:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":875,"name":"address","nodeType":"ElementaryTypeName","src":"2552:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":878,"mutability":"mutable","name":"owner","nameLocation":"2593:5:4","nodeType":"VariableDeclaration","scope":899,"src":"2585:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"2585:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":880,"mutability":"mutable","name":"sellerStake","nameLocation":"2616:11:4","nodeType":"VariableDeclaration","scope":899,"src":"2608:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":879,"name":"uint256","nodeType":"ElementaryTypeName","src":"2608:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":882,"mutability":"mutable","name":"buyerStake","nameLocation":"2645:10:4","nodeType":"VariableDeclaration","scope":899,"src":"2637:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":881,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"totalStake","nameLocation":"2673:10:4","nodeType":"VariableDeclaration","scope":899,"src":"2665:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"2665:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":886,"mutability":"mutable","name":"postCount","nameLocation":"2701:9:4","nodeType":"VariableDeclaration","scope":899,"src":"2693:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":888,"mutability":"mutable","name":"paymentRequested","nameLocation":"2728:16:4","nodeType":"VariableDeclaration","scope":899,"src":"2720:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":887,"name":"uint256","nodeType":"ElementaryTypeName","src":"2720:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"stakeRequested","nameLocation":"2762:14:4","nodeType":"VariableDeclaration","scope":899,"src":"2754:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":889,"name":"uint256","nodeType":"ElementaryTypeName","src":"2754:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"status","nameLocation":"2797:6:4","nodeType":"VariableDeclaration","scope":899,"src":"2786:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$768","typeString":"enum Structures.PostStatus"},"typeName":{"id":892,"nodeType":"UserDefinedTypeName","pathNode":{"id":891,"name":"PostStatus","nameLocations":["2786:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":768,"src":"2786:10:4"},"referencedDeclaration":768,"src":"2786:10:4","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$768","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"tokenId","nameLocation":"2820:7:4","nodeType":"VariableDeclaration","scope":899,"src":"2813:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$772","typeString":"enum Structures.Tokens"},"typeName":{"id":895,"nodeType":"UserDefinedTypeName","pathNode":{"id":894,"name":"Tokens","nameLocations":["2813:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":772,"src":"2813:6:4"},"referencedDeclaration":772,"src":"2813:6:4","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$772","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":898,"mutability":"mutable","name":"version","nameLocation":"2844:7:4","nodeType":"VariableDeclaration","scope":899,"src":"2837:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":897,"name":"string","nodeType":"ElementaryTypeName","src":"2837:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Feed","nameLocation":"2537:4:4","nodeType":"StructDefinition","scope":918,"src":"2530:328:4","visibility":"public"},{"canonicalName":"Structures.BayRequest","id":917,"members":[{"constant":false,"id":901,"mutability":"mutable","name":"request","nameLocation":"2986:7:4","nodeType":"VariableDeclaration","scope":917,"src":"2980:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":900,"name":"bytes","nodeType":"ElementaryTypeName","src":"2980:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"payment","nameLocation":"3011:7:4","nodeType":"VariableDeclaration","scope":917,"src":"3003:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3003:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"stake","nameLocation":"3036:5:4","nodeType":"VariableDeclaration","scope":917,"src":"3028:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"3028:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"postAddress","nameLocation":"3059:11:4","nodeType":"VariableDeclaration","scope":917,"src":"3051:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":906,"name":"address","nodeType":"ElementaryTypeName","src":"3051:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"accepted","nameLocation":"3085:8:4","nodeType":"VariableDeclaration","scope":917,"src":"3080:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":908,"name":"bool","nodeType":"ElementaryTypeName","src":"3080:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"postCount","nameLocation":"3111:9:4","nodeType":"VariableDeclaration","scope":917,"src":"3103:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":914,"mutability":"mutable","name":"tokenId","nameLocation":"3137:7:4","nodeType":"VariableDeclaration","scope":917,"src":"3130:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$772","typeString":"enum Structures.Tokens"},"typeName":{"id":913,"nodeType":"UserDefinedTypeName","pathNode":{"id":912,"name":"Tokens","nameLocations":["3130:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":772,"src":"3130:6:4"},"referencedDeclaration":772,"src":"3130:6:4","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$772","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"buyerAddress","nameLocation":"3162:12:4","nodeType":"VariableDeclaration","scope":917,"src":"3154:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":915,"name":"address","nodeType":"ElementaryTypeName","src":"3154:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"BayRequest","nameLocation":"2959:10:4","nodeType":"StructDefinition","scope":918,"src":"2952:229:4","visibility":"public"}],"scope":919,"src":"138:3045:4","usedErrors":[]}],"src":"113:3071:4"},"id":4},"contracts/registry/MecenateUsers.sol":{"ast":{"absolutePath":"contracts/registry/MecenateUsers.sol","exportedSymbols":{"Context":[134],"EnumerableSet":[747],"IMecenateVerifier":[757],"MecenateUsers":[1377],"Ownable":[112],"Structures":[918]},"id":1378,"nodeType":"SourceUnit","nodes":[{"id":920,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":921,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1378,"sourceUnit":748,"src":"25:65:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":922,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1378,"sourceUnit":113,"src":"91:52:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":923,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1378,"sourceUnit":919,"src":"144:35:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateVerifier.sol","file":"../interfaces/IMecenateVerifier.sol","id":924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1378,"sourceUnit":758,"src":"180:45:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":925,"name":"Ownable","nameLocations":["253:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"253:7:5"},"id":926,"nodeType":"InheritanceSpecifier","src":"253:7:5"}],"canonicalName":"MecenateUsers","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1377,"linearizedBaseContracts":[1377,112,134],"name":"MecenateUsers","nameLocation":"236:13:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":930,"libraryName":{"id":927,"name":"EnumerableSet","nameLocations":["273:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"273:13:5"},"nodeType":"UsingForDirective","src":"267:49:5","typeName":{"id":929,"nodeType":"UserDefinedTypeName","pathNode":{"id":928,"name":"EnumerableSet.AddressSet","nameLocations":["291:13:5","305:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"291:24:5"},"referencedDeclaration":460,"src":"291:24:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"constant":false,"id":933,"mutability":"mutable","name":"_users","nameLocation":"355:6:5","nodeType":"VariableDeclaration","scope":1377,"src":"322:39:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":932,"nodeType":"UserDefinedTypeName","pathNode":{"id":931,"name":"EnumerableSet.AddressSet","nameLocations":["322:13:5","336:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":460,"src":"322:24:5"},"referencedDeclaration":460,"src":"322:24:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"private"},{"constant":false,"id":938,"mutability":"mutable","name":"_metadata","nameLocation":"412:9:5","nodeType":"VariableDeclaration","scope":1377,"src":"368:53:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User)"},"typeName":{"id":937,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"376:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"368:35:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":936,"nodeType":"UserDefinedTypeName","pathNode":{"id":935,"name":"Structures.User","nameLocations":["387:10:5","398:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"387:15:5"},"referencedDeclaration":874,"src":"387:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}}},"visibility":"private"},{"constant":false,"functionSelector":"cf695688","id":940,"mutability":"mutable","name":"verifierContract","nameLocation":"443:16:5","nodeType":"VariableDeclaration","scope":1377,"src":"428:31:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"428:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9","id":944,"name":"UserRegistered","nameLocation":"472:14:5","nodeType":"EventDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"503:11:5","nodeType":"VariableDeclaration","scope":944,"src":"487:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"486:29:5"},"src":"466:50:5"},{"anonymous":false,"eventSelector":"52d5d029191f3432a61da6b4abc8709ff24d4b1b39959556bba708cf8f93e5c3","id":950,"name":"PublicKeyChanged","nameLocation":"527:16:5","nodeType":"EventDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"560:11:5","nodeType":"VariableDeclaration","scope":950,"src":"544:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"544:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":948,"indexed":false,"mutability":"mutable","name":"newPublicKey","nameLocation":"579:12:5","nodeType":"VariableDeclaration","scope":950,"src":"573:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":947,"name":"bytes","nodeType":"ElementaryTypeName","src":"573:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"543:49:5"},"src":"521:72:5"},{"anonymous":false,"eventSelector":"524387b6c7262c90f5781025bfe7e5af5a981ee878053ffa078b842d32c8ad84","id":956,"name":"EVMAddressChanged","nameLocation":"604:17:5","nodeType":"EventDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"indexed":true,"mutability":"mutable","name":"oldAddress","nameLocation":"638:10:5","nodeType":"VariableDeclaration","scope":956,"src":"622:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":954,"indexed":false,"mutability":"mutable","name":"newAddress","nameLocation":"658:10:5","nodeType":"VariableDeclaration","scope":956,"src":"650:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"650:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"621:48:5"},"src":"598:72:5"},{"body":{"id":965,"nodeType":"Block","src":"721:59:5","statements":[{"expression":{"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":961,"name":"verifierContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"731:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":962,"name":"verifierContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"750:23:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"731:42:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":964,"nodeType":"ExpressionStatement","src":"731:42:5"}]},"id":966,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"verifierContractAddress","nameLocation":"696:23:5","nodeType":"VariableDeclaration","scope":966,"src":"688:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"687:33:5"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[],"src":"721:0:5"},"scope":1377,"src":"676:104:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1029,"nodeType":"Block","src":"928:517:5","statements":[{"assignments":[977],"declarations":[{"constant":false,"id":977,"mutability":"mutable","name":"vaultId","nameLocation":"951:7:5","nodeType":"VariableDeclaration","scope":1029,"src":"938:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":976,"name":"bytes","nodeType":"ElementaryTypeName","src":"938:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":984,"initialValue":{"arguments":[{"id":982,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"1022:20:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":979,"name":"verifierContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"979:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":978,"name":"IMecenateVerifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"961:17:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateVerifier_$757_$","typeString":"type(contract IMecenateVerifier)"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"961:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateVerifier_$757","typeString":"contract IMecenateVerifier"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:11:5","memberName":"sismoVerify","nodeType":"MemberAccess","referencedDeclaration":756,"src":"961:47:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view external returns (bytes memory)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"961:91:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"938:114:5"},{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"newUser","nameLocation":"1086:7:5","nodeType":"VariableDeclaration","scope":1029,"src":"1063:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":988,"nodeType":"UserDefinedTypeName","pathNode":{"id":987,"name":"Structures.User","nameLocations":["1063:10:5","1074:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"1063:15:5"},"referencedDeclaration":874,"src":"1063:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"id":997,"initialValue":{"arguments":[{"expression":{"id":992,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1138:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1142:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1138:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":994,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"1176:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":995,"name":"pubKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"1208:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":990,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"1096:10:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$918_$","typeString":"type(library Structures)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1107:4:5","memberName":"User","nodeType":"MemberAccess","referencedDeclaration":874,"src":"1096:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$874_storage_ptr_$","typeString":"type(struct Structures.User storage pointer)"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1126:10:5","1162:12:5","1197:9:5"],"names":["evmAddress","sismoVaultId","publicKey"],"nodeType":"FunctionCall","src":"1096:129:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User memory"}},"nodeType":"VariableDeclarationStatement","src":"1063:162:5"},{"expression":{"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":998,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"1236:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1001,"indexExpression":{"expression":{"id":999,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1246:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1250:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1246:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1236:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1002,"name":"newUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"1260:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User memory"}},"src":"1236:31:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1004,"nodeType":"ExpressionStatement","src":"1236:31:5"},{"expression":{"arguments":[{"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1286:28:5","subExpression":{"arguments":[{"expression":{"id":1008,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1303:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1307:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1303:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1006,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1287:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1294:8:5","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":541,"src":"1287:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1287:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f414c52454144595f455849535453","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1316:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_dea89a1733375217ff61c02acfb1654d549d121ffda2e5c149873947f49e7ad4","typeString":"literal_string \"USER_ALREADY_EXISTS\""},"value":"USER_ALREADY_EXISTS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dea89a1733375217ff61c02acfb1654d549d121ffda2e5c149873947f49e7ad4","typeString":"literal_string \"USER_ALREADY_EXISTS\""}],"id":1005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1278:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1278:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1014,"nodeType":"ExpressionStatement","src":"1278:60:5"},{"expression":{"arguments":[{"expression":{"id":1018,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1360:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1364:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1360:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1015,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1349:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1356:3:5","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":487,"src":"1349:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1021,"nodeType":"ExpressionStatement","src":"1349:22:5"},{"eventCall":{"arguments":[{"expression":{"id":1023,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1402:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1406:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1402:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1022,"name":"UserRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1387:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1387:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1026,"nodeType":"EmitStatement","src":"1382:31:5"},{"expression":{"id":1027,"name":"newUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"1431:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User memory"}},"functionReturnParameters":975,"id":1028,"nodeType":"Return","src":"1424:14:5"}]},"functionSelector":"ebc4bf84","id":1030,"implemented":true,"kind":"function","modifiers":[],"name":"registerUser","nameLocation":"795:12:5","nodeType":"FunctionDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"830:20:5","nodeType":"VariableDeclaration","scope":1030,"src":"817:33:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":967,"name":"bytes","nodeType":"ElementaryTypeName","src":"817:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"pubKey","nameLocation":"873:6:5","nodeType":"VariableDeclaration","scope":1030,"src":"860:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":969,"name":"bytes","nodeType":"ElementaryTypeName","src":"860:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:78:5"},"returnParameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1030,"src":"904:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":973,"nodeType":"UserDefinedTypeName","pathNode":{"id":972,"name":"Structures.User","nameLocations":["904:10:5","915:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"904:15:5"},"referencedDeclaration":874,"src":"904:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"903:24:5"},"scope":1377,"src":"786:659:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1115,"nodeType":"Block","src":"1596:708:5","statements":[{"assignments":[1041],"declarations":[{"constant":false,"id":1041,"mutability":"mutable","name":"vaultId","nameLocation":"1619:7:5","nodeType":"VariableDeclaration","scope":1115,"src":"1606:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1040,"name":"bytes","nodeType":"ElementaryTypeName","src":"1606:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1048,"initialValue":{"arguments":[{"id":1046,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"1690:20:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1043,"name":"verifierContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"1647:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1042,"name":"IMecenateVerifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"1629:17:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateVerifier_$757_$","typeString":"type(contract IMecenateVerifier)"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1629:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateVerifier_$757","typeString":"contract IMecenateVerifier"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1665:11:5","memberName":"sismoVerify","nodeType":"MemberAccess","referencedDeclaration":756,"src":"1629:47:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view external returns (bytes memory)"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1629:91:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1606:114:5"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1052,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1755:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1759:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1755:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1050,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1739:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1746:8:5","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":541,"src":"1739:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f444f45535f4e4f545f4558495354","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1768:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_d7c2ac9a0919433a9e5c4863cd1f3a4e974800079833df917a0171d06d1481e4","typeString":"literal_string \"USER_DOES_NOT_EXIST\""},"value":"USER_DOES_NOT_EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d7c2ac9a0919433a9e5c4863cd1f3a4e974800079833df917a0171d06d1481e4","typeString":"literal_string \"USER_DOES_NOT_EXIST\""}],"id":1049,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1731:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1731:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1057,"nodeType":"ExpressionStatement","src":"1731:59:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"baseExpression":{"id":1060,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"1832:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1063,"indexExpression":{"expression":{"id":1061,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1842:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1846:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1842:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1832:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1854:12:5","memberName":"sismoVaultId","nodeType":"MemberAccess","referencedDeclaration":871,"src":"1832:34:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":1059,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1822:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1067,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"1881:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1066,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1871:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1871:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1822:67:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5641554c545f49445f4d49534d41544348","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1903:19:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2df7a232ed35da09d601eb15cb3e19005f79aa89f354258b4f319179d4b323de","typeString":"literal_string \"VAULT_ID_MISMATCH\""},"value":"VAULT_ID_MISMATCH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2df7a232ed35da09d601eb15cb3e19005f79aa89f354258b4f319179d4b323de","typeString":"literal_string \"VAULT_ID_MISMATCH\""}],"id":1058,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1801:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:131:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"1801:131:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"baseExpression":{"id":1075,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"1974:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1078,"indexExpression":{"expression":{"id":1076,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1984:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1988:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1984:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1974:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1079,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1996:9:5","memberName":"publicKey","nodeType":"MemberAccess","referencedDeclaration":873,"src":"1974:31:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":1074,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1964:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1964:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1082,"name":"pubKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"2020:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1081,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2010:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2010:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1964:63:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53414d455f5055424c49435f4b4559","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2041:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e05f39e963b330a8e2acde6b0f1a523fd3289f68f6833e4b37a588280a5c7ebf","typeString":"literal_string \"SAME_PUBLIC_KEY\""},"value":"SAME_PUBLIC_KEY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e05f39e963b330a8e2acde6b0f1a523fd3289f68f6833e4b37a588280a5c7ebf","typeString":"literal_string \"SAME_PUBLIC_KEY\""}],"id":1073,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1943:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1943:125:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1087,"nodeType":"ExpressionStatement","src":"1943:125:5"},{"expression":{"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1088,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2111:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1091,"indexExpression":{"expression":{"id":1089,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2121:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2125:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2121:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2111:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1092,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2133:12:5","memberName":"sismoVaultId","nodeType":"MemberAccess","referencedDeclaration":871,"src":"2111:34:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1093,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"2148:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2111:44:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":1095,"nodeType":"ExpressionStatement","src":"2111:44:5"},{"expression":{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1096,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2166:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1099,"indexExpression":{"expression":{"id":1097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2176:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2180:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2176:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2166:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1100,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2188:9:5","memberName":"publicKey","nodeType":"MemberAccess","referencedDeclaration":873,"src":"2166:31:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1101,"name":"pubKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"2200:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2166:40:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":1103,"nodeType":"ExpressionStatement","src":"2166:40:5"},{"eventCall":{"arguments":[{"expression":{"id":1105,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2239:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2243:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2239:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1107,"name":"pubKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"2251:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1104,"name":"PublicKeyChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"2222:16:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2222:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"EmitStatement","src":"2217:41:5"},{"expression":{"baseExpression":{"id":1110,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2276:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1113,"indexExpression":{"expression":{"id":1111,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2286:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2290:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2286:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2276:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"functionReturnParameters":1039,"id":1114,"nodeType":"Return","src":"2269:28:5"}]},"functionSelector":"89991520","id":1116,"implemented":true,"kind":"function","modifiers":[],"name":"changePublicKey","nameLocation":"1460:15:5","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"1498:20:5","nodeType":"VariableDeclaration","scope":1116,"src":"1485:33:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1031,"name":"bytes","nodeType":"ElementaryTypeName","src":"1485:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"pubKey","nameLocation":"1541:6:5","nodeType":"VariableDeclaration","scope":1116,"src":"1528:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1033,"name":"bytes","nodeType":"ElementaryTypeName","src":"1528:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1475:78:5"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1116,"src":"1572:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":1037,"nodeType":"UserDefinedTypeName","pathNode":{"id":1036,"name":"Structures.User","nameLocations":["1572:10:5","1583:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"1572:15:5"},"referencedDeclaration":874,"src":"1572:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"1571:24:5"},"scope":1377,"src":"1451:853:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1228,"nodeType":"Block","src":"2455:989:5","statements":[{"assignments":[1127],"declarations":[{"constant":false,"id":1127,"mutability":"mutable","name":"vaultId","nameLocation":"2478:7:5","nodeType":"VariableDeclaration","scope":1228,"src":"2465:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"2465:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1134,"initialValue":{"arguments":[{"id":1132,"name":"sismoConnectResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"2549:20:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1129,"name":"verifierContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2506:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1128,"name":"IMecenateVerifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"2488:17:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateVerifier_$757_$","typeString":"type(contract IMecenateVerifier)"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2488:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateVerifier_$757","typeString":"contract IMecenateVerifier"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2524:11:5","memberName":"sismoVerify","nodeType":"MemberAccess","referencedDeclaration":756,"src":"2488:47:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view external returns (bytes memory)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2488:91:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2465:114:5"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1138,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2614:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2618:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2614:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1136,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"2598:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2605:8:5","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":541,"src":"2598:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2598:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f444f45535f4e4f545f4558495354","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2627:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_d7c2ac9a0919433a9e5c4863cd1f3a4e974800079833df917a0171d06d1481e4","typeString":"literal_string \"USER_DOES_NOT_EXIST\""},"value":"USER_DOES_NOT_EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d7c2ac9a0919433a9e5c4863cd1f3a4e974800079833df917a0171d06d1481e4","typeString":"literal_string \"USER_DOES_NOT_EXIST\""}],"id":1135,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2590:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2590:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1143,"nodeType":"ExpressionStatement","src":"2590:59:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"baseExpression":{"id":1146,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2691:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1149,"indexExpression":{"expression":{"id":1147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2701:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2705:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2701:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2691:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2713:12:5","memberName":"sismoVaultId","nodeType":"MemberAccess","referencedDeclaration":871,"src":"2691:34:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"id":1145,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2681:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2681:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1153,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"2740:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1152,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2730:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2681:67:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5641554c545f49445f4d49534d41544348","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2762:19:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2df7a232ed35da09d601eb15cb3e19005f79aa89f354258b4f319179d4b323de","typeString":"literal_string \"VAULT_ID_MISMATCH\""},"value":"VAULT_ID_MISMATCH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2df7a232ed35da09d601eb15cb3e19005f79aa89f354258b4f319179d4b323de","typeString":"literal_string \"VAULT_ID_MISMATCH\""}],"id":1144,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2660:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:131:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1158,"nodeType":"ExpressionStatement","src":"2660:131:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":1160,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2823:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1163,"indexExpression":{"expression":{"id":1161,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2833:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2837:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2833:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2823:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2845:10:5","memberName":"evmAddress","nodeType":"MemberAccess","referencedDeclaration":869,"src":"2823:32:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1165,"name":"newAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"2859:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2823:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53414d455f45564d5f41444452455353","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2883:18:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a96ef49899fa686186a74d03e0bdecc5a1a349bdcd477b799f681fa13ca8991c","typeString":"literal_string \"SAME_EVM_ADDRESS\""},"value":"SAME_EVM_ADDRESS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a96ef49899fa686186a74d03e0bdecc5a1a349bdcd477b799f681fa13ca8991c","typeString":"literal_string \"SAME_EVM_ADDRESS\""}],"id":1159,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2802:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:109:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1169,"nodeType":"ExpressionStatement","src":"2802:109:5"},{"expression":{"arguments":[{"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2930:28:5","subExpression":{"arguments":[{"id":1173,"name":"newAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"2947:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1171,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"2931:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2938:8:5","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":541,"src":"2931:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2931:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f414c52454144595f455849535453","id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2960:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_dea89a1733375217ff61c02acfb1654d549d121ffda2e5c149873947f49e7ad4","typeString":"literal_string \"USER_ALREADY_EXISTS\""},"value":"USER_ALREADY_EXISTS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dea89a1733375217ff61c02acfb1654d549d121ffda2e5c149873947f49e7ad4","typeString":"literal_string \"USER_ALREADY_EXISTS\""}],"id":1170,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2922:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2922:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1178,"nodeType":"ExpressionStatement","src":"2922:60:5"},{"assignments":[1183],"declarations":[{"constant":false,"id":1183,"mutability":"mutable","name":"newUser","nameLocation":"3016:7:5","nodeType":"VariableDeclaration","scope":1228,"src":"2993:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":1182,"nodeType":"UserDefinedTypeName","pathNode":{"id":1181,"name":"Structures.User","nameLocations":["2993:10:5","3004:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"2993:15:5"},"referencedDeclaration":874,"src":"2993:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"id":1194,"initialValue":{"arguments":[{"id":1186,"name":"newAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3068:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1187,"name":"vaultId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"3106:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"baseExpression":{"id":1188,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3138:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1191,"indexExpression":{"expression":{"id":1189,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3148:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3152:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3148:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3138:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3160:9:5","memberName":"publicKey","nodeType":"MemberAccess","referencedDeclaration":873,"src":"3138:31:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"expression":{"id":1184,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"3026:10:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$918_$","typeString":"type(library Structures)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:4:5","memberName":"User","nodeType":"MemberAccess","referencedDeclaration":874,"src":"3026:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$874_storage_ptr_$","typeString":"type(struct Structures.User storage pointer)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3056:10:5","3092:12:5","3127:9:5"],"names":["evmAddress","sismoVaultId","publicKey"],"nodeType":"FunctionCall","src":"3026:154:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User memory"}},"nodeType":"VariableDeclarationStatement","src":"2993:187:5"},{"expression":{"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1195,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3191:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1197,"indexExpression":{"id":1196,"name":"newAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3201:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3191:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1198,"name":"newUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"3215:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User memory"}},"src":"3191:31:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1200,"nodeType":"ExpressionStatement","src":"3191:31:5"},{"expression":{"arguments":[{"id":1204,"name":"newAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3243:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1201,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3232:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3239:3:5","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":487,"src":"3232:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1206,"nodeType":"ExpressionStatement","src":"3232:22:5"},{"eventCall":{"arguments":[{"expression":{"id":1208,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3288:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3292:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3288:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1210,"name":"newAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3300:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1207,"name":"EVMAddressChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"3270:17:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3270:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1212,"nodeType":"EmitStatement","src":"3265:46:5"},{"expression":{"arguments":[{"expression":{"id":1216,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3363:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3367:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3363:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1213,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3349:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1215,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3356:6:5","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":514,"src":"3349:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3349:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1219,"nodeType":"ExpressionStatement","src":"3349:25:5"},{"expression":{"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3384:28:5","subExpression":{"baseExpression":{"id":1220,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3391:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1223,"indexExpression":{"expression":{"id":1221,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3401:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3405:6:5","memberName":"sender","nodeType":"MemberAccess","src":"3401:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3391:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"3384:28:5"},{"expression":{"id":1226,"name":"newUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"3430:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User memory"}},"functionReturnParameters":1125,"id":1227,"nodeType":"Return","src":"3423:14:5"}]},"functionSelector":"470471ef","id":1229,"implemented":true,"kind":"function","modifiers":[],"name":"changeEVMAddress","nameLocation":"2319:16:5","nodeType":"FunctionDefinition","parameters":{"id":1121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1118,"mutability":"mutable","name":"sismoConnectResponse","nameLocation":"2358:20:5","nodeType":"VariableDeclaration","scope":1229,"src":"2345:33:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1117,"name":"bytes","nodeType":"ElementaryTypeName","src":"2345:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1120,"mutability":"mutable","name":"newAddress","nameLocation":"2396:10:5","nodeType":"VariableDeclaration","scope":1229,"src":"2388:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"2388:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2335:77:5"},"returnParameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1229,"src":"2431:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":1123,"nodeType":"UserDefinedTypeName","pathNode":{"id":1122,"name":"Structures.User","nameLocations":["2431:10:5","2442:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"2431:15:5"},"referencedDeclaration":874,"src":"2431:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"2430:24:5"},"scope":1377,"src":"2310:1134:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1239,"nodeType":"Block","src":"3509:39:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1235,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3526:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3533:6:5","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":613,"src":"3526:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (address[] memory)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3526:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":1234,"id":1238,"nodeType":"Return","src":"3519:22:5"}]},"functionSelector":"00ce8e3e","id":1240,"implemented":true,"kind":"function","modifiers":[],"name":"getUsers","nameLocation":"3459:8:5","nodeType":"FunctionDefinition","parameters":{"id":1230,"nodeType":"ParameterList","parameters":[],"src":"3467:2:5"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1240,"src":"3491:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1231,"name":"address","nodeType":"ElementaryTypeName","src":"3491:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1232,"nodeType":"ArrayTypeName","src":"3491:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3490:18:5"},"scope":1377,"src":"3450:98:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1249,"nodeType":"Block","src":"3608:39:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1245,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3625:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1246,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3632:6:5","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":556,"src":"3625:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3625:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1244,"id":1248,"nodeType":"Return","src":"3618:22:5"}]},"functionSelector":"b5cb15f7","id":1250,"implemented":true,"kind":"function","modifiers":[],"name":"getUserCount","nameLocation":"3563:12:5","nodeType":"FunctionDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[],"src":"3575:2:5"},"returnParameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1250,"src":"3599:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"3599:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3598:9:5"},"scope":1377,"src":"3554:93:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1271,"nodeType":"Block","src":"3717:98:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1258,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"3735:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1259,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3743:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3750:6:5","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":556,"src":"3743:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3743:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3735:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f55545f4f465f52414e4745","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3760:14:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d7db755c0b493ef02ec9ef3a27bbf61a737bf0da51cd447ec51ec2858aef44e","typeString":"literal_string \"OUT_OF_RANGE\""},"value":"OUT_OF_RANGE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d7db755c0b493ef02ec9ef3a27bbf61a737bf0da51cd447ec51ec2858aef44e","typeString":"literal_string \"OUT_OF_RANGE\""}],"id":1257,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3727:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3727:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1265,"nodeType":"ExpressionStatement","src":"3727:48:5"},{"expression":{"arguments":[{"id":1268,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"3802:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1266,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3792:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3799:2:5","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":583,"src":"3792:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3792:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1256,"id":1270,"nodeType":"Return","src":"3785:23:5"}]},"functionSelector":"c6e064ad","id":1272,"implemented":true,"kind":"function","modifiers":[],"name":"getUserAt","nameLocation":"3662:9:5","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"index","nameLocation":"3680:5:5","nodeType":"VariableDeclaration","scope":1272,"src":"3672:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"3672:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3671:15:5"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1272,"src":"3708:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1254,"name":"address","nodeType":"ElementaryTypeName","src":"3708:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3707:9:5"},"scope":1377,"src":"3653:162:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1284,"nodeType":"Block","src":"3911:52:5","statements":[{"expression":{"arguments":[{"id":1281,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"3944:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1279,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3928:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3935:8:5","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":541,"src":"3928:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3928:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1278,"id":1283,"nodeType":"Return","src":"3921:35:5"}]},"functionSelector":"48990fcc","id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"checkifUserExist","nameLocation":"3830:16:5","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"userAddress","nameLocation":"3864:11:5","nodeType":"VariableDeclaration","scope":1285,"src":"3856:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"3856:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3846:35:5"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1285,"src":"3905:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1276,"name":"bool","nodeType":"ElementaryTypeName","src":"3905:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3904:6:5"},"scope":1377,"src":"3821:142:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1349,"nodeType":"Block","src":"4095:360:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1296,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"4113:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1297,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"4126:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4113:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53544152545f494e4445585f475245415445525f5448414e5f454e445f494e444558","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4136:36:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2fbf2c5950e0564c69d11f6c656fab4527555d35ad96c7989d0abd11dc7229e7","typeString":"literal_string \"START_INDEX_GREATER_THAN_END_INDEX\""},"value":"START_INDEX_GREATER_THAN_END_INDEX"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2fbf2c5950e0564c69d11f6c656fab4527555d35ad96c7989d0abd11dc7229e7","typeString":"literal_string \"START_INDEX_GREATER_THAN_END_INDEX\""}],"id":1295,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4105:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4105:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1301,"nodeType":"ExpressionStatement","src":"4105:68:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1303,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"4191:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1304,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"4203:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4210:6:5","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":556,"src":"4203:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4203:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4191:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f55545f4f465f52414e4745","id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4220:14:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d7db755c0b493ef02ec9ef3a27bbf61a737bf0da51cd447ec51ec2858aef44e","typeString":"literal_string \"OUT_OF_RANGE\""},"value":"OUT_OF_RANGE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d7db755c0b493ef02ec9ef3a27bbf61a737bf0da51cd447ec51ec2858aef44e","typeString":"literal_string \"OUT_OF_RANGE\""}],"id":1302,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4183:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4183:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1310,"nodeType":"ExpressionStatement","src":"4183:52:5"},{"assignments":[1315],"declarations":[{"constant":false,"id":1315,"mutability":"mutable","name":"range","nameLocation":"4263:5:5","nodeType":"VariableDeclaration","scope":1349,"src":"4246:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"4246:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1314,"nodeType":"ArrayTypeName","src":"4246:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":1323,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1319,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"4285:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1320,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"4296:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4285:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4271:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":1316,"name":"address","nodeType":"ElementaryTypeName","src":"4275:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1317,"nodeType":"ArrayTypeName","src":"4275:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4271:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"4246:61:5"},{"body":{"id":1345,"nodeType":"Block","src":"4365:61:5","statements":[{"expression":{"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1334,"name":"range","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"4379:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1338,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1335,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"4385:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1336,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"4389:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4385:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4379:21:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1341,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"4413:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1339,"name":"_users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"4403:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$460_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4410:2:5","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":583,"src":"4403:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$460_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_AddressSet_$460_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4403:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4379:36:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1344,"nodeType":"ExpressionStatement","src":"4379:36:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1328,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"4346:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1329,"name":"endIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"4350:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4346:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1346,"initializationExpression":{"assignments":[1325],"declarations":[{"constant":false,"id":1325,"mutability":"mutable","name":"i","nameLocation":"4330:1:5","nodeType":"VariableDeclaration","scope":1346,"src":"4322:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1324,"name":"uint256","nodeType":"ElementaryTypeName","src":"4322:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1327,"initialValue":{"id":1326,"name":"startIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"4334:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4322:22:5"},"loopExpression":{"expression":{"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4360:3:5","subExpression":{"id":1331,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"4360:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1333,"nodeType":"ExpressionStatement","src":"4360:3:5"},"nodeType":"ForStatement","src":"4317:109:5"},{"expression":{"id":1347,"name":"range","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"4443:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":1294,"id":1348,"nodeType":"Return","src":"4436:12:5"}]},"functionSelector":"cf5caa12","id":1350,"implemented":true,"kind":"function","modifiers":[],"name":"getPaginatedUsers","nameLocation":"3978:17:5","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"startIndex","nameLocation":"4013:10:5","nodeType":"VariableDeclaration","scope":1350,"src":"4005:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"4005:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"endIndex","nameLocation":"4041:8:5","nodeType":"VariableDeclaration","scope":1350,"src":"4033:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1288,"name":"uint256","nodeType":"ElementaryTypeName","src":"4033:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3995:60:5"},"returnParameters":{"id":1294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1350,"src":"4077:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1291,"name":"address","nodeType":"ElementaryTypeName","src":"4077:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1292,"nodeType":"ArrayTypeName","src":"4077:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4076:18:5"},"scope":1377,"src":"3969:486:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1362,"nodeType":"Block","src":"4568:46:5","statements":[{"expression":{"baseExpression":{"id":1358,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"4585:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1360,"indexExpression":{"id":1359,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"4595:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4585:22:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"functionReturnParameters":1357,"id":1361,"nodeType":"Return","src":"4578:29:5"}]},"functionSelector":"ef2a8764","id":1363,"implemented":true,"kind":"function","modifiers":[],"name":"getUserMetadata","nameLocation":"4470:15:5","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"userAddress","nameLocation":"4503:11:5","nodeType":"VariableDeclaration","scope":1363,"src":"4495:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1351,"name":"address","nodeType":"ElementaryTypeName","src":"4495:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4485:35:5"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"4544:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":1355,"nodeType":"UserDefinedTypeName","pathNode":{"id":1354,"name":"Structures.User","nameLocations":["4544:10:5","4555:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"4544:15:5"},"referencedDeclaration":874,"src":"4544:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"4543:24:5"},"scope":1377,"src":"4461:153:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1375,"nodeType":"Block","src":"4718:56:5","statements":[{"expression":{"expression":{"baseExpression":{"id":1370,"name":"_metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"4735:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$874_storage_$","typeString":"mapping(address => struct Structures.User storage ref)"}},"id":1372,"indexExpression":{"id":1371,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"4745:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4735:22:5","typeDescriptions":{"typeIdentifier":"t_struct$_User_$874_storage","typeString":"struct Structures.User storage ref"}},"id":1373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4758:9:5","memberName":"publicKey","nodeType":"MemberAccess","referencedDeclaration":873,"src":"4735:32:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":1369,"id":1374,"nodeType":"Return","src":"4728:39:5"}]},"functionSelector":"11231fe0","id":1376,"implemented":true,"kind":"function","modifiers":[],"name":"getUserPublicKey","nameLocation":"4629:16:5","nodeType":"FunctionDefinition","parameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"userAddress","nameLocation":"4663:11:5","nodeType":"VariableDeclaration","scope":1376,"src":"4655:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1364,"name":"address","nodeType":"ElementaryTypeName","src":"4655:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4645:35:5"},"returnParameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1376,"src":"4704:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1367,"name":"bytes","nodeType":"ElementaryTypeName","src":"4704:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4703:14:5"},"scope":1377,"src":"4620:154:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1378,"src":"227:4549:5","usedErrors":[]}],"src":"0:4777:5"},"id":5}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b746ec82657112491aee4e1a42e0efeb2707555ebeedbba024410fd04c31201264736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 CHAINID 0xEC DUP3 PUSH6 0x7112491AEE4E BYTE TIMESTAMP 0xE0 0xEF 0xEB 0x27 SMOD SSTORE 0x5E 0xBE 0xED 0xBB LOG0 0x24 COINBASE 0xF 0xD0 0x4C BALANCE KECCAK256 SLT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11630:2:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b746ec82657112491aee4e1a42e0efeb2707555ebeedbba024410fd04c31201264736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 CHAINID 0xEC DUP3 PUSH6 0x7112491AEE4E BYTE TIMESTAMP 0xE0 0xEF 0xEB 0x27 SMOD SSTORE 0x5E 0xBE 0xED 0xBB LOG0 0x24 COINBASE 0xF 0xD0 0x4C BALANCE KECCAK256 SLT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11630:2:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateVerifier.sol":{"IMecenateVerifier":{"abi":[{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"}],"name":"sismoVerify","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"sismoVerify(bytes)":"119f0991"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateVerifier.sol\":\"IMecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x80a42989301760af1979c98162a585d095eb4adca49e90db73276cd47a14347a\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/library/Structures.sol":{"Structures":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212203b816b98011001c8d35215f7149cf3bee42e3c8622cd45b55496da96e24c090664736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE DUP2 PUSH12 0x98011001C8D35215F7149CF3 0xBE 0xE4 0x2E EXTCODECOPY DUP7 0x22 0xCD GASLIMIT 0xB5 SLOAD SWAP7 0xDA SWAP7 0xE2 0x4C MULMOD MOD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"138:3045:4:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212203b816b98011001c8d35215f7149cf3bee42e3c8622cd45b55496da96e24c090664736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE DUP2 PUSH12 0x98011001C8D35215F7149CF3 0xBE 0xE4 0x2E EXTCODECOPY DUP7 0x22 0xCD GASLIMIT 0xB5 SLOAD SWAP7 0xDA SWAP7 0xE2 0x4C MULMOD MOD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"138:3045:4:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/Structures.sol\":\"Structures\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/registry/MecenateUsers.sol":{"MecenateUsers":{"abi":[{"inputs":[{"internalType":"address","name":"verifierContractAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldAddress","type":"address"},{"indexed":false,"internalType":"address","name":"newAddress","type":"address"}],"name":"EVMAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"newPublicKey","type":"bytes"}],"name":"PublicKeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"}],"name":"UserRegistered","type":"event"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"address","name":"newAddress","type":"address"}],"name":"changeEVMAddress","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"bytes","name":"pubKey","type":"bytes"}],"name":"changePublicKey","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"checkifUserExist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"endIndex","type":"uint256"}],"name":"getPaginatedUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getUserAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUserCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserMetadata","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"sismoConnectResponse","type":"bytes"},{"internalType":"bytes","name":"pubKey","type":"bytes"}],"name":"registerUser","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"verifierContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080346100a757601f61184f38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600454161760045561178c90816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908162ce8e3e14610fe15750806311231fe014610f8f578063470471ef14610b7b57806348990fcc14610b41578063715018a614610ae7578063899915201461072e5780638da5cb5b14610706578063b5cb15f7146106e7578063c6e064ad146106a1578063cf5caa1214610562578063cf6956881461053b578063ebc4bf8414610202578063ef2a8764146101815763f2fde38b146100bc57600080fd5b3461017d57602036600319011261017d576100d56110a4565b906100de61124c565b6001600160a01b0391821692831561012b57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101fe5760203660031901126101fe5790816101ec60026101fa946101a76110a4565b946101b06112a4565b506001600160a01b0395861681526003602052208351946101d086611107565b81541685526101e1600182016114c7565b6020860152016114c7565b8183015251918291826111be565b0390f35b5080fd5b509190346101fe5761021336611208565b61021b6112a4565b5060018060a01b03948581541690858551809363119f099160e01b8252818061024f6020998a8884015260248301906110e2565b03915afa91821561053157869261050d575b5084519661026e88611107565b33885284880192835285880193845233875260038552858720908851166bffffffffffffffffffffffff60a01b825416178155600191828201935180519267ffffffffffffffff958685116104fa576102c78154611323565b948b8a601f97888082116104cd575b50505050898c87831160011461046a57906002958361045f575b5050600019600383901b1c191690871b1790555b01945190815194851161044c575061031c8554611323565b828111610416575b50859184116001146103ac5792806002959381936101fa9998968b946103a1575b50501b916000199060031b1c19161790555b338552526103688184205415611374565b61037133611403565b50519283927f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9339180a2826111be565b015192503880610345565b8488528588209293929190601f198416895b8181106104015750916101fa9897959391856002989694106103e8575b505050811b019055610357565b015160001960f88460031b161c191690553880806103db565b828401518555938601939288019288016103be565b61043d90868a52878a208480880160051c8201928a8910610443575b0160051c019061135d565b38610324565b92508192610432565b634e487b7160e01b895260419052602488fd5b0151905038806102f0565b889291601f1983168583528d80842093905b8282106104b657505096836002981061049d575b505050811b019055610304565b015160001960f88460031b161c19169055388080610490565b838a015185558c969094019392830192018e61047c565b8284876104f19652209181860160051c8301938610610443570160051c019061135d565b8b8a38886102d6565b634e487b7160e01b8b526041845260248bfd5b61052a9192503d8088833e6105228183611139565b8101906112c4565b9038610261565b85513d88823e3d90fd5b503461017d578260031936011261017d575490516001600160a01b03909116815260209150f35b509190346101fe57806003193601126101fe57823591602480359182851015610654576001956105958754851115611703565b61059f86856115f6565b956105a98761173e565b966105b687519889611139565b8088526105c5601f199161173e565b0160209036828a0137815b8681106105e4578751806101fa8b82611060565b6105ed816113b6565b9054906105fa85846115f6565b918b518310156106425760039190911b1c6001600160a01b031660059190911b8a01830152600019811461062f5789016105d0565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5091346106e45760203660031901126106e457506106ce602092356106c96001548210611703565b6113b6565b905491519160018060a01b039160031b1c168152f35b80fd5b5050346101fe57816003193601126101fe576020906001549051908152f35b5050346101fe57816003193601126101fe57905490516001600160a01b039091168152602090f35b50903461017d5761073e36611208565b936107476112a4565b5060018060a01b03938481541695828551809863119f099160e01b8252818061077b6020998a8984015260248301906110e2565b03915afa968715610add578397610ac1575b50338352600284526107a3858420541515611485565b3383526003918285526001976107d16107bf8a898820016114c7565b8781519101208251888401201461156d565b3385528386526107e56002888720016114c7565b86815191012083518785012014610a8c573385528386528887862001815167ffffffffffffffff92838211610a795781906108208454611323565b601f8111610a4b575b508990601f83116001146109e45789926109d9575b505060001982881b1c1916908b1b1790555b3385528386526002878620019183519182116109c657506108718254611323565b601f811161098d575b5085601f821160011461092057946101fa99946101ec979461090b94848b9560029a8691610915575b5060001982861b1c191690891b1790555b7f52d5d029191f3432a61da6b4abc8709ff24d4b1b39959556bba708cf8f93e5c38451878152806108e933948a8301906110e2565b0390a2338252845220928651976108ff89611107565b845416885283016114c7565b90860152016114c7565b9050830151386108a3565b82865286862090601f198316875b81811061097857509461090b948c8560029a956101fa9f9a958e986101ec9e9b10610960575b5050811b0190556108b4565b85015160001983881b60f8161c191690553880610954565b868301518455928c019291890191890161092e565b6109b690838752878720601f840160051c8101918985106109bc575b601f0160051c019061135d565b3861087a565b90915081906109a9565b634e487b7160e01b865260419052602485fd5b01519050388061083e565b848a528a8a208e94509190601f1984168b5b8d828210610a2c5750508411610a14575b505050811b019055610850565b0151600019838a1b60f8161c19169055388080610a07565b91929395968291958786015181550195019301908f95949392916109f6565b610a7390858b528b8b20601f850160051c8101918d86106109bc57601f0160051c019061135d565b38610829565b634e487b7160e01b885260418552602488fd5b865162461bcd60e51b8152808301879052600f60248201526e53414d455f5055424c49435f4b455960881b6044820152606490fd5b610ad69197503d8085833e6105228183611139565b953861078d565b85513d85823e3d90fd5b83346106e457806003193601126106e457610b0061124c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101fe5760203660031901126101fe5760209181906001600160a01b03610b696110a4565b16815260028452205415159051908152f35b50903461017d578060031936011261017d5767ffffffffffffffff8235818111610f8b57610bac9036908501611177565b6001600160a01b036024358181169290839003610f8757918693918697610bfd94610bd56112a4565b50828954168851808098819463119f099160e01b835260209e8f9084015260248301906110e2565b03915afa938415610f7d578594610f61575b5033855260028852610c25868620541515611485565b338552600392838952600194610c53610c41878a8a20016114c7565b8b815191012082518c8401201461156d565b338752848a528383898920541614610f2b5783875260028a52610c798888205415611374565b338752848a5260028888200198610ca389519a610c958c611107565b868c528c8c019384526114c7565b93898b01948552858952868c52898920908b51166bffffffffffffffffffffffff60a01b82541617815587810192519283518581116104fa57908a92918e610ceb8354611323565b96601f97888111610eff575b5081888411600114610e8e5750600295919083610e83575b5050600019828c1b1c1916908b1b1790555b01935190815193841161044c5750610d398454611323565b8b838211610e56575b50508a918311600114610de7579360029693838997946101fa9d94610dcc98610dd29c92610ddc575b505060001982871b1c191690861b1790555b610d8681611403565b5088519081527f524387b6c7262c90f5781025bfe7e5af5a981ee878053ffa078b842d32c8ad84823392a2610dba33611619565b503385525285832092835582016115ad565b016115ad565b51918291826111be565b015190503880610d6b565b8388528a88209190601f198416895b818110610e41575097846101fa9d94610dcc9894839894610dd29d9b9860029d10610e29575b505050811b019055610d7d565b015160001983891b60f8161c19169055388080610e1c565b82840151855593890193928d01928d01610df6565b610e7c91868b5284828c209181880160051c8301938810610443570160051c019061135d565b388b610d42565b015190503880610d0f565b84875280872091968e949391601f19851691905b828210610edb575050968360029810610ec3575b505050811b019055610d21565b0151600019838e1b60f8161c19169055388080610eb6565b83968a958294958394989a9b9c0151815501960194018f9593989796949291610ea2565b610f25908588528388208a80870160051c820192868810610443570160051c019061135d565b38610cf7565b875162461bcd60e51b8152808a018b9052601060248201526f53414d455f45564d5f4144445245535360801b6044820152606490fd5b610f769194503d8087833e6105228183611139565b9238610c0f565b86513d87823e3d90fd5b8680fd5b8480fd5b5050346101fe5760203660031901126101fe576101fa91610fce9060029083906001600160a01b03610fbf6110a4565b168152600360205220016114c7565b90519182916020835260208301906110e2565b8490843461017d578260031936011261017d57600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b82821061104b576101fa8787611041828c0383611139565b5191829182611060565b84548852968701969383019390830190611029565b6020908160408183019282815285518094520193019160005b828110611087575050505090565b83516001600160a01b031685529381019392810192600101611079565b600435906001600160a01b03821682036110ba57565b600080fd5b60005b8381106110d25750506000910152565b81810151838201526020016110c2565b906020916110fb815180928185528580860191016110bf565b601f01601f1916010190565b6060810190811067ffffffffffffffff82111761112357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761112357604052565b67ffffffffffffffff811161112357601f01601f191660200190565b81601f820112156110ba5780359061118e8261115b565b9261119c6040519485611139565b828452602083830101116110ba57816000926020809301838601378301015290565b90611205916020815260018060a01b03825116602082015260406111f0602084015160608385015260808401906110e2565b920151906060601f19828503019101526110e2565b90565b9060406003198301126110ba5767ffffffffffffffff6004358181116110ba578361123591600401611177565b926024359182116110ba5761120591600401611177565b6000546001600160a01b0316330361126057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906112b182611107565b6060604083600081528260208201520152565b6020818303126110ba5780519067ffffffffffffffff82116110ba570181601f820112156110ba5780516112f78161115b565b926113056040519485611139565b818452602082840101116110ba5761120591602080850191016110bf565b90600182811c92168015611353575b602083101461133d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611332565b818110611368575050565b6000815560010161135d565b1561137b57565b60405162461bcd60e51b8152602060048201526013602482015272555345525f414c52454144595f45584953545360681b6044820152606490fd5b6001548110156113ed5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054611480576001546801000000000000000081101561146c579082611458611441846001604096016001556113b6565b819391549060031b91821b91600019901b19161790565b905560015492815260026020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b1561148c57565b60405162461bcd60e51b81526020600482015260136024820152721554d15497d113d154d7d393d517d1561254d5606a1b6044820152606490fd5b90604051918260008254926114db84611323565b90818452600194858116908160001461154a5750600114611507575b505061150592500383611139565b565b9093915060005260209081600020936000915b818310611532575050611505935082010138806114f7565b8554888401850152948501948794509183019161151a565b91505061150594506020925060ff191682840152151560051b82010138806114f7565b1561157457565b60405162461bcd60e51b81526020600482015260116024820152700ac82aa98a8be9288be9a92a69a82a8869607b1b6044820152606490fd5b6115b78154611323565b90816115c1575050565b81601f600093116001146115d3575055565b9080839182526115f2601f60208420940160051c84016001850161135d565b5555565b9190820391821161160357565b634e487b7160e01b600052601160045260246000fd5b60008181526002602052604081205490919080156116fe57600019908082018181116116ea57600154908382019182116116d6578082036116a2575b505050600154801561168e5781019061166d826113b6565b909182549160031b1b19169055600155815260026020526040812055600190565b634e487b7160e01b84526031600452602484fd5b6116c06116b1611441936113b6565b90549060031b1c9283926113b6565b9055845260026020526040842055388080611655565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b1561170a57565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b67ffffffffffffffff81116111235760051b6020019056fea264697066735822122090a6b1044e25578d0808f22f8170409d9c8cea01a7ba7d5e33c46721b833501664736f6c63430008130033","opcodes":"PUSH1 0x80 CALLVALUE PUSH2 0xA7 JUMPI PUSH1 0x1F PUSH2 0x184F CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xAC JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xA7 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xA7 JUMPI PUSH1 0x0 SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP1 CALLER DUP3 DUP3 AND OR PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP4 CALLER SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH2 0x178C SWAP1 DUP2 PUSH2 0xC3 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xCE8E3E EQ PUSH2 0xFE1 JUMPI POP DUP1 PUSH4 0x11231FE0 EQ PUSH2 0xF8F JUMPI DUP1 PUSH4 0x470471EF EQ PUSH2 0xB7B JUMPI DUP1 PUSH4 0x48990FCC EQ PUSH2 0xB41 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAE7 JUMPI DUP1 PUSH4 0x89991520 EQ PUSH2 0x72E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x706 JUMPI DUP1 PUSH4 0xB5CB15F7 EQ PUSH2 0x6E7 JUMPI DUP1 PUSH4 0xC6E064AD EQ PUSH2 0x6A1 JUMPI DUP1 PUSH4 0xCF5CAA12 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0xCF695688 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xEBC4BF84 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xEF2A8764 EQ PUSH2 0x181 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x17D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x17D JUMPI PUSH2 0xD5 PUSH2 0x10A4 JUMP JUMPDEST SWAP1 PUSH2 0xDE PUSH2 0x124C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x12B JUMPI POP POP DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP5 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1FE JUMPI SWAP1 DUP2 PUSH2 0x1EC PUSH1 0x2 PUSH2 0x1FA SWAP5 PUSH2 0x1A7 PUSH2 0x10A4 JUMP JUMPDEST SWAP5 PUSH2 0x1B0 PUSH2 0x12A4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE KECCAK256 DUP4 MLOAD SWAP5 PUSH2 0x1D0 DUP7 PUSH2 0x1107 JUMP JUMPDEST DUP2 SLOAD AND DUP6 MSTORE PUSH2 0x1E1 PUSH1 0x1 DUP3 ADD PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE ADD PUSH2 0x14C7 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x11BE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x1FE JUMPI PUSH2 0x213 CALLDATASIZE PUSH2 0x1208 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x12A4 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP2 SLOAD AND SWAP1 DUP6 DUP6 MLOAD DUP1 SWAP4 PUSH4 0x119F0991 PUSH1 0xE0 SHL DUP3 MSTORE DUP2 DUP1 PUSH2 0x24F PUSH1 0x20 SWAP10 DUP11 DUP9 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x531 JUMPI DUP7 SWAP3 PUSH2 0x50D JUMPI JUMPDEST POP DUP5 MLOAD SWAP7 PUSH2 0x26E DUP9 PUSH2 0x1107 JUMP JUMPDEST CALLER DUP9 MSTORE DUP5 DUP9 ADD SWAP3 DUP4 MSTORE DUP6 DUP9 ADD SWAP4 DUP5 MSTORE CALLER DUP8 MSTORE PUSH1 0x3 DUP6 MSTORE DUP6 DUP8 KECCAK256 SWAP1 DUP9 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x1 SWAP2 DUP3 DUP3 ADD SWAP4 MLOAD DUP1 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP7 DUP6 GT PUSH2 0x4FA JUMPI PUSH2 0x2C7 DUP2 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP5 DUP12 DUP11 PUSH1 0x1F SWAP8 DUP9 DUP1 DUP3 GT PUSH2 0x4CD JUMPI JUMPDEST POP POP POP POP DUP10 DUP13 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH2 0x46A JUMPI SWAP1 PUSH1 0x2 SWAP6 DUP4 PUSH2 0x45F JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP8 SHL OR SWAP1 SSTORE JUMPDEST ADD SWAP5 MLOAD SWAP1 DUP2 MLOAD SWAP5 DUP6 GT PUSH2 0x44C JUMPI POP PUSH2 0x31C DUP6 SLOAD PUSH2 0x1323 JUMP JUMPDEST DUP3 DUP2 GT PUSH2 0x416 JUMPI JUMPDEST POP DUP6 SWAP2 DUP5 GT PUSH1 0x1 EQ PUSH2 0x3AC JUMPI SWAP3 DUP1 PUSH1 0x2 SWAP6 SWAP4 DUP2 SWAP4 PUSH2 0x1FA SWAP10 SWAP9 SWAP7 DUP12 SWAP5 PUSH2 0x3A1 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST CALLER DUP6 MSTORE MSTORE PUSH2 0x368 DUP2 DUP5 KECCAK256 SLOAD ISZERO PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x371 CALLER PUSH2 0x1403 JUMP JUMPDEST POP MLOAD SWAP3 DUP4 SWAP3 PUSH32 0x54DB7A5CB4735E1AAC1F53DB512D3390390BB6637BD30AD4BF9FC98667D9B9B9 CALLER SWAP2 DUP1 LOG2 DUP3 PUSH2 0x11BE JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH2 0x345 JUMP JUMPDEST DUP5 DUP9 MSTORE DUP6 DUP9 KECCAK256 SWAP3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP10 JUMPDEST DUP2 DUP2 LT PUSH2 0x401 JUMPI POP SWAP2 PUSH2 0x1FA SWAP9 SWAP8 SWAP6 SWAP4 SWAP2 DUP6 PUSH1 0x2 SWAP9 SWAP7 SWAP5 LT PUSH2 0x3E8 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x357 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3DB JUMP JUMPDEST DUP3 DUP5 ADD MLOAD DUP6 SSTORE SWAP4 DUP7 ADD SWAP4 SWAP3 DUP9 ADD SWAP3 DUP9 ADD PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x43D SWAP1 DUP7 DUP11 MSTORE DUP8 DUP11 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP10 LT PUSH2 0x443 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0x324 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x432 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2F0 JUMP JUMPDEST DUP9 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND DUP6 DUP4 MSTORE DUP14 DUP1 DUP5 KECCAK256 SWAP4 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x4B6 JUMPI POP POP SWAP7 DUP4 PUSH1 0x2 SWAP9 LT PUSH2 0x49D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x304 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x490 JUMP JUMPDEST DUP4 DUP11 ADD MLOAD DUP6 SSTORE DUP13 SWAP7 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD DUP15 PUSH2 0x47C JUMP JUMPDEST DUP3 DUP5 DUP8 PUSH2 0x4F1 SWAP7 MSTORE KECCAK256 SWAP2 DUP2 DUP7 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 DUP7 LT PUSH2 0x443 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST DUP12 DUP11 CODESIZE DUP9 PUSH2 0x2D6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST PUSH2 0x52A SWAP2 SWAP3 POP RETURNDATASIZE DUP1 DUP9 DUP4 RETURNDATACOPY PUSH2 0x522 DUP2 DUP4 PUSH2 0x1139 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x12C4 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x261 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x17D JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x17D JUMPI SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x1FE JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1FE JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP2 DUP3 DUP6 LT ISZERO PUSH2 0x654 JUMPI PUSH1 0x1 SWAP6 PUSH2 0x595 DUP8 SLOAD DUP6 GT ISZERO PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x59F DUP7 DUP6 PUSH2 0x15F6 JUMP JUMPDEST SWAP6 PUSH2 0x5A9 DUP8 PUSH2 0x173E JUMP JUMPDEST SWAP7 PUSH2 0x5B6 DUP8 MLOAD SWAP9 DUP10 PUSH2 0x1139 JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH2 0x5C5 PUSH1 0x1F NOT SWAP2 PUSH2 0x173E JUMP JUMPDEST ADD PUSH1 0x20 SWAP1 CALLDATASIZE DUP3 DUP11 ADD CALLDATACOPY DUP2 JUMPDEST DUP7 DUP2 LT PUSH2 0x5E4 JUMPI DUP8 MLOAD DUP1 PUSH2 0x1FA DUP12 DUP3 PUSH2 0x1060 JUMP JUMPDEST PUSH2 0x5ED DUP2 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH2 0x5FA DUP6 DUP5 PUSH2 0x15F6 JUMP JUMPDEST SWAP2 DUP12 MLOAD DUP4 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP11 ADD DUP4 ADD MSTORE PUSH1 0x0 NOT DUP2 EQ PUSH2 0x62F JUMPI DUP10 ADD PUSH2 0x5D0 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE POP PUSH1 0x11 SWAP1 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 DUP8 MSTORE DUP9 DUP9 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP9 ADD MSTORE PUSH1 0x22 DUP2 DUP5 ADD MSTORE PUSH32 0x53544152545F494E4445585F475245415445525F5448414E5F454E445F494E44 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x8AB PUSH1 0xF3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x6E4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x6E4 JUMPI POP PUSH2 0x6CE PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0x6C9 PUSH1 0x1 SLOAD DUP3 LT PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SLOAD SWAP2 MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x3 SHL SHR AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1FE JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1FE JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x17D JUMPI PUSH2 0x73E CALLDATASIZE PUSH2 0x1208 JUMP JUMPDEST SWAP4 PUSH2 0x747 PUSH2 0x12A4 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 DUP2 SLOAD AND SWAP6 DUP3 DUP6 MLOAD DUP1 SWAP9 PUSH4 0x119F0991 PUSH1 0xE0 SHL DUP3 MSTORE DUP2 DUP1 PUSH2 0x77B PUSH1 0x20 SWAP10 DUP11 DUP10 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0xADD JUMPI DUP4 SWAP8 PUSH2 0xAC1 JUMPI JUMPDEST POP CALLER DUP4 MSTORE PUSH1 0x2 DUP5 MSTORE PUSH2 0x7A3 DUP6 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x1485 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x3 SWAP2 DUP3 DUP6 MSTORE PUSH1 0x1 SWAP8 PUSH2 0x7D1 PUSH2 0x7BF DUP11 DUP10 DUP9 KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST DUP8 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP3 MLOAD DUP9 DUP5 ADD KECCAK256 EQ PUSH2 0x156D JUMP JUMPDEST CALLER DUP6 MSTORE DUP4 DUP7 MSTORE PUSH2 0x7E5 PUSH1 0x2 DUP9 DUP8 KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST DUP7 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP4 MLOAD DUP8 DUP6 ADD KECCAK256 EQ PUSH2 0xA8C JUMPI CALLER DUP6 MSTORE DUP4 DUP7 MSTORE DUP9 DUP8 DUP7 KECCAK256 ADD DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0xA79 JUMPI DUP2 SWAP1 PUSH2 0x820 DUP5 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA4B JUMPI JUMPDEST POP DUP10 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x9E4 JUMPI DUP10 SWAP3 PUSH2 0x9D9 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP9 SHL SHR NOT AND SWAP1 DUP12 SHL OR SWAP1 SSTORE JUMPDEST CALLER DUP6 MSTORE DUP4 DUP7 MSTORE PUSH1 0x2 DUP8 DUP7 KECCAK256 ADD SWAP2 DUP4 MLOAD SWAP2 DUP3 GT PUSH2 0x9C6 JUMPI POP PUSH2 0x871 DUP3 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x98D JUMPI JUMPDEST POP DUP6 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x920 JUMPI SWAP5 PUSH2 0x1FA SWAP10 SWAP5 PUSH2 0x1EC SWAP8 SWAP5 PUSH2 0x90B SWAP5 DUP5 DUP12 SWAP6 PUSH1 0x2 SWAP11 DUP7 SWAP2 PUSH2 0x915 JUMPI JUMPDEST POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE JUMPDEST PUSH32 0x52D5D029191F3432A61DA6B4ABC8709FF24D4B1B39959556BBA708CF8F93E5C3 DUP5 MLOAD DUP8 DUP2 MSTORE DUP1 PUSH2 0x8E9 CALLER SWAP5 DUP11 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP1 LOG2 CALLER DUP3 MSTORE DUP5 MSTORE KECCAK256 SWAP3 DUP7 MLOAD SWAP8 PUSH2 0x8FF DUP10 PUSH2 0x1107 JUMP JUMPDEST DUP5 SLOAD AND DUP9 MSTORE DUP4 ADD PUSH2 0x14C7 JUMP JUMPDEST SWAP1 DUP7 ADD MSTORE ADD PUSH2 0x14C7 JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD CODESIZE PUSH2 0x8A3 JUMP JUMPDEST DUP3 DUP7 MSTORE DUP7 DUP7 KECCAK256 SWAP1 PUSH1 0x1F NOT DUP4 AND DUP8 JUMPDEST DUP2 DUP2 LT PUSH2 0x978 JUMPI POP SWAP5 PUSH2 0x90B SWAP5 DUP13 DUP6 PUSH1 0x2 SWAP11 SWAP6 PUSH2 0x1FA SWAP16 SWAP11 SWAP6 DUP15 SWAP9 PUSH2 0x1EC SWAP15 SWAP12 LT PUSH2 0x960 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x8B4 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x954 JUMP JUMPDEST DUP7 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP13 ADD SWAP3 SWAP2 DUP10 ADD SWAP2 DUP10 ADD PUSH2 0x92E JUMP JUMPDEST PUSH2 0x9B6 SWAP1 DUP4 DUP8 MSTORE DUP8 DUP8 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP10 DUP6 LT PUSH2 0x9BC JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0x87A JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x9A9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x83E JUMP JUMPDEST DUP5 DUP11 MSTORE DUP11 DUP11 KECCAK256 DUP15 SWAP5 POP SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP14 DUP3 DUP3 LT PUSH2 0xA2C JUMPI POP POP DUP5 GT PUSH2 0xA14 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x850 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xA07 JUMP JUMPDEST SWAP2 SWAP3 SWAP4 SWAP6 SWAP7 DUP3 SWAP2 SWAP6 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 DUP16 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0xA73 SWAP1 DUP6 DUP12 MSTORE DUP12 DUP12 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP14 DUP7 LT PUSH2 0x9BC JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0x829 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x53414D455F5055424C49435F4B4559 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xAD6 SWAP2 SWAP8 POP RETURNDATASIZE DUP1 DUP6 DUP4 RETURNDATACOPY PUSH2 0x522 DUP2 DUP4 PUSH2 0x1139 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x78D JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0x6E4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6E4 JUMPI PUSH2 0xB00 PUSH2 0x124C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1FE JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB69 PUSH2 0x10A4 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE KECCAK256 SLOAD ISZERO ISZERO SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x17D JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x17D JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF8B JUMPI PUSH2 0xBAC SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0xF87 JUMPI SWAP2 DUP7 SWAP4 SWAP2 DUP7 SWAP8 PUSH2 0xBFD SWAP5 PUSH2 0xBD5 PUSH2 0x12A4 JUMP JUMPDEST POP DUP3 DUP10 SLOAD AND DUP9 MLOAD DUP1 DUP1 SWAP9 DUP2 SWAP5 PUSH4 0x119F0991 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x20 SWAP15 DUP16 SWAP1 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0xF7D JUMPI DUP6 SWAP5 PUSH2 0xF61 JUMPI JUMPDEST POP CALLER DUP6 MSTORE PUSH1 0x2 DUP9 MSTORE PUSH2 0xC25 DUP7 DUP7 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x1485 JUMP JUMPDEST CALLER DUP6 MSTORE PUSH1 0x3 SWAP3 DUP4 DUP10 MSTORE PUSH1 0x1 SWAP5 PUSH2 0xC53 PUSH2 0xC41 DUP8 DUP11 DUP11 KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST DUP12 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP3 MLOAD DUP13 DUP5 ADD KECCAK256 EQ PUSH2 0x156D JUMP JUMPDEST CALLER DUP8 MSTORE DUP5 DUP11 MSTORE DUP4 DUP4 DUP10 DUP10 KECCAK256 SLOAD AND EQ PUSH2 0xF2B JUMPI DUP4 DUP8 MSTORE PUSH1 0x2 DUP11 MSTORE PUSH2 0xC79 DUP9 DUP9 KECCAK256 SLOAD ISZERO PUSH2 0x1374 JUMP JUMPDEST CALLER DUP8 MSTORE DUP5 DUP11 MSTORE PUSH1 0x2 DUP9 DUP9 KECCAK256 ADD SWAP9 PUSH2 0xCA3 DUP10 MLOAD SWAP11 PUSH2 0xC95 DUP13 PUSH2 0x1107 JUMP JUMPDEST DUP7 DUP13 MSTORE DUP13 DUP13 ADD SWAP4 DUP5 MSTORE PUSH2 0x14C7 JUMP JUMPDEST SWAP4 DUP10 DUP12 ADD SWAP5 DUP6 MSTORE DUP6 DUP10 MSTORE DUP7 DUP13 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP12 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR DUP2 SSTORE DUP8 DUP2 ADD SWAP3 MLOAD SWAP3 DUP4 MLOAD DUP6 DUP2 GT PUSH2 0x4FA JUMPI SWAP1 DUP11 SWAP3 SWAP2 DUP15 PUSH2 0xCEB DUP4 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP7 PUSH1 0x1F SWAP8 DUP9 DUP2 GT PUSH2 0xEFF JUMPI JUMPDEST POP DUP2 DUP9 DUP5 GT PUSH1 0x1 EQ PUSH2 0xE8E JUMPI POP PUSH1 0x2 SWAP6 SWAP2 SWAP1 DUP4 PUSH2 0xE83 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP13 SHL SHR NOT AND SWAP1 DUP12 SHL OR SWAP1 SSTORE JUMPDEST ADD SWAP4 MLOAD SWAP1 DUP2 MLOAD SWAP4 DUP5 GT PUSH2 0x44C JUMPI POP PUSH2 0xD39 DUP5 SLOAD PUSH2 0x1323 JUMP JUMPDEST DUP12 DUP4 DUP3 GT PUSH2 0xE56 JUMPI JUMPDEST POP POP DUP11 SWAP2 DUP4 GT PUSH1 0x1 EQ PUSH2 0xDE7 JUMPI SWAP4 PUSH1 0x2 SWAP7 SWAP4 DUP4 DUP10 SWAP8 SWAP5 PUSH2 0x1FA SWAP14 SWAP5 PUSH2 0xDCC SWAP9 PUSH2 0xDD2 SWAP13 SWAP3 PUSH2 0xDDC JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP8 SHL SHR NOT AND SWAP1 DUP7 SHL OR SWAP1 SSTORE JUMPDEST PUSH2 0xD86 DUP2 PUSH2 0x1403 JUMP JUMPDEST POP DUP9 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x524387B6C7262C90F5781025BFE7E5AF5A981EE878053FFA078B842D32C8AD84 DUP3 CALLER SWAP3 LOG2 PUSH2 0xDBA CALLER PUSH2 0x1619 JUMP JUMPDEST POP CALLER DUP6 MSTORE MSTORE DUP6 DUP4 KECCAK256 SWAP3 DUP4 SSTORE DUP3 ADD PUSH2 0x15AD JUMP JUMPDEST ADD PUSH2 0x15AD JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x11BE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD6B JUMP JUMPDEST DUP4 DUP9 MSTORE DUP11 DUP9 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP10 JUMPDEST DUP2 DUP2 LT PUSH2 0xE41 JUMPI POP SWAP8 DUP5 PUSH2 0x1FA SWAP14 SWAP5 PUSH2 0xDCC SWAP9 SWAP5 DUP4 SWAP9 SWAP5 PUSH2 0xDD2 SWAP14 SWAP12 SWAP9 PUSH1 0x2 SWAP14 LT PUSH2 0xE29 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xD7D JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP10 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xE1C JUMP JUMPDEST DUP3 DUP5 ADD MLOAD DUP6 SSTORE SWAP4 DUP10 ADD SWAP4 SWAP3 DUP14 ADD SWAP3 DUP14 ADD PUSH2 0xDF6 JUMP JUMPDEST PUSH2 0xE7C SWAP2 DUP7 DUP12 MSTORE DUP5 DUP3 DUP13 KECCAK256 SWAP2 DUP2 DUP9 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 DUP9 LT PUSH2 0x443 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE DUP12 PUSH2 0xD42 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD0F JUMP JUMPDEST DUP5 DUP8 MSTORE DUP1 DUP8 KECCAK256 SWAP2 SWAP7 DUP15 SWAP5 SWAP4 SWAP2 PUSH1 0x1F NOT DUP6 AND SWAP2 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xEDB JUMPI POP POP SWAP7 DUP4 PUSH1 0x2 SWAP9 LT PUSH2 0xEC3 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xD21 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP15 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xEB6 JUMP JUMPDEST DUP4 SWAP7 DUP11 SWAP6 DUP3 SWAP5 SWAP6 DUP4 SWAP5 SWAP9 SWAP11 SWAP12 SWAP13 ADD MLOAD DUP2 SSTORE ADD SWAP7 ADD SWAP5 ADD DUP16 SWAP6 SWAP4 SWAP9 SWAP8 SWAP7 SWAP5 SWAP3 SWAP2 PUSH2 0xEA2 JUMP JUMPDEST PUSH2 0xF25 SWAP1 DUP6 DUP9 MSTORE DUP4 DUP9 KECCAK256 DUP11 DUP1 DUP8 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP7 DUP9 LT PUSH2 0x443 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0xCF7 JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP11 ADD DUP12 SWAP1 MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x53414D455F45564D5F41444452455353 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xF76 SWAP2 SWAP5 POP RETURNDATASIZE DUP1 DUP8 DUP4 RETURNDATACOPY PUSH2 0x522 DUP2 DUP4 PUSH2 0x1139 JUMP JUMPDEST SWAP3 CODESIZE PUSH2 0xC0F JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1FE JUMPI PUSH2 0x1FA SWAP2 PUSH2 0xFCE SWAP1 PUSH1 0x2 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xFBF PUSH2 0x10A4 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x17D JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x17D JUMPI PUSH1 0x1 DUP1 SLOAD DUP1 DUP5 MSTORE DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP6 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP4 SWAP3 SWAP2 JUMPDEST DUP3 DUP3 LT PUSH2 0x104B JUMPI PUSH2 0x1FA DUP8 DUP8 PUSH2 0x1041 DUP3 DUP13 SUB DUP4 PUSH2 0x1139 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1060 JUMP JUMPDEST DUP5 SLOAD DUP9 MSTORE SWAP7 DUP8 ADD SWAP7 SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1087 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1079 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x10BA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x10D2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x10C2 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x10FB DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x10BF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1123 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1123 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1123 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x10BA JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x118E DUP3 PUSH2 0x115B JUMP JUMPDEST SWAP3 PUSH2 0x119C PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1139 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x10BA JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1205 SWAP2 PUSH1 0x20 DUP2 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 PUSH2 0x11F0 PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x60 DUP4 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x1F NOT DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x10BA JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x10BA JUMPI DUP4 PUSH2 0x1235 SWAP2 PUSH1 0x4 ADD PUSH2 0x1177 JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x10BA JUMPI PUSH2 0x1205 SWAP2 PUSH1 0x4 ADD PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1260 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12B1 DUP3 PUSH2 0x1107 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP4 PUSH1 0x0 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x10BA JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x10BA JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x10BA JUMPI DUP1 MLOAD PUSH2 0x12F7 DUP2 PUSH2 0x115B JUMP JUMPDEST SWAP3 PUSH2 0x1305 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1139 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x10BA JUMPI PUSH2 0x1205 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x10BF JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1353 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x133D JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1332 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1368 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x135D JUMP JUMPDEST ISZERO PUSH2 0x137B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x555345525F414C52454144595F455849535453 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x13ED JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1480 JUMPI PUSH1 0x1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x146C JUMPI SWAP1 DUP3 PUSH2 0x1458 PUSH2 0x1441 DUP5 PUSH1 0x1 PUSH1 0x40 SWAP7 ADD PUSH1 0x1 SSTORE PUSH2 0x13B6 JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x148C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1554D15497D113D154D7D393D517D1561254D5 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x14DB DUP5 PUSH2 0x1323 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x154A JUMPI POP PUSH1 0x1 EQ PUSH2 0x1507 JUMPI JUMPDEST POP POP PUSH2 0x1505 SWAP3 POP SUB DUP4 PUSH2 0x1139 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1532 JUMPI POP POP PUSH2 0x1505 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x14F7 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x151A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1505 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x14F7 JUMP JUMPDEST ISZERO PUSH2 0x1574 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0xAC82AA98A8BE9288BE9A92A69A82A8869 PUSH1 0x7B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x15B7 DUP2 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x15C1 JUMPI POP POP JUMP JUMPDEST DUP2 PUSH1 0x1F PUSH1 0x0 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x15D3 JUMPI POP SSTORE JUMP JUMPDEST SWAP1 DUP1 DUP4 SWAP2 DUP3 MSTORE PUSH2 0x15F2 PUSH1 0x1F PUSH1 0x20 DUP5 KECCAK256 SWAP5 ADD PUSH1 0x5 SHR DUP5 ADD PUSH1 0x1 DUP6 ADD PUSH2 0x135D JUMP JUMPDEST SSTORE SSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1603 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP1 ISZERO PUSH2 0x16FE JUMPI PUSH1 0x0 NOT SWAP1 DUP1 DUP3 ADD DUP2 DUP2 GT PUSH2 0x16EA JUMPI PUSH1 0x1 SLOAD SWAP1 DUP4 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x16D6 JUMPI DUP1 DUP3 SUB PUSH2 0x16A2 JUMPI JUMPDEST POP POP POP PUSH1 0x1 SLOAD DUP1 ISZERO PUSH2 0x168E JUMPI DUP2 ADD SWAP1 PUSH2 0x166D DUP3 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE PUSH1 0x1 SSTORE DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH2 0x16C0 PUSH2 0x16B1 PUSH2 0x1441 SWAP4 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP3 DUP4 SWAP3 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1655 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST POP POP SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x170A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x4F55545F4F465F52414E4745 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1123 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 0xA6 0xB1 DIV 0x4E 0x25 JUMPI DUP14 ADDMOD ADDMOD CALLCODE 0x2F DUP2 PUSH17 0x409D9C8CEA01A7BA7D5E33C46721B83350 AND PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"227:4549:5:-:0;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;-1:-1:-1;;;;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;227:4549:5;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;719:10:1;;227:4549:5;;;;-1:-1:-1;227:4549:5;;;719:10:1;;227:4549:5;;2566:40:0;-1:-1:-1;2566:40:0;;731:42:5;227:4549;;;731:42;227:4549;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;-1:-1:-1;227:4549:5;;;;;-1:-1:-1;227:4549:5"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":4260,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4471,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":4804,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytest_bytes":{"entryPoint":4616,"id":null,"parameterSlots":1,"returnSlots":2},"abi_encode_array_address_dyn":{"entryPoint":4192,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":4322,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_User":{"entryPoint":4542,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_struct_struct_User":{"entryPoint":4772,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":5950,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":4443,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256":{"entryPoint":5622,"id":null,"parameterSlots":2,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":4957,"id":null,"parameterSlots":2,"returnSlots":0},"copy_array_from_storage_to_memory_bytes":{"entryPoint":5319,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4287,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4899,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":4409,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_14133":{"entryPoint":4359,"id":null,"parameterSlots":1,"returnSlots":0},"fun_add":{"entryPoint":5123,"id":187,"parameterSlots":1,"returnSlots":1},"fun_checkOwner":{"entryPoint":4684,"id":54,"parameterSlots":0,"returnSlots":0},"fun_remove":{"entryPoint":5657,"id":271,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral_2df7":{"entryPoint":5485,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_9d7d":{"entryPoint":5891,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d7c2":{"entryPoint":5253,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_dea8":{"entryPoint":4980,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_bytes32_dyn_ptr":{"entryPoint":5046,"id":null,"parameterSlots":1,"returnSlots":2},"storage_set_to_zero_bytes":{"entryPoint":5549,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604081815260048036101561001557600080fd5b600092833560e01c908162ce8e3e14610fe15750806311231fe014610f8f578063470471ef14610b7b57806348990fcc14610b41578063715018a614610ae7578063899915201461072e5780638da5cb5b14610706578063b5cb15f7146106e7578063c6e064ad146106a1578063cf5caa1214610562578063cf6956881461053b578063ebc4bf8414610202578063ef2a8764146101815763f2fde38b146100bc57600080fd5b3461017d57602036600319011261017d576100d56110a4565b906100de61124c565b6001600160a01b0391821692831561012b57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101fe5760203660031901126101fe5790816101ec60026101fa946101a76110a4565b946101b06112a4565b506001600160a01b0395861681526003602052208351946101d086611107565b81541685526101e1600182016114c7565b6020860152016114c7565b8183015251918291826111be565b0390f35b5080fd5b509190346101fe5761021336611208565b61021b6112a4565b5060018060a01b03948581541690858551809363119f099160e01b8252818061024f6020998a8884015260248301906110e2565b03915afa91821561053157869261050d575b5084519661026e88611107565b33885284880192835285880193845233875260038552858720908851166bffffffffffffffffffffffff60a01b825416178155600191828201935180519267ffffffffffffffff958685116104fa576102c78154611323565b948b8a601f97888082116104cd575b50505050898c87831160011461046a57906002958361045f575b5050600019600383901b1c191690871b1790555b01945190815194851161044c575061031c8554611323565b828111610416575b50859184116001146103ac5792806002959381936101fa9998968b946103a1575b50501b916000199060031b1c19161790555b338552526103688184205415611374565b61037133611403565b50519283927f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9339180a2826111be565b015192503880610345565b8488528588209293929190601f198416895b8181106104015750916101fa9897959391856002989694106103e8575b505050811b019055610357565b015160001960f88460031b161c191690553880806103db565b828401518555938601939288019288016103be565b61043d90868a52878a208480880160051c8201928a8910610443575b0160051c019061135d565b38610324565b92508192610432565b634e487b7160e01b895260419052602488fd5b0151905038806102f0565b889291601f1983168583528d80842093905b8282106104b657505096836002981061049d575b505050811b019055610304565b015160001960f88460031b161c19169055388080610490565b838a015185558c969094019392830192018e61047c565b8284876104f19652209181860160051c8301938610610443570160051c019061135d565b8b8a38886102d6565b634e487b7160e01b8b526041845260248bfd5b61052a9192503d8088833e6105228183611139565b8101906112c4565b9038610261565b85513d88823e3d90fd5b503461017d578260031936011261017d575490516001600160a01b03909116815260209150f35b509190346101fe57806003193601126101fe57823591602480359182851015610654576001956105958754851115611703565b61059f86856115f6565b956105a98761173e565b966105b687519889611139565b8088526105c5601f199161173e565b0160209036828a0137815b8681106105e4578751806101fa8b82611060565b6105ed816113b6565b9054906105fa85846115f6565b918b518310156106425760039190911b1c6001600160a01b031660059190911b8a01830152600019811461062f5789016105d0565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5091346106e45760203660031901126106e457506106ce602092356106c96001548210611703565b6113b6565b905491519160018060a01b039160031b1c168152f35b80fd5b5050346101fe57816003193601126101fe576020906001549051908152f35b5050346101fe57816003193601126101fe57905490516001600160a01b039091168152602090f35b50903461017d5761073e36611208565b936107476112a4565b5060018060a01b03938481541695828551809863119f099160e01b8252818061077b6020998a8984015260248301906110e2565b03915afa968715610add578397610ac1575b50338352600284526107a3858420541515611485565b3383526003918285526001976107d16107bf8a898820016114c7565b8781519101208251888401201461156d565b3385528386526107e56002888720016114c7565b86815191012083518785012014610a8c573385528386528887862001815167ffffffffffffffff92838211610a795781906108208454611323565b601f8111610a4b575b508990601f83116001146109e45789926109d9575b505060001982881b1c1916908b1b1790555b3385528386526002878620019183519182116109c657506108718254611323565b601f811161098d575b5085601f821160011461092057946101fa99946101ec979461090b94848b9560029a8691610915575b5060001982861b1c191690891b1790555b7f52d5d029191f3432a61da6b4abc8709ff24d4b1b39959556bba708cf8f93e5c38451878152806108e933948a8301906110e2565b0390a2338252845220928651976108ff89611107565b845416885283016114c7565b90860152016114c7565b9050830151386108a3565b82865286862090601f198316875b81811061097857509461090b948c8560029a956101fa9f9a958e986101ec9e9b10610960575b5050811b0190556108b4565b85015160001983881b60f8161c191690553880610954565b868301518455928c019291890191890161092e565b6109b690838752878720601f840160051c8101918985106109bc575b601f0160051c019061135d565b3861087a565b90915081906109a9565b634e487b7160e01b865260419052602485fd5b01519050388061083e565b848a528a8a208e94509190601f1984168b5b8d828210610a2c5750508411610a14575b505050811b019055610850565b0151600019838a1b60f8161c19169055388080610a07565b91929395968291958786015181550195019301908f95949392916109f6565b610a7390858b528b8b20601f850160051c8101918d86106109bc57601f0160051c019061135d565b38610829565b634e487b7160e01b885260418552602488fd5b865162461bcd60e51b8152808301879052600f60248201526e53414d455f5055424c49435f4b455960881b6044820152606490fd5b610ad69197503d8085833e6105228183611139565b953861078d565b85513d85823e3d90fd5b83346106e457806003193601126106e457610b0061124c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101fe5760203660031901126101fe5760209181906001600160a01b03610b696110a4565b16815260028452205415159051908152f35b50903461017d578060031936011261017d5767ffffffffffffffff8235818111610f8b57610bac9036908501611177565b6001600160a01b036024358181169290839003610f8757918693918697610bfd94610bd56112a4565b50828954168851808098819463119f099160e01b835260209e8f9084015260248301906110e2565b03915afa938415610f7d578594610f61575b5033855260028852610c25868620541515611485565b338552600392838952600194610c53610c41878a8a20016114c7565b8b815191012082518c8401201461156d565b338752848a528383898920541614610f2b5783875260028a52610c798888205415611374565b338752848a5260028888200198610ca389519a610c958c611107565b868c528c8c019384526114c7565b93898b01948552858952868c52898920908b51166bffffffffffffffffffffffff60a01b82541617815587810192519283518581116104fa57908a92918e610ceb8354611323565b96601f97888111610eff575b5081888411600114610e8e5750600295919083610e83575b5050600019828c1b1c1916908b1b1790555b01935190815193841161044c5750610d398454611323565b8b838211610e56575b50508a918311600114610de7579360029693838997946101fa9d94610dcc98610dd29c92610ddc575b505060001982871b1c191690861b1790555b610d8681611403565b5088519081527f524387b6c7262c90f5781025bfe7e5af5a981ee878053ffa078b842d32c8ad84823392a2610dba33611619565b503385525285832092835582016115ad565b016115ad565b51918291826111be565b015190503880610d6b565b8388528a88209190601f198416895b818110610e41575097846101fa9d94610dcc9894839894610dd29d9b9860029d10610e29575b505050811b019055610d7d565b015160001983891b60f8161c19169055388080610e1c565b82840151855593890193928d01928d01610df6565b610e7c91868b5284828c209181880160051c8301938810610443570160051c019061135d565b388b610d42565b015190503880610d0f565b84875280872091968e949391601f19851691905b828210610edb575050968360029810610ec3575b505050811b019055610d21565b0151600019838e1b60f8161c19169055388080610eb6565b83968a958294958394989a9b9c0151815501960194018f9593989796949291610ea2565b610f25908588528388208a80870160051c820192868810610443570160051c019061135d565b38610cf7565b875162461bcd60e51b8152808a018b9052601060248201526f53414d455f45564d5f4144445245535360801b6044820152606490fd5b610f769194503d8087833e6105228183611139565b9238610c0f565b86513d87823e3d90fd5b8680fd5b8480fd5b5050346101fe5760203660031901126101fe576101fa91610fce9060029083906001600160a01b03610fbf6110a4565b168152600360205220016114c7565b90519182916020835260208301906110e2565b8490843461017d578260031936011261017d57600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b82821061104b576101fa8787611041828c0383611139565b5191829182611060565b84548852968701969383019390830190611029565b6020908160408183019282815285518094520193019160005b828110611087575050505090565b83516001600160a01b031685529381019392810192600101611079565b600435906001600160a01b03821682036110ba57565b600080fd5b60005b8381106110d25750506000910152565b81810151838201526020016110c2565b906020916110fb815180928185528580860191016110bf565b601f01601f1916010190565b6060810190811067ffffffffffffffff82111761112357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761112357604052565b67ffffffffffffffff811161112357601f01601f191660200190565b81601f820112156110ba5780359061118e8261115b565b9261119c6040519485611139565b828452602083830101116110ba57816000926020809301838601378301015290565b90611205916020815260018060a01b03825116602082015260406111f0602084015160608385015260808401906110e2565b920151906060601f19828503019101526110e2565b90565b9060406003198301126110ba5767ffffffffffffffff6004358181116110ba578361123591600401611177565b926024359182116110ba5761120591600401611177565b6000546001600160a01b0316330361126057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906112b182611107565b6060604083600081528260208201520152565b6020818303126110ba5780519067ffffffffffffffff82116110ba570181601f820112156110ba5780516112f78161115b565b926113056040519485611139565b818452602082840101116110ba5761120591602080850191016110bf565b90600182811c92168015611353575b602083101461133d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611332565b818110611368575050565b6000815560010161135d565b1561137b57565b60405162461bcd60e51b8152602060048201526013602482015272555345525f414c52454144595f45584953545360681b6044820152606490fd5b6001548110156113ed5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054611480576001546801000000000000000081101561146c579082611458611441846001604096016001556113b6565b819391549060031b91821b91600019901b19161790565b905560015492815260026020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b1561148c57565b60405162461bcd60e51b81526020600482015260136024820152721554d15497d113d154d7d393d517d1561254d5606a1b6044820152606490fd5b90604051918260008254926114db84611323565b90818452600194858116908160001461154a5750600114611507575b505061150592500383611139565b565b9093915060005260209081600020936000915b818310611532575050611505935082010138806114f7565b8554888401850152948501948794509183019161151a565b91505061150594506020925060ff191682840152151560051b82010138806114f7565b1561157457565b60405162461bcd60e51b81526020600482015260116024820152700ac82aa98a8be9288be9a92a69a82a8869607b1b6044820152606490fd5b6115b78154611323565b90816115c1575050565b81601f600093116001146115d3575055565b9080839182526115f2601f60208420940160051c84016001850161135d565b5555565b9190820391821161160357565b634e487b7160e01b600052601160045260246000fd5b60008181526002602052604081205490919080156116fe57600019908082018181116116ea57600154908382019182116116d6578082036116a2575b505050600154801561168e5781019061166d826113b6565b909182549160031b1b19169055600155815260026020526040812055600190565b634e487b7160e01b84526031600452602484fd5b6116c06116b1611441936113b6565b90549060031b1c9283926113b6565b9055845260026020526040842055388080611655565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b1561170a57565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b67ffffffffffffffff81116111235760051b6020019056fea264697066735822122090a6b1044e25578d0808f22f8170409d9c8cea01a7ba7d5e33c46721b833501664736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xCE8E3E EQ PUSH2 0xFE1 JUMPI POP DUP1 PUSH4 0x11231FE0 EQ PUSH2 0xF8F JUMPI DUP1 PUSH4 0x470471EF EQ PUSH2 0xB7B JUMPI DUP1 PUSH4 0x48990FCC EQ PUSH2 0xB41 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAE7 JUMPI DUP1 PUSH4 0x89991520 EQ PUSH2 0x72E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x706 JUMPI DUP1 PUSH4 0xB5CB15F7 EQ PUSH2 0x6E7 JUMPI DUP1 PUSH4 0xC6E064AD EQ PUSH2 0x6A1 JUMPI DUP1 PUSH4 0xCF5CAA12 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0xCF695688 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xEBC4BF84 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xEF2A8764 EQ PUSH2 0x181 JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x17D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x17D JUMPI PUSH2 0xD5 PUSH2 0x10A4 JUMP JUMPDEST SWAP1 PUSH2 0xDE PUSH2 0x124C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x12B JUMPI POP POP DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP5 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1FE JUMPI SWAP1 DUP2 PUSH2 0x1EC PUSH1 0x2 PUSH2 0x1FA SWAP5 PUSH2 0x1A7 PUSH2 0x10A4 JUMP JUMPDEST SWAP5 PUSH2 0x1B0 PUSH2 0x12A4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE KECCAK256 DUP4 MLOAD SWAP5 PUSH2 0x1D0 DUP7 PUSH2 0x1107 JUMP JUMPDEST DUP2 SLOAD AND DUP6 MSTORE PUSH2 0x1E1 PUSH1 0x1 DUP3 ADD PUSH2 0x14C7 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE ADD PUSH2 0x14C7 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x11BE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x1FE JUMPI PUSH2 0x213 CALLDATASIZE PUSH2 0x1208 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x12A4 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP2 SLOAD AND SWAP1 DUP6 DUP6 MLOAD DUP1 SWAP4 PUSH4 0x119F0991 PUSH1 0xE0 SHL DUP3 MSTORE DUP2 DUP1 PUSH2 0x24F PUSH1 0x20 SWAP10 DUP11 DUP9 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x531 JUMPI DUP7 SWAP3 PUSH2 0x50D JUMPI JUMPDEST POP DUP5 MLOAD SWAP7 PUSH2 0x26E DUP9 PUSH2 0x1107 JUMP JUMPDEST CALLER DUP9 MSTORE DUP5 DUP9 ADD SWAP3 DUP4 MSTORE DUP6 DUP9 ADD SWAP4 DUP5 MSTORE CALLER DUP8 MSTORE PUSH1 0x3 DUP6 MSTORE DUP6 DUP8 KECCAK256 SWAP1 DUP9 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x1 SWAP2 DUP3 DUP3 ADD SWAP4 MLOAD DUP1 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP7 DUP6 GT PUSH2 0x4FA JUMPI PUSH2 0x2C7 DUP2 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP5 DUP12 DUP11 PUSH1 0x1F SWAP8 DUP9 DUP1 DUP3 GT PUSH2 0x4CD JUMPI JUMPDEST POP POP POP POP DUP10 DUP13 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH2 0x46A JUMPI SWAP1 PUSH1 0x2 SWAP6 DUP4 PUSH2 0x45F JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP8 SHL OR SWAP1 SSTORE JUMPDEST ADD SWAP5 MLOAD SWAP1 DUP2 MLOAD SWAP5 DUP6 GT PUSH2 0x44C JUMPI POP PUSH2 0x31C DUP6 SLOAD PUSH2 0x1323 JUMP JUMPDEST DUP3 DUP2 GT PUSH2 0x416 JUMPI JUMPDEST POP DUP6 SWAP2 DUP5 GT PUSH1 0x1 EQ PUSH2 0x3AC JUMPI SWAP3 DUP1 PUSH1 0x2 SWAP6 SWAP4 DUP2 SWAP4 PUSH2 0x1FA SWAP10 SWAP9 SWAP7 DUP12 SWAP5 PUSH2 0x3A1 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST CALLER DUP6 MSTORE MSTORE PUSH2 0x368 DUP2 DUP5 KECCAK256 SLOAD ISZERO PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x371 CALLER PUSH2 0x1403 JUMP JUMPDEST POP MLOAD SWAP3 DUP4 SWAP3 PUSH32 0x54DB7A5CB4735E1AAC1F53DB512D3390390BB6637BD30AD4BF9FC98667D9B9B9 CALLER SWAP2 DUP1 LOG2 DUP3 PUSH2 0x11BE JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH2 0x345 JUMP JUMPDEST DUP5 DUP9 MSTORE DUP6 DUP9 KECCAK256 SWAP3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP10 JUMPDEST DUP2 DUP2 LT PUSH2 0x401 JUMPI POP SWAP2 PUSH2 0x1FA SWAP9 SWAP8 SWAP6 SWAP4 SWAP2 DUP6 PUSH1 0x2 SWAP9 SWAP7 SWAP5 LT PUSH2 0x3E8 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x357 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3DB JUMP JUMPDEST DUP3 DUP5 ADD MLOAD DUP6 SSTORE SWAP4 DUP7 ADD SWAP4 SWAP3 DUP9 ADD SWAP3 DUP9 ADD PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x43D SWAP1 DUP7 DUP11 MSTORE DUP8 DUP11 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP10 LT PUSH2 0x443 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0x324 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x432 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2F0 JUMP JUMPDEST DUP9 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND DUP6 DUP4 MSTORE DUP14 DUP1 DUP5 KECCAK256 SWAP4 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x4B6 JUMPI POP POP SWAP7 DUP4 PUSH1 0x2 SWAP9 LT PUSH2 0x49D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x304 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x490 JUMP JUMPDEST DUP4 DUP11 ADD MLOAD DUP6 SSTORE DUP13 SWAP7 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP4 ADD SWAP3 ADD DUP15 PUSH2 0x47C JUMP JUMPDEST DUP3 DUP5 DUP8 PUSH2 0x4F1 SWAP7 MSTORE KECCAK256 SWAP2 DUP2 DUP7 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 DUP7 LT PUSH2 0x443 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST DUP12 DUP11 CODESIZE DUP9 PUSH2 0x2D6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST PUSH2 0x52A SWAP2 SWAP3 POP RETURNDATASIZE DUP1 DUP9 DUP4 RETURNDATACOPY PUSH2 0x522 DUP2 DUP4 PUSH2 0x1139 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x12C4 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x261 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x17D JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x17D JUMPI SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x1FE JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1FE JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP2 DUP3 DUP6 LT ISZERO PUSH2 0x654 JUMPI PUSH1 0x1 SWAP6 PUSH2 0x595 DUP8 SLOAD DUP6 GT ISZERO PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x59F DUP7 DUP6 PUSH2 0x15F6 JUMP JUMPDEST SWAP6 PUSH2 0x5A9 DUP8 PUSH2 0x173E JUMP JUMPDEST SWAP7 PUSH2 0x5B6 DUP8 MLOAD SWAP9 DUP10 PUSH2 0x1139 JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH2 0x5C5 PUSH1 0x1F NOT SWAP2 PUSH2 0x173E JUMP JUMPDEST ADD PUSH1 0x20 SWAP1 CALLDATASIZE DUP3 DUP11 ADD CALLDATACOPY DUP2 JUMPDEST DUP7 DUP2 LT PUSH2 0x5E4 JUMPI DUP8 MLOAD DUP1 PUSH2 0x1FA DUP12 DUP3 PUSH2 0x1060 JUMP JUMPDEST PUSH2 0x5ED DUP2 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH2 0x5FA DUP6 DUP5 PUSH2 0x15F6 JUMP JUMPDEST SWAP2 DUP12 MLOAD DUP4 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP11 ADD DUP4 ADD MSTORE PUSH1 0x0 NOT DUP2 EQ PUSH2 0x62F JUMPI DUP10 ADD PUSH2 0x5D0 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE POP PUSH1 0x11 SWAP1 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 DUP8 MSTORE DUP9 DUP9 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP9 ADD MSTORE PUSH1 0x22 DUP2 DUP5 ADD MSTORE PUSH32 0x53544152545F494E4445585F475245415445525F5448414E5F454E445F494E44 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x8AB PUSH1 0xF3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x6E4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x6E4 JUMPI POP PUSH2 0x6CE PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0x6C9 PUSH1 0x1 SLOAD DUP3 LT PUSH2 0x1703 JUMP JUMPDEST PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SLOAD SWAP2 MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x3 SHL SHR AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1FE JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1FE JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x17D JUMPI PUSH2 0x73E CALLDATASIZE PUSH2 0x1208 JUMP JUMPDEST SWAP4 PUSH2 0x747 PUSH2 0x12A4 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 DUP2 SLOAD AND SWAP6 DUP3 DUP6 MLOAD DUP1 SWAP9 PUSH4 0x119F0991 PUSH1 0xE0 SHL DUP3 MSTORE DUP2 DUP1 PUSH2 0x77B PUSH1 0x20 SWAP10 DUP11 DUP10 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0xADD JUMPI DUP4 SWAP8 PUSH2 0xAC1 JUMPI JUMPDEST POP CALLER DUP4 MSTORE PUSH1 0x2 DUP5 MSTORE PUSH2 0x7A3 DUP6 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x1485 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x3 SWAP2 DUP3 DUP6 MSTORE PUSH1 0x1 SWAP8 PUSH2 0x7D1 PUSH2 0x7BF DUP11 DUP10 DUP9 KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST DUP8 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP3 MLOAD DUP9 DUP5 ADD KECCAK256 EQ PUSH2 0x156D JUMP JUMPDEST CALLER DUP6 MSTORE DUP4 DUP7 MSTORE PUSH2 0x7E5 PUSH1 0x2 DUP9 DUP8 KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST DUP7 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP4 MLOAD DUP8 DUP6 ADD KECCAK256 EQ PUSH2 0xA8C JUMPI CALLER DUP6 MSTORE DUP4 DUP7 MSTORE DUP9 DUP8 DUP7 KECCAK256 ADD DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0xA79 JUMPI DUP2 SWAP1 PUSH2 0x820 DUP5 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA4B JUMPI JUMPDEST POP DUP10 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x9E4 JUMPI DUP10 SWAP3 PUSH2 0x9D9 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP9 SHL SHR NOT AND SWAP1 DUP12 SHL OR SWAP1 SSTORE JUMPDEST CALLER DUP6 MSTORE DUP4 DUP7 MSTORE PUSH1 0x2 DUP8 DUP7 KECCAK256 ADD SWAP2 DUP4 MLOAD SWAP2 DUP3 GT PUSH2 0x9C6 JUMPI POP PUSH2 0x871 DUP3 SLOAD PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x98D JUMPI JUMPDEST POP DUP6 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x920 JUMPI SWAP5 PUSH2 0x1FA SWAP10 SWAP5 PUSH2 0x1EC SWAP8 SWAP5 PUSH2 0x90B SWAP5 DUP5 DUP12 SWAP6 PUSH1 0x2 SWAP11 DUP7 SWAP2 PUSH2 0x915 JUMPI JUMPDEST POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE JUMPDEST PUSH32 0x52D5D029191F3432A61DA6B4ABC8709FF24D4B1B39959556BBA708CF8F93E5C3 DUP5 MLOAD DUP8 DUP2 MSTORE DUP1 PUSH2 0x8E9 CALLER SWAP5 DUP11 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP1 LOG2 CALLER DUP3 MSTORE DUP5 MSTORE KECCAK256 SWAP3 DUP7 MLOAD SWAP8 PUSH2 0x8FF DUP10 PUSH2 0x1107 JUMP JUMPDEST DUP5 SLOAD AND DUP9 MSTORE DUP4 ADD PUSH2 0x14C7 JUMP JUMPDEST SWAP1 DUP7 ADD MSTORE ADD PUSH2 0x14C7 JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD CODESIZE PUSH2 0x8A3 JUMP JUMPDEST DUP3 DUP7 MSTORE DUP7 DUP7 KECCAK256 SWAP1 PUSH1 0x1F NOT DUP4 AND DUP8 JUMPDEST DUP2 DUP2 LT PUSH2 0x978 JUMPI POP SWAP5 PUSH2 0x90B SWAP5 DUP13 DUP6 PUSH1 0x2 SWAP11 SWAP6 PUSH2 0x1FA SWAP16 SWAP11 SWAP6 DUP15 SWAP9 PUSH2 0x1EC SWAP15 SWAP12 LT PUSH2 0x960 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x8B4 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x954 JUMP JUMPDEST DUP7 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP13 ADD SWAP3 SWAP2 DUP10 ADD SWAP2 DUP10 ADD PUSH2 0x92E JUMP JUMPDEST PUSH2 0x9B6 SWAP1 DUP4 DUP8 MSTORE DUP8 DUP8 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP10 DUP6 LT PUSH2 0x9BC JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0x87A JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x9A9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x83E JUMP JUMPDEST DUP5 DUP11 MSTORE DUP11 DUP11 KECCAK256 DUP15 SWAP5 POP SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP14 DUP3 DUP3 LT PUSH2 0xA2C JUMPI POP POP DUP5 GT PUSH2 0xA14 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x850 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xA07 JUMP JUMPDEST SWAP2 SWAP3 SWAP4 SWAP6 SWAP7 DUP3 SWAP2 SWAP6 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 DUP16 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0xA73 SWAP1 DUP6 DUP12 MSTORE DUP12 DUP12 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP14 DUP7 LT PUSH2 0x9BC JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0x829 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x53414D455F5055424C49435F4B4559 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xAD6 SWAP2 SWAP8 POP RETURNDATASIZE DUP1 DUP6 DUP4 RETURNDATACOPY PUSH2 0x522 DUP2 DUP4 PUSH2 0x1139 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x78D JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0x6E4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x6E4 JUMPI PUSH2 0xB00 PUSH2 0x124C JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1FE JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB69 PUSH2 0x10A4 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE KECCAK256 SLOAD ISZERO ISZERO SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x17D JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x17D JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF8B JUMPI PUSH2 0xBAC SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0xF87 JUMPI SWAP2 DUP7 SWAP4 SWAP2 DUP7 SWAP8 PUSH2 0xBFD SWAP5 PUSH2 0xBD5 PUSH2 0x12A4 JUMP JUMPDEST POP DUP3 DUP10 SLOAD AND DUP9 MLOAD DUP1 DUP1 SWAP9 DUP2 SWAP5 PUSH4 0x119F0991 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x20 SWAP15 DUP16 SWAP1 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0xF7D JUMPI DUP6 SWAP5 PUSH2 0xF61 JUMPI JUMPDEST POP CALLER DUP6 MSTORE PUSH1 0x2 DUP9 MSTORE PUSH2 0xC25 DUP7 DUP7 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x1485 JUMP JUMPDEST CALLER DUP6 MSTORE PUSH1 0x3 SWAP3 DUP4 DUP10 MSTORE PUSH1 0x1 SWAP5 PUSH2 0xC53 PUSH2 0xC41 DUP8 DUP11 DUP11 KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST DUP12 DUP2 MLOAD SWAP2 ADD KECCAK256 DUP3 MLOAD DUP13 DUP5 ADD KECCAK256 EQ PUSH2 0x156D JUMP JUMPDEST CALLER DUP8 MSTORE DUP5 DUP11 MSTORE DUP4 DUP4 DUP10 DUP10 KECCAK256 SLOAD AND EQ PUSH2 0xF2B JUMPI DUP4 DUP8 MSTORE PUSH1 0x2 DUP11 MSTORE PUSH2 0xC79 DUP9 DUP9 KECCAK256 SLOAD ISZERO PUSH2 0x1374 JUMP JUMPDEST CALLER DUP8 MSTORE DUP5 DUP11 MSTORE PUSH1 0x2 DUP9 DUP9 KECCAK256 ADD SWAP9 PUSH2 0xCA3 DUP10 MLOAD SWAP11 PUSH2 0xC95 DUP13 PUSH2 0x1107 JUMP JUMPDEST DUP7 DUP13 MSTORE DUP13 DUP13 ADD SWAP4 DUP5 MSTORE PUSH2 0x14C7 JUMP JUMPDEST SWAP4 DUP10 DUP12 ADD SWAP5 DUP6 MSTORE DUP6 DUP10 MSTORE DUP7 DUP13 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP12 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR DUP2 SSTORE DUP8 DUP2 ADD SWAP3 MLOAD SWAP3 DUP4 MLOAD DUP6 DUP2 GT PUSH2 0x4FA JUMPI SWAP1 DUP11 SWAP3 SWAP2 DUP15 PUSH2 0xCEB DUP4 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP7 PUSH1 0x1F SWAP8 DUP9 DUP2 GT PUSH2 0xEFF JUMPI JUMPDEST POP DUP2 DUP9 DUP5 GT PUSH1 0x1 EQ PUSH2 0xE8E JUMPI POP PUSH1 0x2 SWAP6 SWAP2 SWAP1 DUP4 PUSH2 0xE83 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP13 SHL SHR NOT AND SWAP1 DUP12 SHL OR SWAP1 SSTORE JUMPDEST ADD SWAP4 MLOAD SWAP1 DUP2 MLOAD SWAP4 DUP5 GT PUSH2 0x44C JUMPI POP PUSH2 0xD39 DUP5 SLOAD PUSH2 0x1323 JUMP JUMPDEST DUP12 DUP4 DUP3 GT PUSH2 0xE56 JUMPI JUMPDEST POP POP DUP11 SWAP2 DUP4 GT PUSH1 0x1 EQ PUSH2 0xDE7 JUMPI SWAP4 PUSH1 0x2 SWAP7 SWAP4 DUP4 DUP10 SWAP8 SWAP5 PUSH2 0x1FA SWAP14 SWAP5 PUSH2 0xDCC SWAP9 PUSH2 0xDD2 SWAP13 SWAP3 PUSH2 0xDDC JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP8 SHL SHR NOT AND SWAP1 DUP7 SHL OR SWAP1 SSTORE JUMPDEST PUSH2 0xD86 DUP2 PUSH2 0x1403 JUMP JUMPDEST POP DUP9 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x524387B6C7262C90F5781025BFE7E5AF5A981EE878053FFA078B842D32C8AD84 DUP3 CALLER SWAP3 LOG2 PUSH2 0xDBA CALLER PUSH2 0x1619 JUMP JUMPDEST POP CALLER DUP6 MSTORE MSTORE DUP6 DUP4 KECCAK256 SWAP3 DUP4 SSTORE DUP3 ADD PUSH2 0x15AD JUMP JUMPDEST ADD PUSH2 0x15AD JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x11BE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD6B JUMP JUMPDEST DUP4 DUP9 MSTORE DUP11 DUP9 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP10 JUMPDEST DUP2 DUP2 LT PUSH2 0xE41 JUMPI POP SWAP8 DUP5 PUSH2 0x1FA SWAP14 SWAP5 PUSH2 0xDCC SWAP9 SWAP5 DUP4 SWAP9 SWAP5 PUSH2 0xDD2 SWAP14 SWAP12 SWAP9 PUSH1 0x2 SWAP14 LT PUSH2 0xE29 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xD7D JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP10 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xE1C JUMP JUMPDEST DUP3 DUP5 ADD MLOAD DUP6 SSTORE SWAP4 DUP10 ADD SWAP4 SWAP3 DUP14 ADD SWAP3 DUP14 ADD PUSH2 0xDF6 JUMP JUMPDEST PUSH2 0xE7C SWAP2 DUP7 DUP12 MSTORE DUP5 DUP3 DUP13 KECCAK256 SWAP2 DUP2 DUP9 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 DUP9 LT PUSH2 0x443 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE DUP12 PUSH2 0xD42 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD0F JUMP JUMPDEST DUP5 DUP8 MSTORE DUP1 DUP8 KECCAK256 SWAP2 SWAP7 DUP15 SWAP5 SWAP4 SWAP2 PUSH1 0x1F NOT DUP6 AND SWAP2 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xEDB JUMPI POP POP SWAP7 DUP4 PUSH1 0x2 SWAP9 LT PUSH2 0xEC3 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xD21 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP15 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xEB6 JUMP JUMPDEST DUP4 SWAP7 DUP11 SWAP6 DUP3 SWAP5 SWAP6 DUP4 SWAP5 SWAP9 SWAP11 SWAP12 SWAP13 ADD MLOAD DUP2 SSTORE ADD SWAP7 ADD SWAP5 ADD DUP16 SWAP6 SWAP4 SWAP9 SWAP8 SWAP7 SWAP5 SWAP3 SWAP2 PUSH2 0xEA2 JUMP JUMPDEST PUSH2 0xF25 SWAP1 DUP6 DUP9 MSTORE DUP4 DUP9 KECCAK256 DUP11 DUP1 DUP8 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP7 DUP9 LT PUSH2 0x443 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x135D JUMP JUMPDEST CODESIZE PUSH2 0xCF7 JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP11 ADD DUP12 SWAP1 MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x53414D455F45564D5F41444452455353 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xF76 SWAP2 SWAP5 POP RETURNDATASIZE DUP1 DUP8 DUP4 RETURNDATACOPY PUSH2 0x522 DUP2 DUP4 PUSH2 0x1139 JUMP JUMPDEST SWAP3 CODESIZE PUSH2 0xC0F JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1FE JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1FE JUMPI PUSH2 0x1FA SWAP2 PUSH2 0xFCE SWAP1 PUSH1 0x2 SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xFBF PUSH2 0x10A4 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE KECCAK256 ADD PUSH2 0x14C7 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x17D JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x17D JUMPI PUSH1 0x1 DUP1 SLOAD DUP1 DUP5 MSTORE DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP6 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP4 SWAP3 SWAP2 JUMPDEST DUP3 DUP3 LT PUSH2 0x104B JUMPI PUSH2 0x1FA DUP8 DUP8 PUSH2 0x1041 DUP3 DUP13 SUB DUP4 PUSH2 0x1139 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1060 JUMP JUMPDEST DUP5 SLOAD DUP9 MSTORE SWAP7 DUP8 ADD SWAP7 SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1087 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1079 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x10BA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x10D2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x10C2 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x10FB DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x10BF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1123 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1123 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1123 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x10BA JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x118E DUP3 PUSH2 0x115B JUMP JUMPDEST SWAP3 PUSH2 0x119C PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1139 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x10BA JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1205 SWAP2 PUSH1 0x20 DUP2 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 PUSH2 0x11F0 PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x60 DUP4 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH2 0x10E2 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x1F NOT DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x10BA JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x10BA JUMPI DUP4 PUSH2 0x1235 SWAP2 PUSH1 0x4 ADD PUSH2 0x1177 JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x10BA JUMPI PUSH2 0x1205 SWAP2 PUSH1 0x4 ADD PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1260 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12B1 DUP3 PUSH2 0x1107 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP4 PUSH1 0x0 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x10BA JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x10BA JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x10BA JUMPI DUP1 MLOAD PUSH2 0x12F7 DUP2 PUSH2 0x115B JUMP JUMPDEST SWAP3 PUSH2 0x1305 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1139 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x10BA JUMPI PUSH2 0x1205 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x10BF JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1353 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x133D JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1332 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1368 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x135D JUMP JUMPDEST ISZERO PUSH2 0x137B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x555345525F414C52454144595F455849535453 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x13ED JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1480 JUMPI PUSH1 0x1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x146C JUMPI SWAP1 DUP3 PUSH2 0x1458 PUSH2 0x1441 DUP5 PUSH1 0x1 PUSH1 0x40 SWAP7 ADD PUSH1 0x1 SSTORE PUSH2 0x13B6 JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 SLOAD SWAP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x148C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1554D15497D113D154D7D393D517D1561254D5 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x14DB DUP5 PUSH2 0x1323 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x154A JUMPI POP PUSH1 0x1 EQ PUSH2 0x1507 JUMPI JUMPDEST POP POP PUSH2 0x1505 SWAP3 POP SUB DUP4 PUSH2 0x1139 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1532 JUMPI POP POP PUSH2 0x1505 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x14F7 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x151A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1505 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x14F7 JUMP JUMPDEST ISZERO PUSH2 0x1574 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0xAC82AA98A8BE9288BE9A92A69A82A8869 PUSH1 0x7B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x15B7 DUP2 SLOAD PUSH2 0x1323 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x15C1 JUMPI POP POP JUMP JUMPDEST DUP2 PUSH1 0x1F PUSH1 0x0 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x15D3 JUMPI POP SSTORE JUMP JUMPDEST SWAP1 DUP1 DUP4 SWAP2 DUP3 MSTORE PUSH2 0x15F2 PUSH1 0x1F PUSH1 0x20 DUP5 KECCAK256 SWAP5 ADD PUSH1 0x5 SHR DUP5 ADD PUSH1 0x1 DUP6 ADD PUSH2 0x135D JUMP JUMPDEST SSTORE SSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1603 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP1 ISZERO PUSH2 0x16FE JUMPI PUSH1 0x0 NOT SWAP1 DUP1 DUP3 ADD DUP2 DUP2 GT PUSH2 0x16EA JUMPI PUSH1 0x1 SLOAD SWAP1 DUP4 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x16D6 JUMPI DUP1 DUP3 SUB PUSH2 0x16A2 JUMPI JUMPDEST POP POP POP PUSH1 0x1 SLOAD DUP1 ISZERO PUSH2 0x168E JUMPI DUP2 ADD SWAP1 PUSH2 0x166D DUP3 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE PUSH1 0x1 SSTORE DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH2 0x16C0 PUSH2 0x16B1 PUSH2 0x1441 SWAP4 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP3 DUP4 SWAP3 PUSH2 0x13B6 JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1655 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST POP POP SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x170A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x4F55545F4F465F52414E4745 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1123 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 0xA6 0xB1 DIV 0x4E 0x25 JUMPI DUP14 ADDMOD ADDMOD CALLCODE 0x2F DUP2 PUSH17 0x409D9C8CEA01A7BA7D5E33C46721B83350 AND PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"227:4549:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;:::i;:::-;1063:62:0;;;:::i;:::-;-1:-1:-1;;;;;227:4549:5;;;;2162:22:0;;227:4549:5;;-1:-1:-1;;227:4549:5;;-1:-1:-1;;;;;;227:4549:5;;;;;;;2566:40:0;227:4549:5;;2566:40:0;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;;227:4549:5;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;961:91;;227:4549;;;;961:91;;;;;227:4549;;;;;;:::i;:::-;961:91;;;;;;;;;;;;;227:4549;;;;;;;;:::i;:::-;1138:10;227:4549;;1096:129;;;227:4549;;;1096:129;;;227:4549;;;1138:10;227:4549;;1236:9;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1236:9:5;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1236:9;227:4549;;;;;;;;1138:10;227:4549;;;1278:60;227:4549;;;;4351:24:2;1278:60:5;:::i;:::-;8398:50:2;1138:10:5;8398:50:2;:::i;:::-;;227:4549:5;1138:10;;;1387:26;1138:10;1387:26;;;227:4549;;:::i;:::-;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1236:9;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1236:9;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;961:91;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;227:4549:5;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;;;;;;;4113:21;;;;227:4549;;;;;4183:52;227:4549;;4191:27;;;4183:52;:::i;:::-;4285:21;;;;:::i;:::-;227:4549;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;4322:22;4346:12;;;;;;227:4549;;;;;;;:::i;4360:3::-;5005:18:2;;;:::i;:::-;227:4549:5;;4385:14;;;;;:::i;:::-;227:4549;;;;;;;;;;;;;;-1:-1:-1;;;;;227:4549:5;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;4322:22;;227:4549;-1:-1:-1;;;;;227:4549:5;;-1:-1:-1;227:4549:5;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;5005:18:2;227:4549:5;;;3727:48;227:4549;;3735:23;;3727:48;:::i;:::-;5005:18:2;:::i;:::-;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3625:6;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;227:4549:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1629:91;;227:4549;;;;1629:91;;;;;227:4549;;;;;;:::i;:::-;1629:91;;;;;;;;;;;;;227:4549;1755:10;;227:4549;;4351:12:2;227:4549:5;;1731:59;227:4549;;;;4351:24:2;;1731:59:5;:::i;:::-;1755:10;227:4549;;1832:9;227:4549;;;;;;1801:131;227:4549;;;;;1832:34;227:4549;:::i;:::-;;;;;;1822:45;227:4549;;;;;1871:18;1822:67;1801:131;:::i;:::-;1755:10;227:4549;;;;;;4351:12:2;227:4549:5;;;1974:31;227:4549;:::i;:::-;;;;;;1964:42;227:4549;;;;;2010:17;1964:63;227:4549;;1755:10;227:4549;;;;;;;;;2111:34;227:4549;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;227:4549:5;;;;;;;;;;;;;1755:10;227:4549;;;;;4351:12:2;227:4549:5;;;2166:31;227:4549;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:12:2;227:4549:5;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;2222:36;227:4549;;;;;1755:10;227:4549;1755:10;227:4549;;;;;;:::i;:::-;2222:36;;;1755:10;227:4549;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;4351:12:2;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;227:4549:5;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;-1:-1:-1;227:4549:5;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;1629:91;;;;;;;;;;;;;;:::i;:::-;;;;;;227:4549;;;;;;;;;;;;;;;;;;;;;;1063:62:0;;:::i;:::-;227:4549:5;;-1:-1:-1;;;;;;227:4549:5;;;;;;-1:-1:-1;;;;;227:4549:5;2566:40:0;227:4549:5;;2566:40:0;227:4549:5;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;-1:-1:-1;;;;;227:4549:5;;:::i;:::-;;;;4351:12:2;227:4549:5;;;;4351:24:2;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2488:91;;227:4549;2488:91;;;;;227:4549;;;;;;:::i;:::-;2488:91;;;;;;;;;;;;;227:4549;2614:10;;227:4549;;4351:12:2;227:4549:5;;2590:59;227:4549;;;;4351:24:2;;2590:59:5;:::i;:::-;2614:10;227:4549;;;;;;;;;2660:131;227:4549;;;;;2691:34;227:4549;:::i;:::-;;;;;;2681:45;227:4549;;;;;2730:18;2681:67;2660:131;:::i;:::-;2614:10;227:4549;;;;;;;;;;;;2823:46;227:4549;;;;;4351:12:2;227:4549:5;;2922:60;227:4549;;;;4351:24:2;2922:60:5;:::i;:::-;2614:10;227:4549;;;;;4351:12:2;227:4549:5;;;3138:31;227:4549;;;;;;;;:::i;:::-;;;;3026:154;;;227:4549;;;;:::i;:::-;3026:154;;;;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;4351:12:2;;227:4549:5;;;;;;-1:-1:-1;;;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4351:12:2;227:4549:5;;;;;;;;;;;;;;;;;-1:-1:-1;;;;227:4549:5;;;;;;;;;;;;;8398:50:2;;;:::i;:::-;;227:4549:5;;;;;3270:41;2614:10;;3270:41;;8719:53:2;2614:10:5;8719:53:2;:::i;:::-;;2614:10:5;227:4549;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;4351:12:2;227:4549:5;;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;4351:12:2;227:4549:5;;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;2488:91;;;;;;;;;;;;;;:::i;:::-;;;;;;227:4549;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;;;;;4735:32;;227:4549;;-1:-1:-1;;;;;227:4549:5;;:::i;:::-;;;;;;;;4735:32;227:4549;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;3526:6;227:4549;;;;;;;;;;;;;;;3526:6;227:4549;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;227:4549:5;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;227:4549:5;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;227:4549:5;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;227:4549:5;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;227:4549:5;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;-1:-1:-1;;227:4549:5;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;1359:130:0:-;1273:6;227:4549:5;-1:-1:-1;;;;;227:4549:5;719:10:1;1422:23:0;227:4549:5;;1359:130:0:o;227:4549:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;227:4549:5;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;227:4549:5;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;3743:6;227:4549;;;;;;3743:6;-1:-1:-1;227:4549:5;;;;-1:-1:-1;227:4549:5;:::o;:::-;;;;;;;;;;;;2214:404:2;-1:-1:-1;227:4549:5;;;4351:12:2;227:4549:5;;;;;;;;2598:6;227:4549;;;;;;;;;;;;2598:6;227:4549;;;2598:6;227:4549;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;2598:6;227:4549;;;;4351:12:2;227:4549:5;;;;2598:6;2547:11:2;:::o;227:4549:5:-;-1:-1:-1;;;227:4549:5;;;;;;;;2293:319:2;2589:12;;;:::o;227:4549:5:-;;;;:::o;:::-;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;227:4549:5;;;;-1:-1:-1;227:4549:5;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;227:4549:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;2786:1388:2;-1:-1:-1;227:4549:5;;;2989:12:2;227:4549:5;;;;;;-1:-1:-1;;227:4549:5;3023:15:2;;;;-1:-1:-1;;227:4549:5;;;;;;;;;2598:6;227:4549;;;;;;;;;;3505:26:2;;;3501:398;;3019:1149;227:4549:5;;;2598:6;227:4549;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2598:6;227:4549;;;2989:12:2;227:4549:5;;;;;;2598:6;4103:11:2;:::o;227:4549:5:-;-1:-1:-1;;;227:4549:5;;;;;;;;3501:398:2;227:4549:5;3571:22:2;3693:26;3571:22;;:::i;:::-;227:4549:5;;;;;;3693:26:2;;;;:::i;227:4549:5:-;;;;;2989:12:2;227:4549:5;;;;;;3501:398:2;;;;;227:4549:5;-1:-1:-1;;;227:4549:5;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;3019:1149:2;4145:12;;;:::o;227:4549:5:-;;;;:::o;:::-;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;-1:-1:-1;;;227:4549:5;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1205600","executionCost":"infinite","totalCost":"infinite"},"external":{"changeEVMAddress(bytes,address)":"infinite","changePublicKey(bytes,bytes)":"infinite","checkifUserExist(address)":"2500","getPaginatedUsers(uint256,uint256)":"infinite","getUserAt(uint256)":"6811","getUserCount()":"2431","getUserMetadata(address)":"infinite","getUserPublicKey(address)":"infinite","getUsers()":"infinite","owner()":"2430","registerUser(bytes,bytes)":"infinite","renounceOwnership()":"28163","transferOwnership(address)":"28466","verifierContract()":"2515"}},"methodIdentifiers":{"changeEVMAddress(bytes,address)":"470471ef","changePublicKey(bytes,bytes)":"89991520","checkifUserExist(address)":"48990fcc","getPaginatedUsers(uint256,uint256)":"cf5caa12","getUserAt(uint256)":"c6e064ad","getUserCount()":"b5cb15f7","getUserMetadata(address)":"ef2a8764","getUserPublicKey(address)":"11231fe0","getUsers()":"00ce8e3e","owner()":"8da5cb5b","registerUser(bytes,bytes)":"ebc4bf84","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","verifierContract()":"cf695688"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EVMAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newPublicKey\",\"type\":\"bytes\"}],\"name\":\"PublicKeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeEVMAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"changePublicKey\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/MecenateUsers.sol\":\"MecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x80a42989301760af1979c98162a585d095eb4adca49e90db73276cd47a14347a\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/registry/MecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\n\\ncontract MecenateUsers is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _users;\\n\\n    mapping(address => Structures.User) private _metadata;\\n\\n    address public verifierContract;\\n\\n    event UserRegistered(address indexed userAddress);\\n    event PublicKeyChanged(address indexed userAddress, bytes newPublicKey);\\n    event EVMAddressChanged(address indexed oldAddress, address newAddress);\\n\\n    constructor(address verifierContractAddress) {\\n        verifierContract = verifierContractAddress;\\n    }\\n\\n    function registerUser(\\n        bytes memory sismoConnectResponse,\\n        bytes memory pubKey\\n    ) external returns (Structures.User memory) {\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        Structures.User memory newUser = Structures.User({\\n            evmAddress: msg.sender,\\n            sismoVaultId: vaultId,\\n            publicKey: pubKey\\n        });\\n\\n        _metadata[msg.sender] = newUser;\\n\\n        require(!_users.contains(msg.sender), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        _users.add(msg.sender);\\n\\n        emit UserRegistered(msg.sender);\\n\\n        return newUser;\\n    }\\n\\n    function changePublicKey(\\n        bytes memory sismoConnectResponse,\\n        bytes memory pubKey\\n    ) external returns (Structures.User memory) {\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        require(_users.contains(msg.sender), \\\"USER_DOES_NOT_EXIST\\\");\\n\\n        require(\\n            keccak256(_metadata[msg.sender].sismoVaultId) == keccak256(vaultId),\\n            \\\"VAULT_ID_MISMATCH\\\"\\n        );\\n\\n        require(\\n            keccak256(_metadata[msg.sender].publicKey) != keccak256(pubKey),\\n            \\\"SAME_PUBLIC_KEY\\\"\\n        );\\n\\n        // modify user metadata\\n        _metadata[msg.sender].sismoVaultId = vaultId;\\n\\n        _metadata[msg.sender].publicKey = pubKey;\\n\\n        emit PublicKeyChanged(msg.sender, pubKey);\\n\\n        return _metadata[msg.sender];\\n    }\\n\\n    function changeEVMAddress(\\n        bytes memory sismoConnectResponse,\\n        address newAddress\\n    ) external returns (Structures.User memory) {\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        require(_users.contains(msg.sender), \\\"USER_DOES_NOT_EXIST\\\");\\n\\n        require(\\n            keccak256(_metadata[msg.sender].sismoVaultId) == keccak256(vaultId),\\n            \\\"VAULT_ID_MISMATCH\\\"\\n        );\\n\\n        require(\\n            _metadata[msg.sender].evmAddress != newAddress,\\n            \\\"SAME_EVM_ADDRESS\\\"\\n        );\\n\\n        require(!_users.contains(newAddress), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        Structures.User memory newUser = Structures.User({\\n            evmAddress: newAddress,\\n            sismoVaultId: vaultId,\\n            publicKey: _metadata[msg.sender].publicKey\\n        });\\n\\n        _metadata[newAddress] = newUser;\\n        _users.add(newAddress);\\n\\n        emit EVMAddressChanged(msg.sender, newAddress);\\n\\n        // remove old user\\n        _users.remove(msg.sender);\\n        delete _metadata[msg.sender];\\n\\n        return newUser;\\n    }\\n\\n    function getUsers() public view returns (address[] memory) {\\n        return _users.values();\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return _users.length();\\n    }\\n\\n    function getUserAt(uint256 index) public view returns (address) {\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\n        return _users.at(index);\\n    }\\n\\n    function checkifUserExist(\\n        address userAddress\\n    ) external view returns (bool) {\\n        return _users.contains(userAddress);\\n    }\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) public view returns (address[] memory) {\\n        require(startIndex < endIndex, \\\"START_INDEX_GREATER_THAN_END_INDEX\\\");\\n        require(endIndex <= _users.length(), \\\"OUT_OF_RANGE\\\");\\n\\n        address[] memory range = new address[](endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            range[i - startIndex] = _users.at(i);\\n        }\\n\\n        return range;\\n    }\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory) {\\n        return _metadata[userAddress];\\n    }\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory) {\\n        return _metadata[userAddress].publicKey;\\n    }\\n}\\n\",\"keccak256\":\"0xf389a0a2d61028842c19d501a2f260eeef2f1f0895147f4e1f06058236a3e849\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":933,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"_users","offset":0,"slot":"1","type":"t_struct(AddressSet)460_storage"},{"astId":938,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"_metadata","offset":0,"slot":"3","type":"t_mapping(t_address,t_struct(User)874_storage)"},{"astId":940,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"verifierContract","offset":0,"slot":"4","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_struct(User)874_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Structures.User)","numberOfBytes":"32","value":"t_struct(User)874_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)460_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":459,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)145_storage"}],"numberOfBytes":"64"},"t_struct(Set)145_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":140,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":144,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_struct(User)874_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":869,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":871,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":873,"contract":"contracts/registry/MecenateUsers.sol:MecenateUsers","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}